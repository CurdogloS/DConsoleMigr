#Область СлужебныеПроцедурыИФункции
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ТекстВБулево(ЗначениеТекста)
	
	ВрегТекст = ВРег(ЗначениеТекста);
	
	МассивЗначенийИстина 	= Новый Массив;
	МассивЗначенийложь 		= Новый Массив;
	
	МассивЗначенийИстина.Добавить("TRUE");
	МассивЗначенийИстина.Добавить("ИСТИНА");
	МассивЗначенийИстина.Добавить("ДА");
	МассивЗначенийИстина.Добавить("YES");
	МассивЗначенийИстина.Добавить("DA");
	МассивЗначенийИстина.Добавить("ADEVARAT");
	МассивЗначенийИстина.Добавить("ADEVĂRAT");
	
	Если Не МассивЗначенийИстина.Найти(ВрегТекст) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивЗначенийложь.Добавить("FALSE");
	МассивЗначенийложь.Добавить("ЛОЖЬ");
	МассивЗначенийложь.Добавить("НЕТ");
	МассивЗначенийложь.Добавить("NO");
	МассивЗначенийложь.Добавить("NU");
	МассивЗначенийложь.Добавить("FALS");
	
	// пустые тоже в нет переведем ...
	МассивЗначенийложь.Добавить("");
	МассивЗначенийложь.Добавить("НЕОПРЕДЕЛЕНО");
	МассивЗначенийложь.Добавить("UNDEFINED");
	
	Если Не МассивЗначенийложь.Найти(ВрегТекст) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Неопределено;
	
	
	
	

КонецФункции // ТекстВБулево()()

// Меняем при любом изменении
&НаСервереБезКонтекста
Функция ВерсияОбщая()
	Результат = Новый Структура;
	Результат.Вставить("Номер",19);
	Результат.Вставить("Дата","12.09.2023");
	
	Возврат Результат;
	
КонецФункции

// Меняем при изменении любом изменении функционала содании шаблонов
&НаСервереБезКонтекста
Функция ВерсияСозданиеШаблонов()
	Результат = Новый Структура;
	Результат.Вставить("Номер",19);
	Результат.Вставить("Дата","12.09.2023");
	
	Возврат Результат;
	
КонецФункции


// Меняем при изменении любом изменении функционала выгрузки
&НаСервереБезКонтекста
Функция ВерсияВыгрузки()
	Результат = Новый Структура;
	Результат.Вставить("Номер",7);
	Результат.Вставить("Дата","19.01.2023");
	
	Возврат Результат;
	
КонецФункции

// Меняем при изменении любом изменении функционала загрузки
&НаСервереБезКонтекста
Функция ВерсияЗагрузки()
	Результат = Новый Структура;
	Результат.Вставить("Номер",16);
	Результат.Вставить("Дата","25.08.2023");
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура ИнциализацияВерсииОбработки()
	ВерсияОбщая = ВерсияОбщая();
	ВерсияШаблонов = ВерсияСозданиеШаблонов();
	ВерсияВыгрузки = ВерсияВыгрузки();
	ВерсияЗагрузки = ВерсияЗагрузки();
	
	//1.Версия обработки
	ЭтаФорма.Заголовок = "Миграция данных через шаблоны xls,xlsx,mxl";
	ЭтаФорма.Элементы.Версия.Заголовок = "Version "+ВерсияОбщая.Номер+" <"+ВерсияОбщая.Дата+">";
	
	//2.Версия создании шаблонов
	ЭтаФорма.Элементы.ВерсияСозданиеШаблонов.Заголовок = "Version "+ВерсияШаблонов.Номер+" <"+ВерсияШаблонов.Дата+">";
	
	//3.Версия загрузки
	ЭтаФорма.Элементы.ВерсияЗагрузки.Заголовок = "Version "+ВерсияЗагрузки.Номер+" <"+ВерсияЗагрузки.Дата+">";
	
	//4.Версия выгрузки
	ЭтаФорма.Элементы.ВерсияВыгрузки.Заголовок = "Version "+ВерсияВыгрузки.Номер+" <"+ВерсияВыгрузки.Дата+">";
КонецПроцедуры


&НаСервереБезКонтекста
Функция СоответствиеСтруктураКолонокиШаблона()
	// первые 2 используется 1 для объекта , 2 просто разделение между объектом и дальнешей структуре
	// если будут менятся первые 2 нужно менять и функцию ВысотаШапкиШаблона;
	
	Результат = Новый Соответствие;
	Результат.Вставить("НомерКолонки","3");
	Результат.Вставить("Имя_Системы","4");
	Результат.Вставить("Синоним","5");
	Результат.Вставить("ТипЗначения","6");
	Результат.Вставить("Обязательность","7");
	Результат.Вставить("РеквизитСинхронизцииПриоритет1","8");
	Результат.Вставить("РеквизитСинхронизцииПриоритет2","9");
	Результат.Вставить("РеквизитСинхронизцииПриоритет3","10");
	Возврат Результат;
КонецФункции

&НаСервере
Функция СтруктураКолонкиШаблона(ТабличныйДокументШаблон,СоответствиеСтруктураКолонокиШаблона,НомерКолонки)
	Результат = Новый Структура;
	Для Каждого ЭлементСоответствиеСтруктураКолонокиШаблона Из СоответствиеСтруктураКолонокиШаблона Цикл
		ИмяСвойства 			= ЭлементСоответствиеСтруктураКолонокиШаблона.Ключ;
		НомерСтрокиСвойства 	= ЭлементСоответствиеСтруктураКолонокиШаблона.Значение;
		
		Если Не ИмяСвойства = "НомерКолонки" Тогда 
			ЗначениеСвойства		= ТабличныйДокументШаблон.Область("R"+НомерСтрокиСвойства+"C"+ФЧО(НомерКолонки)).Текст;
		Иначе
			// хочется иметь реальный номер колонки Таблицы а не по полю что могут менять
			ЗначениеСвойства		= ФЧО(НомерКолонки);
		КонецЕсли;
		
		Результат.Вставить(ИмяСвойства,ЗначениеСвойства);
		
	КонецЦикла;
	
	// пока так
	//Результат.Вставить("Обязательность",Ложь);
	
	Возврат Результат;
КонецФункции

// нужна для того что бы знать с какой строки начинаются собственно данные
&НаСервереБезКонтекста
Функция ВысотаШапкиШаблона()
	 Возврат СоответствиеСтруктураКолонокиШаблона().Количество() + 2;
КонецФУнкции

&НаСервереБезКонтекста
Процедура ОформитьЯчейкуИмяОбъектаВыгрузкиЗагрузк(Ячейка)
	Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Ячейка.Шрифт = Шрифт;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОформитьЯчейкуШапкиШаблонаВыгрузкиЗагрузк(Ячейка)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Ячейка.ЦветФона = WebЦвета.НебесноГолубой;
	Ячейка.ГраницаСверху = Линия;
	Ячейка.ГраницаСлева = Линия;
	Ячейка.ГраницаСнизу = Линия;
	Ячейка.ГраницаСправа = Линия;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьШапкуШаблонаВыгрузкиЗагрузк(ТабличныйДокумент,КоличествоКолонок)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	ОбластьШапки = ТабличныйДокумент.Область("R3C1:R"+ФЧО(ВысотаШапкиШаблона())+"C"+КоличествоКолонок);
	
	ОбластьШапки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ОбластьШапки.ЦветФона = WebЦвета.НебесноГолубой;
	ОбластьШапки.ШиринаКолонки = 18;
	ОбластьШапки.ГраницаСверху = Линия;
	ОбластьШапки.ГраницаСлева = Линия;
	ОбластьШапки.ГраницаСнизу = Линия;
	ОбластьШапки.ГраницаСправа = Линия;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ОпределитьОбъектМетаданныхЕслиОнСуществуетВЭтойКонфигурации(ТипОбъект)
	
	ТипОбъект = ВРег(ТипОбъект);
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование",Неопределено);
	Результат.Вставить("ПредставлениеОбъекта",Неопределено);
	Результат.Вставить("ПолнноеИмяОбъекта",Неопределено);
	//==============================================
	//@# (Начало) Курдогло Сергей [06.02.2023 9:16:01]
	Результат.Вставить("ТабличнаяЧасть",Неопределено);
	Подстроки = СтрРазделить(ТипОбъект,".");
	Если Подстроки.Количество()=4 и  Подстроки[2] = "ТАБЛИЧНАЯЧАСТЬ" Тогда
		НашелОбъект = Метаданные.НайтиПоПолномуИмени(ТипОбъект);
		Если НашелОбъект <> Неопределено Тогда
			Результат.Вставить("Наименование",Подстроки[1]);
			Результат.Вставить("ПредставлениеОбъекта",Подстроки[1]);
			Результат.Вставить("ПолнноеИмяОбъекта",ТипОбъект);
			Результат.Вставить("ТабличнаяЧасть",Подстроки[3]);
			
		КонецЕсли; 
	Иначе 
		Если  Лев(ТипОбъект,10) = "СПРАВОЧНИК" Тогда
			ИмяСправочника = СтрЗаменить(ТипОбъект,"СПРАВОЧНИК.","");
			НашелОбъект = Метаданные.Справочники.Найти(ИмяСправочника);
		ИначеЕсли  Лев(ТипОбъект,22) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			ИмяОбъекта = СтрЗаменить(ТипОбъект,"ПЛАНВИДОВХАРАКТЕРИСТИК.","");
			НашелОбъект = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта); 
		ИначеЕсли  Лев(ТипОбъект,8) = "ДОКУМЕНТ" Тогда
			ИмяОбъекта = СтрЗаменить(ТипОбъект,"ДОКУМЕНТ.","");
			НашелОбъект = Метаданные.Документы.Найти(ИмяОбъекта);			
		КонецЕсли;
		Если НашелОбъект <> Неопределено Тогда
			Результат.Вставить("Наименование",НашелОбъект.Имя);
			Результат.Вставить("ПредставлениеОбъекта",НашелОбъект.Представление());
			Результат.Вставить("ПолнноеИмяОбъекта",НашелОбъект.ПолноеИмя());
		КонецЕсли;	
	КонецЕсли;
//		//===================================================
//		//@# (Начало) Голуб Вениамин [09.02.2023 11:43:59]  
		Если  Лев(ТипОбъект,15) = "РЕГИСТРСВЕДЕНИЙ" Тогда
			ИмяРегистра = СтрЗаменить(ТипОбъект,"РЕГИСТРСВЕДЕНИЙ.","");
			НашелОбъект = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
			Если НашелОбъект <> Неопределено Тогда
				Результат.Вставить("Наименование",НашелОбъект.Имя);
				Результат.Вставить("ПредставлениеОбъекта",НашелОбъект.Представление());
				Результат.Вставить("ПолнноеИмяОбъекта",НашелОбъект.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
//		//@# (Конец) Голуб Вениамин [09.02.2023 11:43:59]
//		//===================================================
   //  //@# (Конец) Курдогло Сергей [25.01.2023 11:41:29]
   //  //==============================================
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитДляСинхронизацииОпределен(Конфигурация,ИмяОбъекта)
	
	СоответствиеОбъектовИРеквизитовБух = Новый Соответствие;
	СоответствиеОбъектовИРеквизитовБух.Вставить("СПРАВОЧНИКССЫЛКА.КОНТРАГЕНТЫ","ИНН");
	СоответствиеОбъектовИРеквизитовБух.Вставить("СПРАВОЧНИКССЫЛКА.ФИЗИЧЕСКИЕЛИЦА","ИНН");
	// ТУТ БУДЕМ ДОБАВЛЯТЬ ОТ РУКИ ДЛЯ КОНКРЕТНЫХ ОБЪЕКТОВ.
	
	
	СоответствиеОбъектовИРеквизитовЕРП 	= Новый Соответствие;
	СоответствиеОбъектовИРеквизитовУТ 	= Новый Соответствие;
	СоответствиеОбъектовИРеквизитовРоз 	= Новый Соответствие;
	СоответствиеОбъектовИРеквизитовЗУП 	= Новый Соответствие;
	
	
	
	
	
	ИмяВрег = ВРег(ИмяОбъекта);
	Результат = Неопределено;
	Если Врег(Конфигурация) = "БУХГАЛТЕРИЯПРЕДПРИЯТИЯ" Тогда
		Результат = СоответствиеОбъектовИРеквизитовБух.Получить(ИмяВрег);
	ИначеЕсли Врег(Конфигурация) = "ИМЯЕРП" Тогда
		Результат = СоответствиеОбъектовИРеквизитовЕРП.Получить(ИмяВрег);
	ИначеЕсли Врег(Конфигурация) = "ИМЯУТ" Тогда
		Результат = СоответствиеОбъектовИРеквизитовУТ.Получить(ИмяВрег);
	ИначеЕсли Врег(Конфигурация) = "ИМЯРОЗ" Тогда
		Результат = СоответствиеОбъектовИРеквизитовРоз.Получить(ИмяВрег);
	ИначеЕсли Врег(Конфигурация) = "ИМЯЗУП" Тогда
		Результат = СоответствиеОбъектовИРеквизитовЗУП.Получить(ИмяВрег);
	КонецЕсли;
		
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДеревеоМетадата();
	ИнциализацияВерсииОбработки();
	ИницироватьСписокКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны();
	Элементы.НаименованиеЗагрузка.СписокВыбора.ЗагрузитьЗначения(СоздатьСписокЗначений().ВыгрузитьЗначения());
	
	//===================================================
	//@# (Начало) Alexandru Ciobanu [27.01.2023 11:18:01] 
	Если Элементы.ФорматДатыДляЗагрузки.СписокВыбора.Количество() Тогда
		ФорматДатыДляЗагрузки = Элементы.ФорматДатыДляЗагрузки.СписокВыбора[0].Значение;
		РазделительВФорматеДатыЗагрузки = ".";
	Иначе
		ФорматДатыДляЗагрузки = "ДД.ММ.ГГГГ";
		РазделительВФорматеДатыЗагрузки = ".";
	КонецЕсли;
	//@# (Конец) Alexandru Ciobanu [27.01.2023 11:18:01]
	//===================================================
	
КонецПроцедуры
 //==============================================
 //@# (Начало) Курдогло Сергей [03.02.2023 20:39:19]
&НаКлиенте
Процедура ОбработкаОшибокПриИзменении(Элемент)
	УсловноОформитьДоступ("ПриПереключении");
КонецПроцедуры
//@# (Конец) Курдогло Сергей [03.02.2023 20:39:22]
//==============================================

#КонецОбласти

#Область СозданиеШаблона

&НаСервере
Процедура ЗаполнитьДеревеоМетадата()
	
	Дерево = РеквизитФормыВЗначение("СтруктураМета");
	
	ГруппаСправочники = Дерево.Строки.Добавить();
	ГруппаСправочники.ТипОбъекта = "Справочник";
	ГруппаСправочники.Идентификатор = "Справочник";
	Для Каждого Об Из  Метаданные.Справочники Цикл
		НоваяСтрока = ГруппаСправочники.Строки.Добавить();
		НоваяСтрока.ТипОбъекта = "Справочник";
		НоваяСтрока.Идентификатор = Об.Имя;
		
		
	КонецЦикла;
	
	ГруппаДокументы = Дерево.Строки.Добавить();
	ГруппаДокументы.ТипОбъекта = "Документ";
	ГруппаДокументы.Идентификатор = "Документ";
	Для Каждого Об Из  Метаданные.Документы Цикл
		НоваяСтрока = ГруппаДокументы.Строки.Добавить();
		НоваяСтрока.ТипОбъекта = "Документ";
		НоваяСтрока.Идентификатор = Об.Имя;
		
		
	КонецЦикла;
	//==============================================
	//@# (Начало) Курдогло Сергей [07.02.2023 17:01:26]
	ГруппаПВХ = Дерево.Строки.Добавить();
	ГруппаПВХ.ТипОбъекта = "ПланВидовХарактеристик";
	ГруппаПВХ.Идентификатор = "ПланВидовХарактеристик";
	Для Каждого Об Из  Метаданные.ПланыВидовХарактеристик Цикл 
		
		НоваяСтрока = ГруппаПВХ.Строки.Добавить();
		НоваяСтрока.ТипОбъекта = "ПланВидовХарактеристик";
		НоваяСтрока.Идентификатор = Об.Имя;
		
		
	КонецЦикла;
	
	ЗагрузитьТранзакцией = Истина;
	//@# (Конец) Курдогло Сергей [07.02.2023 17:01:30]
	//==============================================
//{{MRG[ <-> ]
//	//===================================================
//	//@# (Начало) Голуб Вениамин [08.02.2023 12:07:16]  
	ГруппаНезависимыеРегистрыСведений = Дерево.Строки.Добавить();
	ГруппаНезависимыеРегистрыСведений.ТипОбъекта = "РегистрСведений";
	ГруппаНезависимыеРегистрыСведений.Идентификатор = "РегистрСведений";
	Для Каждого Регистр Из  Метаданные.РегистрыСведений Цикл
		Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда 
			НоваяСтрока = ГруппаНезависимыеРегистрыСведений.Строки.Добавить();
			НоваяСтрока.ТипОбъекта = "РегистрСведений";
			НоваяСтрока.Идентификатор = Регистр.Имя;
		КонецЕсли;
	КонецЦикла;
//	//@# (Конец) Голуб Вениамин [08.02.2023 12:07:16]
//	//===================================================
//}}MRG[ <-> ]
	
	
	
	ЗначениеВРеквизитФормы(Дерево,"СтруктураМета");
	
	Версия = " 2.4 "; 
	
	УсловноОформить();
	
КонецПроцедуры

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	ЗаполнитьДеревеоМетадата();
//	
//КонецПроцедуры

&НаСервере
Функция ТипРеквизитаВстроку(Реквизит,Уровень)   //Добавлен параметр "Уровень" =чтобы бесконечно не получать типы реквизита из типа реквизита
	Результат = "";
	МассивТипов = Реквизит.Тип.Типы();
	
	Для Каждого ЭлементТипа Из МассивТипов Цикл
		Тип = Метаданные.НайтиПоТипу(ЭлементТипа);
		//==============================================
		//@# (Начало) Курдогло Сергей [11.01.2023 11:42:31]
		//Если Тип = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		//Результат = Результат + Тип.ПолноеИмя() + ","; 
		Если Уровень = 1 Тогда
//Если Объектметаданных перечисление, то записать его в ДеревоЗначенийНаФорме
			Если Тип<> Неопределено Тогда
				Если Метаданные.Перечисления.Содержит(Тип) Тогда
					ЗаполнитьДеревоПеречислений(Тип); 
				Конецесли;
			Конецесли;
			
///Если Объектметаданных справочник, то записать его в ДеревоЗначенийНаФорме
			Если Тип<> Неопределено Тогда
				Если Метаданные.Справочники.Содержит(Тип) или Метаданные.ПланыСчетов.Содержит(Тип) или Метаданные.ПланыВидовХарактеристик.Содержит(Тип)
					или Метаданные.Документы.Содержит(Тип) или Метаданные.ПланыВидовРасчета.Содержит(Тип) Тогда
					ЗаполнитьТаблицаРеквизитыВсехРеквизитов(Тип,Реквизит); 
				Конецесли;
			Конецесли;
		КонецЕсли;
		
//Для типа Строка или Число выводить длину реквизита вместе с названием
		Если ЭлементТипа = Тип("Число") или ЭлементТипа = Тип("Строка") Тогда
			РеквизитИДлина = ""+Реквизит.Тип +?(Реквизит.Тип.КвалификаторыСтроки.Длина <> 0," ("+
			Реквизит.Тип.КвалификаторыСтроки.Длина+")",Неопределено)
			+?(Реквизит.Тип.КвалификаторыЧисла.Разрядность <> 0,"("+Реквизит.Тип.КвалификаторыЧисла.Разрядность+"."+
			Реквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти+")",Неопределено);
		Иначе
			РеквизитИДлина = Реквизит.Тип;
		КонецЕсли;	
	
//Чтобы примитивные типы тоже выводились (РеквизитИДлина)
		Результат = Результат + ?(МассивТипов.Найти(ЭлементТипа)<>0, ",","") + 
		?(Тип <> Неопределено,Тип.ПолноеИмя(),РеквизитИДлина);
		//@# (Конец) Курдогло Сергей [11.01.2023 11:42:36]
		//==============================================
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция СтруктураМетаПриАктивизацииСтрокиНаСервере(ОбъектДлязаполнения,ТипОбъекта)
	Результат = Новый Структура;
	
	Если ТипОбъекта = "Справочник" Тогда 
		МетаОбъект = Метаданные.Справочники[ОбъектДлязаполнения]
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		МетаОбъект = Метаданные.Документы[ОбъектДлязаполнения]
		//==============================================
		//@# (Начало) Курдогло Сергей [07.02.2023 17:03:15] 
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		 МетаОбъект = Метаданные.ПланыВидовХарактеристик[ОбъектДлязаполнения]
//	//===================================================
//	//@# (Начало) Голуб Вениамин [08.02.2023 12:37:04]  
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		МетаОбъект = Метаданные.РегистрыСведений[ОбъектДлязаполнения];
//	//@# (Конец) Голуб Вениамин [08.02.2023 12:37:04]
//	//===================================================	
	КонецЕсли;
	    //@# (Конец) Курдогло Сергей [07.02.2023 17:04:31]
		//==============================================
	
		//стандартные реквизиты	
		Для каждого Реквизит из МетаОбъект.СтандартныеРеквизиты Цикл
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("Имя",Реквизит.Имя);
			ОписаниеРеквизита.Вставить("Синоним",Реквизит.Синоним);
			ОписаниеРеквизита.Вставить("Комментарий",Реквизит.Комментарий);
			ОписаниеРеквизита.Вставить("Тип",ТипРеквизитаВстроку(Реквизит,1));
			ОписаниеРеквизита.Вставить("ПроверкаЗаполнения",""+Реквизит.ПроверкаЗаполнения);	
			
			Результат.Вставить(Реквизит.Имя,ОписаниеРеквизита);	
			
		КонецЦикла;
		
		//прочие реквизиты		
		Для Каждого Реквизит Из  МетаОбъект.Реквизиты Цикл
			
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("Имя",Реквизит.Имя);
			ОписаниеРеквизита.Вставить("Синоним",Реквизит.Синоним);
			ОписаниеРеквизита.Вставить("Комментарий",Реквизит.Комментарий);
			ОписаниеРеквизита.Вставить("Тип",ТипРеквизитаВстроку(Реквизит,1));
			ОписаниеРеквизита.Вставить("ПроверкаЗаполнения",""+Реквизит.ПроверкаЗаполнения);
			
			
			Результат.Вставить(Реквизит.Имя,ОписаниеРеквизита);
			
		КонецЦикла;	
//		КонецЦикла;
//		//===================================================
//		//@# (Начало) Голуб Вениамин [08.02.2023 16:37:50] 
//		// дополняем результат полями из измерений и ресурсов  
		Если ТипОбъекта = "РегистрСведений" Тогда
			ДополнитьРезультатИзмерениямиИРесурсами(Результат, МетаОбъект);	
		КонецЕсли;
//		//@# (Конец) Голуб Вениамин [08.02.2023 16:37:50]
//		//===================================================

			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтруктураМетаПриАктивизацииСтроки(Элемент)

    //Для каждого Объекта новый список перечислений	
	Древо = ПречисленияДерево.ПолучитьЭлементы();
	Древо.Очистить();
	//Для какждого Объекта новый список табличных частей
	Дерево = ДеревоТаблиц.ПолучитьЭлементы();
	Дерево.Очистить();

	//Для какждого Объекта новый список реквизитов 
	РеквизитыВсехРеквизитовТаблица.Очистить();

	ТекДанные = Элементы.СтруктураМета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбъектДлязаполнения = ТекДанные.Идентификатор;
	//Если ОбъектДлязаполнения <> "Справочник"  И ОбъектДлязаполнения <> "Документ" И ОбъектДлязаполнения <> "ПланВидовХарактеристик" Тогда
//	//===================================================
//	//@# (Начало) Голуб Вениамин [08.02.2023 12:27:59]  
	ОбъектыДлязаполнения = Новый Массив;
	ОбъектыДлязаполнения.Добавить("Справочник");
	ОбъектыДлязаполнения.Добавить("Документ");
	ОбъектыДлязаполнения.Добавить("РегистрСведений");
	ОбъектыДлязаполнения.Добавить("ПланВидовХарактеристик");
	//Если ОбъектДлязаполнения <> "Справочник"  И ОбъектДлязаполнения <> "Документ" Тогда
	Если (ОбъектыДлязаполнения.Найти(ОбъектДлязаполнения) = Неопределено) Тогда
//	//@# (Конец) Голуб Вениамин [08.02.2023 12:27:59]
//	//===================================================
		СтруктураРеквизитов = СтруктураМетаПриАктивизацииСтрокиНаСервере(ОбъектДлязаполнения,ТекДанные.ТипОбъекта);			
		
		
		ЗаполнитьДеревоТаблиц(ОбъектДлязаполнения,ТекДанные.ТипОбъекта); 

		ИмяОбъекта = ТекДанные.ТипОбъекта +"."+ТекДанные.Идентификатор;
		
	//Заполнить основную таблицу с реквизитами	
		Реквизиты.Очистить();
		ЗаполнитьРеквизиты(СтруктураРеквизитов);
		
		ВидимостьКнопкиНастроитьПоТиповомуШаблонуНаСервере(ИмяОбъекта);
		
	КонецЕсли;
КонецПроцедуры

//==============================================
//@# (Начало) Курдогло Сергей [10.01.2023 17:25:56]

&НаСервере
Процедура ЗаполнитьРеквизиты(СтруктураРеквизитов);
	ТаблицаРеквизиты = РеквизитФормыВЗначение("Реквизиты");
	
	Для каждого реквизит из СтруктураРеквизитов Цикл
		
		НоваяСтрока = ТаблицаРеквизиты.Добавить();
		НоваяСтрока.Представление = реквизит.Ключ;
		НоваяСтрока.Значение = реквизит.Значение;
		НоваяСтрока.Синоним = Реквизит.Значение.Синоним;
		Необходимость = ПроверкаНеобходимостиРеквизита(реквизит.Ключ,реквизит.Значение);
		Если Необходимость Тогда
			НоваяСтрока.Пометка = Истина;
		Иначе 
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		Таблица = ПолучитьРеквизитыРеквизита(реквизит.Ключ);
		Если Таблица.Количество() > 0 Тогда
			НоваяСтрока.ЕстьТаблица = Истина;
			НоваяСтрока.РеквизитыРеквизитов = Таблица.Скопировать();			
		КонецЕсли;
		//==============================================
		//@# (Начало) Курдогло Сергей [23.02.2023 15:59:35]
		Если реквизит.Значение.ПроверкаЗаполнения = "Выдавать ошибку" Тогда
			НоваяСтрока.Обязательный = Истина;
		КонецЕсли;
		Попытка
			Если реквизит.Значение.Ведущее Тогда
				НоваяСтрока.Обязательный = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		//@# (Конец) Курдогло Сергей [23.02.2023 15:59:37]
		//==============================================
		//НоваяСтрока.РеквизитыРеквизитов.Сортировать("Реквизит");
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ТаблицаРеквизиты,"Реквизиты");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНеобходимостиРеквизита(ИмяРеквизита,Описание)
	
	  Массив = Новый Массив;
	  Массив.Добавить("ПометкаУдаления");
	  Массив.Добавить("ИмяПредопределенныхДанных");
	  Массив.Добавить("Предопределенный");
	  //Массив.Добавить("ЭтоГруппа");
	  Массив.Добавить("Ссылка");
	  Массив.Добавить("Проведен");
	  //СложныеТипы
	  Массив.Добавить("Хранилище значения");
	  
	  Тип = Неопределено;
	  Есть =  Описание.Свойство("Тип",Тип);
	  
	  Если Массив.Найти(ИмяРеквизита)<>Неопределено ИЛИ
		  Массив.Найти(Тип)<>Неопределено ИЛИ ЛЕВ(ВРЕГ(ИмяРеквизита),7) = "УДАЛИТЬ" Тогда
		  Возврат Ложь;
	  Иначе
	      Возврат Истина;
	  КонецЕсли;
	  
КонецФункции


&НаКлиенте
Процедура СоздатьШаблон(Команда)
	
	Табдок = Новый ТабличныйДокумент; 
	Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	СоздатьШаблонНаСервере().Показать(ИмяОбъекта);

//Вывод перечислений в отдельный Табличный документ 
    ВыводПеречислений();
	
//Вывод реквизитов табличных частей справочника 
    СоздатьШаблонТЧНаСервере();


	
КонецПроцедуры

&НаКлиенте
Процедура ВыводПеречислений() 
	
	Древо = ПречисленияДерево.ПолучитьЭлементы();
	Если Древо.Количество() >0 Тогда
		ТабПеречисления = Новый ТабличныйДокумент; 
		
		Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание

	
		Итт = 0;
		Для каждого строка из Древо Цикл
			Итт = Итт +1;	
			Шапка = ТабПеречисления.Область("R1"+"C"+Итт);
			//Шапка.СодержитЗначение = Истина;
			Шапка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			Шапка.ШиринаКолонки = 45;
			Шапка.Шрифт = Шрифт;
			Шапка.Текст = строка.Перечисление;
			
			НижнийУровень = строка.ПолучитьЭлементы();
			Номер=1;
			Для каждого Нижний из НижнийУровень Цикл 
				Номер = Номер+1;
				Строк = ТабПеречисления.Область("R" + Номер + "C" + Итт);
				//Строк.СодержитЗначение = Истина;
				Строк.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

				Строк.Текст = Нижний.ЗначенияПеречислений;
			КонецЦикла;
			
		КонецЦикла;
		ТабПеречисления.Показать("Перечисления",,);
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДеревоПеречислений(ОбъектМета)
	
    Дерево = РеквизитФормыВЗначение("ПречисленияДерево");
	
	Имя = ОбъектМета.ПолноеИмя();
	Строки = Дерево.Строки.Найти(Имя,"Перечисление");
	Если Строки = Неопределено Тогда 
		ГруппаПеречисления = Дерево.Строки.Добавить();
		ГруппаПеречисления.Перечисление = Имя;
		
		Для Каждого Перечисление Из  ОбъектМета.ЗначенияПеречисления Цикл
			НоваяСтрока = ГруппаПеречисления.Строки.Добавить();
			НоваяСтрока.Перечисление = Имя;
			НоваяСтрока.ЗначенияПеречислений = Перечисление.Имя;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(Дерево,"ПречисленияДерево");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоТаблиц(ОбъектДлязаполнения,ТипОбъекта) 
	
	Список = РеквизитФормыВЗначение("ДеревоТаблиц");
	

	Если ТипОбъекта = "Справочник" Тогда 
		Метатаблицы = Метаданные.Справочники[ОбъектДлязаполнения].ТабличныеЧасти
	ИначеЕсли
		ТипОбъекта = "Документ" Тогда
		Метатаблицы = Метаданные.Документы[ОбъектДлязаполнения].ТабличныеЧасти 
	//==============================================
	//@# (Начало) Курдогло Сергей [07.02.2023 17:09:27]
	ИначеЕсли
		ТипОбъекта = "ПланВидовХарактеристик" Тогда
		Метатаблицы = Метаданные.ПланыВидовХарактеристик[ОбъектДлязаполнения].ТабличныеЧасти 		
//{{MRG[ <-> ]
//	//===================================================
//	//@# (Начало) Голуб Вениамин [08.02.2023 12:43:57] TFS 
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		Возврат;
//	//@# (Конец) Голуб Вениамин [08.02.2023 12:43:57]
//	//===================================================
//}}MRG[ <-> ]
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [07.02.2023 17:09:29]
	//==============================================
	
	Для каждого Табл из Метатаблицы Цикл
		НоваяСтрока = Список.Строки.Добавить();
		НоваяСтрока.Таблица = Табл.ПолноеИмя();
		НоваяСтрока.ИмяКороткое = Табл.Имя;
		НоваяСтрока.Пометка = Истина;
		
		Для каждого рекв из Табл.СтандартныеРеквизиты Цикл 
			НижнийУровень = НоваяСтрока.Строки.Добавить();
			Тип = ТипРеквизитаВстроку(Рекв,1);
			НижнийУровень.РеквизитИмя = рекв.имя;
			НижнийУровень.Тип = Тип;
			НижнийУровень.Синоним = рекв.Синоним;
			НижнийУровень.ПроверкаЗаполнения = рекв.ПроверкаЗаполнения;
			НижнийУровень.Пометка = Истина;
			
			//заполнить таблицу РеквизитыРеквизитов	
			РеквизитыРеквизита = ПолучитьРеквизитыРеквизита(рекв.имя);
			//Для условного оформления
			Если РеквизитыРеквизита.Количество() > 0 Тогда
				НоваяСтрока.ЕстьТаблица = Истина;
				НижнийУровень.ЕстьТаблица = Истина;
				НижнийУровень.РеквизитыРеквизитов = РеквизитыРеквизита.Скопировать();
			КонецЕсли; 
			
			Если рекв.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				 НижнийУровень.Обязательный = Истина;
			КонецЕсли;
			 
		КонецЦикла;
		
		//==============================================
		//@# (Начало) Курдогло Сергей [13.02.2023 12:13:44]
		//Для табличных частей вывести фильтры во вторую строку шаблона для нахождения ссылки при загрузке
		
				НижнийУровень = НоваяСтрока.Строки.Добавить();
				НижнийУровень.РеквизитИмя = "Ссылка";
				НижнийУровень.Синоним = "Ссылка";
				//НижнийУровень.ПроверкаЗаполнения = рекв.ПроверкаЗаполнения;
				НижнийУровень.Пометка = Ложь;
				РеквизитыРеквизита = ПолучитьРеквизитыРеквизита("Ссылка");
				Если РеквизитыРеквизита.Количество() > 0 Тогда
					НоваяСтрока.ЕстьТаблица = Истина;
					НижнийУровень.ЕстьТаблица = Истина;
					НижнийУровень.РеквизитыРеквизитов = РеквизитыРеквизита.Скопировать();
				КонецЕсли;
			//@# (Конец) Курдогло Сергей [13.02.2023 12:13:47]
			//==============================================
		

			
		Для каждого рекв из Табл.Реквизиты Цикл 
			НижнийУровень = НоваяСтрока.Строки.Добавить();
			Тип = ТипРеквизитаВстроку(Рекв,1);
			НижнийУровень.РеквизитИмя = рекв.имя;
			НижнийУровень.Тип = Тип;
			НижнийУровень.Синоним = рекв.Синоним;
			НижнийУровень.ПроверкаЗаполнения = рекв.ПроверкаЗаполнения;
			НижнийУровень.Пометка = Истина;
			//заполнить таблицу РеквизитыРеквизитов	
			РеквизитыРеквизита = ПолучитьРеквизитыРеквизита(рекв.имя);
			//Для условного оформления
			Если РеквизитыРеквизита.Количество() > 0 Тогда
				НоваяСтрока.ЕстьТаблица = Истина;
				НижнийУровень.ЕстьТаблица = Истина;
				НижнийУровень.РеквизитыРеквизитов = РеквизитыРеквизита.Скопировать();
			КонецЕсли;
			
			Если рекв.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				 НижнийУровень.Обязательный = Истина;
			КонецЕсли;

		
		КонецЦикла
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(Список,"ДеревоТаблиц");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицаРеквизитыВсехРеквизитов(ОбъектМета,РеквизитГлавный)
	
	//Таблица = РеквизитФормыВЗначение("РеквизитыСправочниковТаблица");
	
	Имя = ОбъектМета.ПолноеИмя();		
	Для Каждого Реквизит Из  ОбъектМета.Реквизиты Цикл
		НоваяСтрока = РеквизитыВсехРеквизитовТаблица.Добавить();
		НоваяСтрока.Справочник = Имя;
		НоваяСтрока.Тип = ТипРеквизитаВстроку(Реквизит,2);
		НоваяСтрока.Реквизит = Реквизит.Имя;
		НоваяСтрока.ГлавныйРеквизит = РеквизитГлавный.Имя; 
		НоваяСтрока.СтандартныйРеквизит = Ложь;
		
	КонецЦикла;
	Для Каждого Реквизит Из  ОбъектМета.СтандартныеРеквизиты Цикл
		НоваяСтрока = РеквизитыВсехРеквизитовТаблица.Добавить();
		НоваяСтрока.Справочник = Имя;
		НоваяСтрока.Тип =  ТипРеквизитаВстроку(Реквизит,2);
		НоваяСтрока.Реквизит = Реквизит.Имя;
		НоваяСтрока.ГлавныйРеквизит = РеквизитГлавный.Имя;
		НоваяСтрока.СтандартныйРеквизит = Истина;
		
	КонецЦикла;
	//РеквизитыСправочниковТаблица.Свернуть("Справочник,Тип,Реквизит,ГлавныйРеквизит,СтандартныйРеквизит,Использовать");	
	//
	//
	//ЗначениеВРеквизитФормы(Таблица,"РеквизитыСправочниковТаблица");
	
	
КонецПроцедуры


&НаКлиенте
Процедура РеквизитыРеквизитыРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОткрытьФорму("ВнешняяОбработка.СоздатьШаблонМиграцииДанныхОбъекта.Форма.ФормаВыбора",,ЭтаФорма);
	

КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыРеквизита(Реквизит)	
	
	//РеквитыТаблица = РеквизитФормыВЗначение("РеквизитыСправочниковТаблица"); 
	Отбор = Новый Структура;
	Отбор.Вставить("ГлавныйРеквизит",Реквизит);
	Строки = РеквизитыВсехРеквизитовТаблица.НайтиСтроки(Отбор);
	
	
	Тз = Новый ТаблицаЗначений;
	Тз = РеквизитыВсехРеквизитовТаблица.Выгрузить(Строки);

	//Тз = РеквитыТаблица.Скопировать(Строки);
	
	//Код и наименование в начало таблицы переместить 
	Если Тз.Количество()> 0 Тогда;
		//Тз.Сортировать("Реквизит"); 
		Итт = 0;
		Для каждого Строка из  Тз Цикл				
			Если Строка.СтандартныйРеквизит И Строка.Реквизит ="Код" 
				или Строка.СтандартныйРеквизит И Строка.Реквизит ="Наименование" 
				Тогда
				Строка.Использовать = Истина;
				Тз.Сдвинуть(Итт,-Итт);
			//ИначеЕсли Строка.СтандартныйРеквизит И Строка.Реквизит ="ИмяПредопределенныхДанных" Тогда
			//	Строка.Использовать = Ложь;
			//	Тз.Сдвинуть(Итт,-Итт);
			//==============================================
			//@# (Начало) Курдогло Сергей [23.02.2023 12:03:07]
			ИначеЕсли ВРЕГ(Строка.Реквизит) = "ИНН" Тогда	
				Строка.Использовать = Истина;
				Тз.Сдвинуть(Итт,-Итт);
			Конецесли;
			//@# (Конец) Курдогло Сергей [23.02.2023 12:04:41]
			//==============================================
			Итт= Итт+1;
		КонецЦикла;
	КонецЕсли;
	//УбратьДубли. В РеквизитыСправочниковТаблица могут попасть одинаковые реквизиты из ТЧ и Реквизитов. 
	Тз.Свернуть("Справочник,Тип,Реквизит,ГлавныйРеквизит,СтандартныйРеквизит,Использовать");
	
	Возврат Тз ;
	
	
КонецФункции


&НаКлиенте
Процедура РеквизитыПриАктивизацииЯчейки(Элемент)
	
	Элементы.ДеревоТаблицРеквизитыРеквизитов.ВыделенныеСтроки.Очистить();
	Элементы.РеквизитыРеквизитыРеквизитов.Видимость = Истина;
	Элементы.ДеревоТаблицРеквизитыРеквизитов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТаблицПриАктивизацииЯчейки(Элемент)
	
	Элементы.РеквизитыРеквизитыРеквизитов.ВыделенныеСтроки.Очистить();
	Элементы.РеквизитыРеквизитыРеквизитов.Видимость = Ложь;
	Элементы.ДеревоТаблицРеквизитыРеквизитов.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для каждого Рекв из Реквизиты Цикл
		Рекв.Пометка = Истина;
	КонецЦикла;
	//Реквизиты.ЗаполнитьЗначения(Истина,"Пометка");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого Рекв из Реквизиты Цикл
		Рекв.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеДерево(Команда)
	
	ВыбратьВсеДеревоНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеДеревоНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоТаблиц");
	
	Для каждого Рекв из Дерево.Строки Цикл
		Рекв.Пометка = Истина;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоТаблиц");

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДерево(Команда)
	
	СнятьФлажкиДеревоНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиДеревоНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоТаблиц");
	
	Для каждого Рекв из Дерево.Строки Цикл
		Рекв.Пометка = Ложь;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоТаблиц");

КонецПроцедуры

&НаСервере
Процедура УсловноОформить()
//ДеревоЗначений ДеревоТаблиц
    //Выделяются элементы типа данных Справочник
	УсловноеОформление.Элементы.Очистить();
	ЭлементОформленияГолубой = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияГолубой.Использование = Истина;
	ЭлементОформленияГолубой.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.НебесноГолубой); //ЛососьСветлый
	
	ОформляемоеПоле      = ЭлементОформленияГолубой.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоТаблиц");
	
	
	ГруппаОтбора1 = ЭлементОформленияГолубой.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ЭлементУсловияГолубой                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияГолубой.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоТаблиц.ЕстьТаблица");
	ЭлементУсловияГолубой.ПравоеЗначение = Истина; 
	ЭлементУсловияГолубой.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловияГолубой.Использование  = Истина;
	
	ЭлементОформленияГолубой.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

//ОбязательныеРеквизиты ТаблицаРеквизты	
    //==============================================
	//@# (Начало) Курдогло Сергей [23.02.2023 12:31:42]
	ЭлементОформленияЗел = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияЗел.Использование = Истина;
	Шрифт1 = Новый Шрифт("Arial",11,Истина,Ложь,Истина,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание

	//ЭлементОформленияЗел.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.СветлоЗеленый ); //ЛососьСветлый
	ЭлементОформленияЗел.Оформление.УстановитьЗначениеПараметра("Шрифт",Шрифт1 );
	
	ОформляемоеПоле3      = ЭлементОформленияЗел.Поля.Элементы.Добавить();
	ОформляемоеПоле3.Поле = Новый ПолеКомпоновкиДанных("Реквизиты");
	
	
	ЭлементУсловияЗел                = ЭлементОформленияЗел.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияЗел.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Реквизиты.Обязательный");
	ЭлементУсловияЗел.ПравоеЗначение = Истина; 
	ЭлементУсловияЗел.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловияЗел.Использование  = Истина;
	
//ОбязательныеРеквизиты ДеревоТаблиц		
	ЭлементОформленияЗел1 = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияЗел1.Использование = Истина;
	Шрифт1 = Новый Шрифт("Arial",11,Истина,Ложь,Истина,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание

	//ЭлементОформленияЗел.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.СветлоЗеленый ); //ЛососьСветлый
	ЭлементОформленияЗел1.Оформление.УстановитьЗначениеПараметра("Шрифт",Шрифт1 );
	
	ОформляемоеПоле4      = ЭлементОформленияЗел1.Поля.Элементы.Добавить();
	ОформляемоеПоле4.Поле = Новый ПолеКомпоновкиДанных("ДеревоТаблиц");
	
	
	ЭлементУсловияЗел1                = ЭлементОформленияЗел1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияЗел1.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоТаблиц.Обязательный");
	ЭлементУсловияЗел1.ПравоеЗначение = Истина; 
	ЭлементУсловияЗел1.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловияЗел1.Использование  = Истина;

	

	//@# (Конец) Курдогло Сергей [23.02.2023 12:31:46]
	//==============================================
	
// ЕстьТаблица ТаблицаРеквизиты  
    //Выделяются элементы типа данных Справочник	
	
	ЭлементОформленияГолубой1 = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияГолубой1.Использование = Истина;
	ЭлементОформленияГолубой1.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.НебесноГолубой);
	
	ОформляемоеПоле2      = ЭлементОформленияГолубой1.Поля.Элементы.Добавить();
	ОформляемоеПоле2.Поле = Новый ПолеКомпоновкиДанных("Реквизиты");
	
	
	ЭлементУсловияГолубой1                = ЭлементОформленияГолубой1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияГолубой1.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Реквизиты.ЕстьТаблица");
	ЭлементУсловияГолубой1.ПравоеЗначение = Истина; 
	ЭлементУсловияГолубой1.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловияГолубой1.Использование  = Истина; 
	
	ЭлементОформленияГолубой1.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	
КонецПроцедуры

//@# (Конец) Курдогло Сергей [23.01.2023 12:16:19]
//==============================================
//@# (Конец) Курдогло Сергей [23.01.2023 12:16:19]
//==============================================

#КонецОбласти

#Область Загрузка


&НаКлиенте
Процедура Загрузить(Команда)
	
	МассивСообщений = Новый Массив;
	
	ФайлыДляЧтения = Новый Структура;
		
	ФСруктура 	= Новый Файл(СтруктураЗагрузка);
	   
	ФайлыДляЧтения.Вставить("Структура",Новый ДвоичныеДанные(СтруктураЗагрузка));
	ФайлыДляЧтения.Вставить("РасширениеФайлаСтруктуры", ФСруктура.Расширение);
	
	//@# (Конец) Alexandru Ciobanu [28.12.2022 17:33:00]
	//===================================================
	
	
	
	//==============================================
	//@# (Начало) Курдогло Сергей [09.02.2023 11:30:16]
	Если ЗагрузитьТранзакцией Тогда 
		
		ЗагрузитьНаСервереТранзакцией(МассивСообщений,АдресФайлаЗагрузкаВоВременноеХранилище(),Неопределено);
	Иначе
		ЗагрузитьНаСервере(МассивСообщений,АдресФайлаЗагрузкаВоВременноеХранилище());
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [09.02.2023 11:30:21]
	//==============================================
	
	ТабДокумент = ВыводВТабДокументМассивСообщенийПриЗагрузке(МассивСообщений);
	
	ТабДокумент.Показать("Сообщения");
	
КонецПроцедуры 

//==============================================
//@# (Начало) Курдогло Сергей [31.01.2023 14:53:31]
&НаКлиенте
Процедура СсылкаНаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МассивСообщений = Новый Массив;
	
	ФайлыДляЧтения = Новый Структура;
		
	ФСруктура 	= Новый Файл(СтруктураЗагрузка);
	   
	ФайлыДляЧтения.Вставить("Структура",Новый ДвоичныеДанные(СтруктураЗагрузка));
	ФайлыДляЧтения.Вставить("РасширениеФайлаСтруктуры", ФСруктура.Расширение);
	
	Если ЗагрузитьТранзакцией Тогда
		ЗагрузитьНаСервереТранзакцией(МассивСообщений,АдресФайлаЗагрузкаВоВременноеХранилище(),ВыбранноеЗначение)	
	Иначе	
		ЗагрузитьНаСервереТаблицуДокумента(МассивСообщений,АдресФайлаЗагрузкаВоВременноеХранилище(),ВыбранноеЗначение);
	КонецЕсли;
	
	ТабДокумент = ВыводВТабДокументМассивСообщенийПриЗагрузке(МассивСообщений);
	
	ТабДокумент.Показать("Сообщения");
	
КонецПроцедуры

//@# (Конец) Курдогло Сергей [31.01.2023 14:53:35]
//==============================================


&НаСервере
Функция СтрокаРеквизитыСправочника(ИмяСправочника,МассивРеквизитовВТаблице,ДляЭлемента = Истина)

	Строка = "";
	Для Каждого РеквизитСтрока Из МассивРеквизитовВТаблице Цикл
				
		РеквизитСпр = Метаданные.Справочники[НаименованиеЗагрузка].Реквизиты.Найти(РеквизитСтрока);
		Если РеквизитСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Использование = "" + РеквизитСпр.Использование;
		
		Если ДляЭлемента Тогда
			Если Использование =  "ДляЭлемента" Или Использование =  "ДляГруппыИЭлемента"  Тогда
				Строка = Строка + РеквизитСпр.Имя +",";
			КонецЕсли;
		Иначе
			Если Использование =  "ДляГруппы" Или Использование =  "ДляГруппыИЭлемента"  Тогда
				Строка = Строка + РеквизитСпр.Имя +",";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//==============================================
	//@# (Начало) Курдогло Сергей [08.09.2023 14:31:47] TFS
	МассивСтандартных = новый массив;
	МассивСтандартных.Добавить("Код");
	МассивСтандартных.Добавить("Наименование");
	МассивСтандартных.Добавить("Владелец");
	МассивСтандартных.Добавить("ПометкаУдаления");
	//@# (Конец) Курдогло Сергей [08.09.2023 14:31:49]
	//==============================================
	Для Каждого РеквизитСпр Из Метаданные.Справочники[НаименованиеЗагрузка].СтандартныеРеквизиты Цикл
		
		//==============================================
		//@# (Начало) Курдогло Сергей [08.09.2023 14:34:13] TFS
		//Если РеквизитСпр.Имя <> "Код" И РеквизитСпр.Имя <> "Наименование" И РеквизитСпр.Имя <> "Владелец" Тогда
		Если МассивСтандартных.Найти(РеквизитСпр.Имя) = Неопределено тогда
		//@# (Конец) Курдогло Сергей [08.09.2023 14:34:16]
		//==============================================
			Продолжить;	
		КонецЕсли;
		
		Если МассивРеквизитовВТаблице.Найти(РеквизитСпр.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
	    Строка = Строка + РеквизитСпр.Имя +",";
			
	КонецЦикла;
	
		
	Возврат Строка;
	
КонецФункции

&НаСервере
Функция РодительПоПравилам(СтрокаТз,КолонкиТЗ)
	
	Если КолонкиТЗ.Найти("Родитель") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаТз["Родитель"]) Тогда
		Возврат Справочники[НаименованиеЗагрузка].ПустаяСсылка();
	КонецЕсли;

	Если ТипЗнч(СтрокаТз["Родитель"]) = Тип("СправочникСсылка."+НаименованиеЗагрузка) Тогда
		Возврат СтрокаТз["Родитель"];
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТз["Родитель"]) = Тип("Строка") Тогда
		Если НаименованиеЗагрузка = "Контрагенты" Тогда
			РодительПоНаименованию = СсылкаНаЭлементСправочникаПоНаименованию(НаименованиеЗагрузка,СтрокаТз["Родитель"]);
			Если ЗначениеЗаполнено(РодительПоНаименованию) Тогда
				Возврат РодительПоНаименованию;
			Иначе
				Возврат СтрокаТз["Родитель"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники[НаименованиеЗагрузка].ПустаяСсылка();
	
КонецФункции
//==============================================
//@# (Начало) Курдогло Сергей [31.01.2023 14:57:31]
&НаСервере
Функция СтрокаРеквизитыПВХ(ИмяПВХ,МассивРеквизитовВТаблице,ДляЭлемента = Истина)

	Строка = "";
	Для Каждого РеквизитСтрока Из МассивРеквизитовВТаблице Цикл
				
		РеквизитСпр = Метаданные.ПланыВидовХарактеристик[НаименованиеЗагрузка].Реквизиты.Найти(РеквизитСтрока);
		Если РеквизитСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Использование = "" + РеквизитСпр.Использование;
		
		Если ДляЭлемента Тогда
			Если Использование =  "ДляЭлемента" Или Использование =  "ДляГруппыИЭлемента"  Тогда
				Строка = Строка + РеквизитСпр.Имя +",";
			КонецЕсли;
		Иначе
			Если Использование =  "ДляГруппы" Или Использование =  "ДляГруппыИЭлемента"  Тогда
				Строка = Строка + РеквизитСпр.Имя +",";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитСпр Из Метаданные.ПланыВидовХарактеристик[НаименованиеЗагрузка].СтандартныеРеквизиты Цикл
		
		Если ДляЭлемента Тогда
			Если РеквизитСпр.Имя <> "Код" И РеквизитСпр.Имя <> "Наименование" И РеквизитСпр.Имя <> "Владелец"  
				и РеквизитСпр.Имя <> "ТипЗначения" Тогда
				Продолжить;	
			КонецЕсли;
		Иначе
			Если РеквизитСпр.Имя <> "Код" И РеквизитСпр.Имя <> "Наименование" И РеквизитСпр.Имя <> "Владелец"  Тогда
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		Если МассивРеквизитовВТаблице.Найти(РеквизитСпр.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
	    Строка = Строка + РеквизитСпр.Имя +",";
			
	КонецЦикла;
	
		
	Возврат Строка;
	
КонецФункции

&НаСервере
Функция РодительПВХПоПравилам(СтрокаТз,КолонкиТЗ)
	
	Если КолонкиТЗ.Найти("Родитель") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаТз["Родитель"]) Тогда
		Возврат ПланыВидовХарактеристик[НаименованиеЗагрузка].ПустаяСсылка();
	КонецЕсли;

	Если ТипЗнч(СтрокаТз["Родитель"]) = Тип("ПланВидовХарактеристикСсылка."+НаименованиеЗагрузка) Тогда
		Возврат СтрокаТз["Родитель"];
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТз["Родитель"]) = Тип("Строка") Тогда
		Если НаименованиеЗагрузка = "Контрагенты" Тогда
			РодительПоНаименованию = ПланыВидовХарактеристик[НаименованиеЗагрузка].НайтиПоНаименованию(СтрокаТз["Родитель"]);
			Если ЗначениеЗаполнено(РодительПоНаименованию) Тогда
				Возврат РодительПоНаименованию;
			Иначе
				Возврат СтрокаТз["Родитель"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланыВидовХарактеристик[НаименованиеЗагрузка].ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНаСервереТаблицуДокумента(МассивСообщений,АдресВхФайлов,СсылкаОбъект); 
	
	//МассивОбязательныхРеквизитов = МассивОбязательныхРеквизитов(АдресВхФайлов);
	
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить(); 
	
	ОбъектЗагркузки = СсылкаОбъект.ПолучитьОбъект();
	ДокТаблица = ОбъектЗагркузки[ИмяТабличнойЧасти];
	
	Если ОчиститьТЧПередЗагрузкой Тогда
		ДокТаблица.Очистить();
	Конецесли;
	
	Итт = 0;
	Для каждого Строка из  ТаблицаЗначений Цикл 
		
		Если строка.Системный_Выбран Тогда 
			
	   //ТЕПЕРЬ незаполненные реквизиты проверяются на этапе чтения файла
			
			//НезаполненныеРеквизиты = Новый Массив;
			//
			//Для каждого Реквизит ИЗ МассивОбязательныхРеквизитов Цикл
			//	Если НЕ ЗначениеЗаполнено (Строка[Реквизит.Имя_системы]) Тогда
			//		НезаполненныеРеквизиты.Добавить(Реквизит.Имя_системы);
			//	КонецЕсли;
			//КонецЦикла;	
			//
			//Если НезаполненныеРеквизиты.Количество() > 0 Тогда
			//	
			//	Для каждого Реквизит ИЗ НезаполненныеРеквизиты Цикл 
			//		МассивСообщений.Добавить("Строка " + Строка.Системный_НомерСтроки +" не создана.  Не заполнен ревизит «"+ Реквизит + "».");
			//	КонецЦикла;
			//	
			//Иначе
				НоваяСтрока = ДокТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				ИТТ = ИТТ+1;
			//КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИТТ >0 Тогда
		ОбъектЗагркузки.ОбменДанными.Загрузка = Истина;
		ОбъектЗагркузки.Записать();
		МассивСообщений.Добавить("Данные добавлены в табличную часть  " +ИмяТабличнойЧасти +" объекта " + ОбъектЗагркузки );
	Иначе
		МассивСообщений.Добавить("Нет данных для добавления в табличную часть объекта ");
	КонецЕсли;
	
		
КонецПроцедуры
//@# (Конец) Курдогло Сергей [31.01.2023 14:57:36]
//==============================================

&НаСервере
Процедура ЗагрузитьНаСервере(МассивСообщений,АдресВхФайлов)
	//==============================================
	//@# (Начало) Курдогло Сергей [09.02.2023 10:49:34]
	Если Лев(ВРег(ПолнноеИмяОбъектаЗагрузка),10) = "СПРАВОЧНИК" Тогда 
		ЗагрузитьНаСервереСправочник(МассивСообщений,АдресВхФайлов);
	ИначеЕсли Лев(ВРег(ПолнноеИмяОбъектаЗагрузка),22) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда 
		ЗагрузитьНаСервереПВХ(МассивСообщений,АдресВхФайлов);
//{{MRG[ <-> ]
	ИначеЕсли Лев(ВРег(ПолнноеИмяОбъектаЗагрузка),8) = "ДОКУМЕНТ" И НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ЗагрузитьНаСервереДокумент(МассивСообщений,АдресВхФайлов);
	ИначеЕсли Лев(ВРег(ПолнноеИмяОбъектаЗагрузка),8) = "ДОКУМЕНТ" И ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ЗагрузитьНаСервереДокументТЧ(МассивСообщений,АдресВхФайлов);		
//	//===================================================
//	//@# (Начало) Голуб Вениамин [09.02.2023 17:48:53]  
	ИначеЕсли ЭтоРегистрСведенийПоПолномуИмени(ПолнноеИмяОбъектаЗагрузка) Тогда
		ЗагрузитьНаСервереРегистрСведенийИВернутьСообщения(МассивСообщений);
	КонецЕсли;
//{{MRG[ <-> ]
//	//@# (Конец) Голуб Вениамин [09.02.2023 17:48:53]
//	//===================================================
//}}MRG[ <-> ]
	//@# (Конец) Курдогло Сергей [09.02.2023 10:49:42]
	//==============================================
								
КонецПроцедуры
//==============================================
//@# (Начало) Курдогло Сергей [09.02.2023 10:50:48] 
&НаСервере
Процедура ЗагрузитьНаСервереТранзакцией(МассивСообщений,АдресВхФайлов,СсылкаОбъект)
	
	НачатьТранзакцию();
	Попытка
		Если СсылкаОбъект <> Неопределено Тогда 
			ЗагрузитьНаСервереТаблицуДокумента(МассивСообщений,АдресВхФайлов,СсылкаОбъект);	
		Иначе
			ЗагрузитьНаСервере(МассивСообщений,АдресВхФайлов);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		МассивСообщений.Очистить();
		МассивСообщений.Добавить("Во время загрузки произошли ошибки, ни один элемент из таблицы не записан. Подробнее см. в журнале регистрации");
		
		    ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
        УровеньЖурналаРегистрации.Ошибка,
        ,
        ,
        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереСправочник(МассивСообщений,АдресВхФайлов)
		//МассивОбязательныхРеквизитов = МассивОбязательныхРеквизитов(АдресВхФайлов);
	
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	
	МассивРеквизитовВТаблице = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если Колонка.Имя = "Ссылка" Или Колонка.Имя = "Выбрать" Тогда
			Продолжить;
		КонецЕсли;
			
		МассивРеквизитовВТаблице.Добавить(Колонка.Имя);
	КонецЦикла; 
	
		РеквизитыЭлемента 	= СтрокаРеквизитыСправочника(НаименованиеЗагрузка,МассивРеквизитовВТаблице,Истина);
		РеквизитыГруппы 	= СтрокаРеквизитыСправочника(НаименованиеЗагрузка,МассивРеквизитовВТаблице,Ложь);	
		
	
	Итт = 0;
	Для каждого Элемент ИЗ ТаблицаЗначений  Цикл
		
		Ссылка = Элемент.Системный_Ссылка;
		
		Если Элемент.Системный_Выбран Тогда
			
			Родитель = ТаблицаЗначений.Колонки.Найти("Родитель");
			
			//Если элемент заполнен, то это группа
			Попытка
				Если ЗначениеЗаполнено(Элемент.ЭтоГруппа) Тогда	
					Если Элемент.ЭтоГруппа Тогда
						ЭтоГруппа = Истина;
					Иначе
						ЭтоГруппа = ложь
					КонецЕсли;
				Иначе
					ЭтоГруппа = ложь;
				КонецЕсли;
			Исключение
				ЭтоГруппа = ложь;
			КонецПопытки;
			
			//Если ЗначениеЗаполнено(Элемент.ЭтоГруппа) Тогда	
			Если ЭтоГруппа Тогда
				Если  Ссылка.Пустая() Тогда
					//==============================================
					//@# (Начало) Курдогло Сергей [08.02.2023 17:23:14]	
					НовыйЭлемент = Справочники[НаименованиеЗагрузка].СоздатьГруппу();
				Иначе
					Если ПерезаписыватьСуществующиеЭлементы Тогда
						НовыйЭлемент = Ссылка.ПолучитьОбъект();
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//@# (Конец) Курдогло Сергей [07.02.2023 9:22:25]
				//==============================================
				НовыйЭлемент.Наименование = Элемент.Наименование;
				
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент,РеквизитыГруппы);
				
				Если Родитель <> неопределено Тогда
					НовыйЭлемент.Родитель = РодительПоПравилам(Элемент,ТаблицаЗначений.Колонки);
				Конецесли;	
				
				НовыйЭлемент.Записать();
				Итт=Итт+1;
				
			Иначе
				Если  Ссылка.Пустая() Тогда
					//==============================================
					//@# (Начало) Курдогло Сергей [08.02.2023 17:24:25]
					НовыйЭлемент = Справочники[НаименованиеЗагрузка].СоздатьЭлемент();
					
				ИначеЕсли ПерезаписыватьСуществующиеЭлементы Тогда
					НовыйЭлемент = Ссылка.ПолучитьОбъект();
				Иначе
					Продолжить;
				КонецЕсли;
				//@# (Конец) Курдогло Сергей [07.02.2023 9:23:31]
				//==============================================
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент,РеквизитыЭлемента);
				
				
				Если НаименованиеЗагрузка = "БанковскиеСчета" Тогда
					НовыйЭлемент.Наименование = Элемент.Банк ;
				КонецЕсли;
				
				Если   Родитель <> неопределено Тогда
					
					//НовыйЭлемент.Родитель = РодительПоПравилам(Элемент,ТаблицаЗначений.Колонки);
					//==============================================
					//@# (Начало) Курдогло Сергей [08.02.2023 17:44:09]
					НовыйЭлемент.Родитель = РодительПоПравилам(Элемент,ТаблицаЗначений.Колонки);
					
				Конецесли;
				
				
			КонецЕсли;
			
			//==============================================
			//@# (Начало) Курдогло Сергей [06.02.2023 18:45:33] 
			
			//Данная проверка происходит вовремя чтения файла
			
			//НезаполненныеРеквизиты = Новый Массив;
			//
			//Для каждого Реквизит ИЗ МассивОбязательныхРеквизитов Цикл
			//	Если НЕ ЗначениеЗаполнено (Элемент[Реквизит.Имя_системы]) Тогда
			//		НезаполненныеРеквизиты.Добавить(Реквизит.Имя_системы);
			//	КонецЕсли;
			//КонецЦикла;	
			//
			//Если НезаполненныеРеквизиты.Количество() > 0 Тогда
			//	
			//	Для каждого Реквизит ИЗ НезаполненныеРеквизиты Цикл 
			//		Если НЕ Элемент.ЭтоГруппа = "Да" Тогда
			//			МассивСообщений.Добавить("Элемент в строке " + Элемент.Системный_НомерСтроки +" не создан.  Не заполнен ревизит «"+ Реквизит + "».");
			//		КонецЕсли;
			//	КонецЦикла;
			//	
			//Иначе
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				НовыйЭлемент.Записать();
				МассивСообщений.Добавить("Элемент " + Элемент.Системный_Ссылка +  " в строке " + Элемент.Системный_НомерСтроки +" создан.");
                Итт=Итт+1;
			//@# (Конец) Курдогло Сергей [06.02.2023 18:45:29]
			//==============================================	

				
				Если НаименованиеЗагрузка = "БанковскиеСчета" Тогда
					Если Элемент.ЯвляетсяОсновнымДляВладельца Тогда
						ОбъектВладелец =  Элемент.Владелец.ПолучитьОбъект();
						ОбъектВладелец.ОсновнойБанковскийСчет = СсылкаНаЭлементСправочникаПоРеквизиту("БанковскиеСчета","НомерСчета", Элемент.НомерСчета);; 
						ОбъектВладелец.Записать();
					КонецЕсли;
				КонецЕсли;
				
								
			//КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Итт = 0 Тогда
		МассивСообщений.Добавить("Нет элементов для загрузки");
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереПВХ(МассивСообщений,АдресВхФайлов)
	
	//МассивОбязательныхРеквизитов = МассивОбязательныхРеквизитов(АдресВхФайлов);
	
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	
	МассивРеквизитовВТаблице = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если Колонка.Имя = "Ссылка" Или Колонка.Имя = "Выбрать" Тогда
			Продолжить;
		КонецЕсли;
			
		МассивРеквизитовВТаблице.Добавить(Колонка.Имя);
	КонецЦикла; 
	
		РеквизитыЭлемента 	= СтрокаРеквизитыПВХ(НаименованиеЗагрузка,МассивРеквизитовВТаблице,Истина);
		РеквизитыГруппы 	= СтрокаРеквизитыПВХ(НаименованиеЗагрузка,МассивРеквизитовВТаблице,Ложь);              			
	
		
	
	Итт = 0;
	Для каждого Элемент ИЗ ТаблицаЗначений  Цикл
		
		Ссылка = Элемент.Системный_Ссылка;
		
		Если Элемент.Системный_Выбран Тогда
			
			Родитель = ТаблицаЗначений.Колонки.Найти("Родитель");
			
			//Если не заполнен элемент, то не это не группа
			Попытка
				Если ЗначениеЗаполнено(Элемент.ЭтоГруппа) Тогда	
					Если Элемент.ЭтоГруппа Тогда
						ЭтоГруппа = Истина;
					Иначе
						ЭтоГруппа = ложь
					КонецЕсли;
				Иначе
					ЭтоГруппа = ложь;
				КонецЕсли;
			Исключение
				ЭтоГруппа = ложь;
			КонецПопытки;

			
			//Если ЗначениеЗаполнено(Элемент.ЭтоГруппа) Тогда	
			Если ЭтоГруппа Тогда
				Если  Ссылка.Пустая() Тогда
					//==============================================
					//@# (Начало) Курдогло Сергей [08.02.2023 17:23:14]
					
					НовыйЭлемент = ПланыВидовХарактеристик[НаименованиеЗагрузка].СоздатьГруппу();
					
				Иначе
					Если ПерезаписыватьСуществующиеЭлементы Тогда
						НовыйЭлемент = Ссылка.ПолучитьОбъект();
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//@# (Конец) Курдогло Сергей [07.02.2023 9:22:25]
				//==============================================
				НовыйЭлемент.Наименование = Элемент.Наименование;
				
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент,РеквизитыГруппы);
				
				Если Родитель <> неопределено Тогда
					НовыйЭлемент.Родитель = РодительПВХПоПравилам(Элемент,ТаблицаЗначений.Колонки);
				Конецесли;	
				
				НовыйЭлемент.Записать();
				МассивСообщений.Добавить("Группа " + Элемент.Системный_Ссылка +  " в строке " + Элемент.Системный_НомерСтроки +" создан.");
				Итт=Итт+1;
			Иначе
				Если  Ссылка.Пустая() Тогда
					//==============================================
					//@# (Начало) Курдогло Сергей [08.02.2023 17:24:25]
					НовыйЭлемент = ПланыВидовХарактеристик[НаименованиеЗагрузка].СоздатьЭлемент();
					
				ИначеЕсли ПерезаписыватьСуществующиеЭлементы Тогда
					НовыйЭлемент = Ссылка.ПолучитьОбъект();
				Иначе
					Продолжить;
				КонецЕсли;
				//@# (Конец) Курдогло Сергей [07.02.2023 9:23:31]
				//==============================================
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент,РеквизитыЭлемента);
				
				
				Если НаименованиеЗагрузка = "БанковскиеСчета" Тогда
					НовыйЭлемент.Наименование = Элемент.Банк ;
				КонецЕсли;
								
				Если   Родитель <> неопределено Тогда
					
						НовыйЭлемент.Родитель = РодительПВХПоПравилам(Элемент,ТаблицаЗначений.Колонки);
					
				Конецесли;
				
				
			КонецЕсли;
			
			//==============================================
			//@# (Начало) Курдогло Сергей [06.02.2023 18:45:33] 
			
			//Данная проверка происходит вовремя чтения файла
			
			//НезаполненныеРеквизиты = Новый Массив;
			//
			//Для каждого Реквизит ИЗ МассивОбязательныхРеквизитов Цикл
			//	Если НЕ ЗначениеЗаполнено (Элемент[Реквизит.Имя_системы]) Тогда
			//		НезаполненныеРеквизиты.Добавить(Реквизит.Имя_системы);
			//	КонецЕсли;
			//КонецЦикла;	
			//
			//Если НезаполненныеРеквизиты.Количество() > 0 Тогда
			//	
			//	Для каждого Реквизит ИЗ НезаполненныеРеквизиты Цикл 
			//		Если НЕ Элемент.ЭтоГруппа = "Да" Тогда
			//			МассивСообщений.Добавить("Элемент в строке " + Элемент.Системный_НомерСтроки +" не создан.  Не заполнен ревизит «"+ Реквизит + "».");
			//		КонецЕсли;
			//	КонецЦикла;
			//	
			//Иначе
				
				НовыйЭлемент.Записать();
				МассивСообщений.Добавить("Элемент " + Элемент.Системный_Ссылка +  " в строке " + Элемент.Системный_НомерСтроки +" создан.");
                Итт=Итт+1;
			//@# (Конец) Курдогло Сергей [06.02.2023 18:45:29]
			//==============================================	
				
								
			//КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Итт = 0 Тогда
		МассивСообщений.Добавить("Нет элементов для загрузки");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереДокумент(МассивСообщений,АдресВхФайлов)
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	
	Если Элементы.ДатаПоиска.Видимость = Истина И не ЗначениеЗаполнено(ДатаПоиска) Тогда
		МассивСообщений.Добавить("Укажите Дату Поиска/Загрузки документов. Без даты документы не могут быть загружены");
		Возврат;
	КонецЕсли;

	
    Итт = 0;
	Для каждого Элемент ИЗ ТаблицаЗначений  Цикл
		
		Ссылка = Элемент.Системный_Ссылка;
		Дата = ?(ТаблицаЗначений.Колонки.Найти("Дата")<> Неопределено,Элемент.Дата,ДатаПоиска);
 
		
		Если Элемент.Системный_Выбран Тогда 
			
			Если  Ссылка.Пустая() Тогда
				
				НовыйЭлемент = Документы[НаименованиеЗагрузка].СоздатьДокумент();
				
			ИначеЕсли ПерезаписыватьСуществующиеЭлементы Тогда
				НовыйЭлемент = Ссылка.ПолучитьОбъект();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
			
			НовыйЭлемент.Дата = Дата;
			
			НовыйЭлемент.Записать();
			Итт=Итт+1;
			МассивСообщений.Добавить("Документ " + Элемент.Системный_Ссылка +  " в строке шаблона " + Элемент.Системный_НомерСтроки +" создан.");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Итт = 0 Тогда
		МассивСообщений.Добавить("Нет документов для загрузки");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереДокументТЧ(МассивСообщений,АдресВхФайлов)
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	
	Если Элементы.ДатаПоиска.Видимость = Истина И не ЗначениеЗаполнено(ДатаПоиска) Тогда
		МассивСообщений.Добавить("Укажите Дату Поиска/Загрузки документов. Без даты документы не могут быть загружены");
		Возврат;
	КонецЕсли;
	
	Имена = "";
	ИТТ =0;
	МассивФильтров = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Если ЛЕВ(Колонка.Имя,12) = "ФильтрСсылки" или Колонка.Имя = "Системный_Ссылка" Тогда	
			Итт= Итт+1;
			МассивФильтров.Добавить(Колонка.Имя);
			Если Итт =1 Тогда
				Имена = Колонка.Имя;	
			Иначе
				Имена = Имена +","+ Колонка.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
		
	ТаблицаДокументов = ТаблицаЗначений.Скопировать(,Имена);
//Находим набор фильтров(колонок) комбинация которых будет означать отдельный документ	
	ТаблицаДокументов.Свернуть(Имена);
	
	Номер = 0;
	Для каждого строка из ТаблицаДокументов Цикл
		
		Ссылка = строка.Системный_Ссылка;
		Дата = ?(ТаблицаЗначений.Колонки.Найти("ФильтрСсылки_Дата")<> Неопределено,строка.ФильтрСсылки_Дата,ДатаПоиска);
		
		Если Ссылка.Пустая() Тогда			
			НовыйДокумент = Документы[НаименованиеЗагрузка].СоздатьДокумент();
			НовыйДокумент.Дата = Дата;
		ИначеЕсли ПерезаписыватьСуществующиеЭлементы Тогда
			НовыйДокумент = Ссылка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		
			
		Если ОчиститьТЧПередЗагрузкой Тогда
			НовыйДокумент[ИмяТабличнойЧасти].Очистить();
		КонецЕсли;
		
//находим строки документа для каждой комбинации фильтров
		Отбор = Новый Структура;
		РеквизитыДокумента = Новый Массив;
		Для каждого фильтр из МассивФильтров Цикл
			Отбор.Вставить(Фильтр,строка[фильтр]);
			
			Раздел = СтрРазделить(фильтр,"_");
			Соответствие = Новый Структура;
			Соответствие.Вставить("РеквизитДок",Раздел[1]);
			Соответствие.Вставить("РеквизитСтр",фильтр);
			РеквизитыДокумента.Добавить(Соответствие);
			
		КонецЦикла;
		СтрокиДокумента = ТаблицаЗначений.НайтиСтроки(Отбор);
		
//Заполнить значения реквизитов самого документа
		Для каждого СоответствиеРекв из РеквизитыДокумента  Цикл
			Если СоответствиеРекв.РеквизитДок = "Ссылка" Тогда
				Продолжить
			КонецЕсли;
			НовыйДокумент[СоответствиеРекв.РеквизитДок] = строка[СоответствиеРекв.РеквизитСтр];
		КонецЦикла;
		
		
		Н=0;
		Для каждого Подстрока из СтрокиДокумента Цикл
//заполнить строки ТЧ	
			Если Подстрока.Системный_Выбран Тогда
				НоваяСтрока = НовыйДокумент[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Подстрока);
				Н=н+1;
			КонецЕсли;
		КонецЦикла;
		
		Если Н>0 Тогда 
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			НовыйДокумент.Записать();
			Номер = Номер+1;
			МассивСообщений.Добавить("Документ " + строка.Системный_Ссылка +  " для строки шаблона " + СтрокиДокумента[0].Системный_НомерСтроки +" создан.");
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если Номер = 0 Тогда
		МассивСообщений.Добавить("Нет документов для загрузки");
	КонецЕсли;
	
КонецПроцедуры
// //@# (Конец) Курдогло Сергей [09.02.2023 11:29:34]
 //==============================================
&НаКлиенте
Процедура СтруктураВыгрузкаНачалоВыбора (Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выбрать файл структуры...";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		СтруктураВыгрузка = ДиалогВыбораФайла.ПолноеИмяФайла;
	Иначе
		СтруктураВыгрузка = ""
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураВыгрузка) Тогда
		ПрочитатьДанныеПоШаблонуНаКлиенте(Элементы.ПрочитатьДанныеПоШаблонуВыгрузка);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выбрать файл из которого необходимо загрузить данные...";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АдресФайлаЗагрузкаВоВременноеХранилище()
	ФайлыДляЧтения = Новый Структура;
	ФСруктура 	= Новый Файл(СтруктураЗагрузка);
	ФДанные 	= Новый Файл(ФайлЗагрузки);
   
	ФайлыДляЧтения.Вставить("ФайлШаблон",Новый ДвоичныеДанные(СтруктураЗагрузка));
	ФайлыДляЧтения.Вставить("РасширениеФайлаШаблон", ФСруктура.Расширение);
		
	Возврат ПоместитьВоВременноеХранилище(ФайлыДляЧтения);
	
КонецФункции



&НаСервере
Функция РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки(АдресВХФайла)
	Результат = Новый Структура;
	
	МассивКолонокСТипомПоФайлу 					= Новый Массив;
	МассивКолонокСТипомЛоклизованВМетаданные 	= Новый Массив;
	МассивПроверяемыхРеквизитовПоШаблону 		= Новый Массив;
	МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону 	= Новый Массив;
	МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета 		= Новый Массив;
	МассивКритическихОшибок				 		= Новый Массив;
	
	Результат.Вставить("Объект",Неопределено);
	Результат.Вставить("МассивКолонокСТипомПоФайлу",МассивКолонокСТипомПоФайлу);
	Результат.Вставить("МассивКолонокСТипомЛоклизованВМетаданные",МассивКолонокСТипомЛоклизованВМетаданные);
	Результат.Вставить("МассивПроверяемыхРеквизитовПоШаблону",МассивПроверяемыхРеквизитовПоШаблону);
	Результат.Вставить("ТаблицаЗначенийРезультат",Неопределено);
	Результат.Вставить("МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону",МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону);
	Результат.Вставить("МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета",МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета);
	Результат.Вставить("МассивКритическихОшибок",МассивКритическихОшибок);
	
	ТабДокЗагрузки = ТабличныйДокументИзШаблона(АдресВХФайла);
	
	Имя = СокрЛП(ТабДокЗагрузки.Область("R1C1").Текст); 
	ПеремПолнноеИмяОбъекта = Имя;
	
	ОпределитьОбъектЗагрузкиМетаданных(ПеремПолнноеИмяОбъекта,Результат);
	
	//==============================================
	//@# (Начало) Курдогло Сергей [02.02.2023 9:34:58]
	ОбъектМета = Метаданные.НайтиПоПолномуИмени(ПолнноеИмяОбъектаЗагрузка);
	Если не ОбъектМета = Неопределено Тогда 
		МассивРеквизитовМета            = Новый Массив;
		МассивПроверяемыхРеквизитовМета = Новый Массив;
		Для каждого реквизит из ОбъектМета.Реквизиты Цикл
			Если реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				МассивПроверяемыхРеквизитовМета.Добавить(Реквизит.Имя)
			КонецЕсли;
			МассивРеквизитовМета.Добавить(Реквизит.Имя)
		КонецЦикла;
		Для каждого реквизит из ОбъектМета.СтандартныеРеквизиты Цикл
			Если реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				МассивПроверяемыхРеквизитовМета.Добавить(Реквизит.Имя)
			КонецЕсли;
			МассивРеквизитовМета.Добавить(Реквизит.Имя)
		КонецЦикла;
//		//===================================================
//		//@# (Начало) Голуб Вениамин [09.02.2023 15:54:13]  
		Если ЭтоРегистрСведенийПоПолномуИмени(ПолнноеИмяОбъектаЗагрузка) Тогда
			ДополнитьМассивыРеквизитовМетаПоРегиструСведений(МассивРеквизитовМета, МассивПроверяемыхРеквизитовМета, ОбъектМета);			
		КонецЕсли;
//		//@# (Конец) Голуб Вениамин [09.02.2023 15:54:13]
//		//===================================================
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [02.02.2023 9:35:03]
	//==============================================

	Если МассивКритическихОшибок.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("Объект",ПеремПолнноеИмяОбъекта);
	
	ВсегоКолонок 	= ТабДокЗагрузки.ШиринаТаблицы;
	
	
	// ЭТО ОСНОВНЫЕ ИНДИКАТОРЫ ПАРСИНГА (СТРУКТУРА ОБГОВОРЕНА НА ЭТАПЕ РАЗРАБОТКИ)
	ВысотаШапкиШаблона = ВысотаШапкиШаблона();
	СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
	// ЭТО ОСНОВНЫЕ ИНДИКАТОРЫ ПАРСИНГА (СТРУКТУРА ОБГОВОРЕНА НА ЭТАПЕ РАЗРАБОТКИ)
	
	МассивКолонокСТипомПоФайлу = Новый Массив;
	
	// 1 обход колонок для определения структуры и тип колонок
	Для НомерКолонки = 1 По ВсегоКолонок Цикл
					
		СтруктураКолонкиИзШаблона = СтруктураКолонкиШаблона(ТабДокЗагрузки,СоответствиеСтруктураКолонокиШаблона,НомерКолонки);
		МассивКолонокСТипомПоФайлу.Добавить(СтруктураКолонкиИзШаблона);
//{{MRG[ <-> ]
		МассивКолонокСТипомЛоклизованВМетаданные.Добавить(ЛокализоватьВМетаданныеТип(СтруктураКолонкиИзШаблона,ПеремПолнноеИмяОбъекта,Истина,ИмяТабличнойЧасти));
//{{MRG[ <-> ]
//		МассивКолонокСТипомЛоклизованВМетаданные.Добавить(ЛокализоватьВМетаданныеТип(СтруктураКолонкиИзШаблона,ПеремПолнноеИмяОбъекта,Истина));
		
		
		Если ОбязательноДляЗаполнения(СтруктураКолонкиИзШаблона.Обязательность) Тогда
			МассивПроверяемыхРеквизитовПоШаблону.Добавить(СтруктураКолонкиИзШаблона.Имя_системы);
		КонецЕсли; 
		
		//==============================================
		//@# (Начало) Курдогло Сергей [02.02.2023 10:08:20]
		Если МассивРеквизитовМета.Найти(СтруктураКолонкиИзШаблона.Имя_Системы) = Неопределено И
			Лев(СтруктураКолонкиИзШаблона.Имя_Системы,44) <> "ДополнительнаяКолонкаТипСостовногоРеквизита_" И
			Лев(СтруктураКолонкиИзШаблона.Имя_Системы,12) <> "ФильтрСсылки" Тогда
			МассивКритическихОшибок.Добавить("Реквизит " + СтруктураКолонкиИзШаблона.Имя_Системы + " из шаблона  не существует в данном объекте (мета)");
		КонецЕсли; 
		Если СтруктураКолонкиИзШаблона.Имя_Системы = "Дата" Тогда
		     Элементы.ДатаПоиска.Видимость = Ложь;
			 //ДатаПоиска.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять;
		КонецЕсли;
//{{MRG[ <-> ]
	КонецЦикла;	
	
	Если МассивКритическихОшибок.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [02.02.2023 10:10:48]
	//==============================================

	
	ТаблицаЗначенийРезультат = НоваяСтруктураТаблицыЗначенийПоМассивуКолонокСТипомДанным(МассивКолонокСТипомЛоклизованВМетаданные,ПеремПолнноеИмяОбъекта);
	ДополнитьТаблицуЗначенийРезультатЗагрузкиСлужебнымиКолонками(ТаблицаЗначенийРезультат,ПеремПолнноеИмяОбъекта);
	РезультатЗаполнения = ЗаполнитьТаблицуЗначенийРезультатЗагрузки(ТаблицаЗначенийРезультат,ТабДокЗагрузки, МассивКолонокСТипомЛоклизованВМетаданные,МассивКолонокСТипомПоФайлу,
	МассивПроверяемыхРеквизитовПоШаблону,СоответствиеСтруктураКолонокиШаблона,МассивПроверяемыхРеквизитовМета);
	//==============================================
	//@# (Начало) Курдогло Сергей [02.02.2023 17:59:04]
	Результат.Вставить("МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону",РезультатЗаполнения.МассивОшибокПроверкиЗаполненияПоШаблону);
	Результат.Вставить("МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета",РезультатЗаполнения.МассивОшибокПроверкиЗаполненияПоМетаданным);
    //@# (Конец) Курдогло Сергей [02.02.2023 17:59:08]
	//==============================================
	
	Результат.Вставить("ТаблицаЗначенийРезультат",ТаблицаЗначенийРезультат);
	
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТипаСсылочногоОбъекта(ПеремПолнноеИмяОбъекта)
	//==============================================
	//@# (Начало) Курдогло Сергей [25.01.2023 16:44:31]
	//ИмяТипа = СтрЗаменить(Врег(ПеремПолнноеИмяОбъекта),"СПРАВОЧНИК.","СправочникСсылка.");
	Строки = СтрРазделить(ПеремПолнноеИмяОбъекта,".");
	Если Лев(ПеремПолнноеИмяОбъекта,11) = "СПРАВОЧНИК." Тогда
		ИмяТипа = СтрЗаменить(Врег(Строки[0]+"."+Строки[1]),"СПРАВОЧНИК.","СправочникСсылка.");
	ИначеЕсли Лев(ПеремПолнноеИмяОбъекта,9) = "ДОКУМЕНТ." Тогда 
		ИмяТипа = СтрЗаменить(Врег(Строки[0]+"."+Строки[1]),"ДОКУМЕНТ.","ДокументСсылка.");
	ИначеЕсли Лев(ПеремПолнноеИмяОбъекта,23) = "ПЛАНВИДОВХАРАКТЕРИСТИК." Тогда
		ИмяТипа = СтрЗаменить(Врег(Строки[0]+"."+Строки[1]),"ПЛАНВИДОВХАРАКТЕРИСТИК.","ПланВидовХарактеристикСсылка.");		
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [25.01.2023 16:46:59]
	//==============================================
	
		Возврат Новый ОписаниеТипов(ИмяТипа);
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьТаблицуЗначенийРезультатЗагрузкиСлужебнымиКолонками(ТаблицаЗначенийРезультат,ПеремПолнноеИмяОбъекта)
	ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_НомерСтроки",Новый ОписаниеТипов("Число"),"№");
//	ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_Ссылка", ОписаниеТипаСсылочногоОбъекта(ПеремПолнноеИмяОбъекта),"Ссылка");
//	//===================================================
//	//@# (Начало) Голуб Вениамин [09.02.2023 17:34:49]  
	Если не ЭтоРегистрСведенийПоПолномуИмени(ПеремПолнноеИмяОбъекта) Тогда
		ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_Ссылка", ОписаниеТипаСсылочногоОбъекта(ПеремПолнноеИмяОбъекта),"Ссылка");
	КонецЕсли;
//	//@# (Конец) Голуб Вениамин [09.02.2023 17:34:49]
//	//===================================================
//}}MRG[ <-> ]
	ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_Выбран", Новый ОписаниеТипов("Булево"),"Выбран");
	
	//==============================================
	//@# (Начало) Курдогло Сергей [03.02.2023 10:28:06] 
	ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_ОшибкиМета", Новый ОписаниеТипов("Булево"),"ОшибкиМета");
	ТаблицаЗначенийРезультат.Колонки.Добавить("Системный_ОшибкиШаблон", Новый ОписаниеТипов("Булево"),"ОшибкиШаблон");
	//@# (Конец) Курдогло Сергей [03.02.2023 10:32:06]
	//==============================================

	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаИзТабличногоДокумента(ТабличныйДокумент,НомерСтрокиСДанными,НомерКолонки)
	
	Возврат ТабличныйДокумент.Область(АдресОбласти(НомерСтрокиСДанными,НомерКолонки)).Текст;	

КонецФункции // ПолучитьЗначениеРеквизитаИзТабличногоДокумента() 

//==============================================
//@# (Начало) Курдогло Сергей [30.01.2023 15:54:21]
&НаСервереБезКонтекста
Функция ПолучитьУточняющийТипИзТабличногоДокумента(ТабличныйДокумент,НомерСтрокиСДанными,НомерКолонки,ИмяРеквизита)
	
	Если ТабличныйДокумент.Область(АдресОбласти(4,1+НомерКолонки)).Текст = "ДополнительнаяКолонкаТипСостовногоРеквизита_"+ИмяРеквизита Тогда
		
		Возврат ТабличныйДокумент.Область(АдресОбласти(НомерСтрокиСДанными,1+НомерКолонки)).Текст;
		
	КонецЕсли;
КонецФункции
//@# (Конец) Курдогло Сергей [30.01.2023 15:54:23]
//==============================================

&НаСервереБезКонтекста
Функция ЭтоТипСтрока(ТипВВидеСтроки)
	
	ВрегТипВВидеСтрокиРус = Врег(Лев(СокрЛП(ТипВВидеСтроки),6));
	ВрегТипВВидеСтрокиРо = Врег(Лев(СокрЛП(ТипВВидеСтроки),4));

	Возврат ВрегТипВВидеСтрокиРус = "СТРОКА" или ВрегТипВВидеСтрокиРо = "RĂND";

КонецФункции // ЭтоТипСтрока()

&НаСервереБезКонтекста
Функция ЭтоТипЧисло(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),5));
	
	Возврат ВрегТипВВидеСтроки = "ЧИСЛО";

КонецФункции // ЭтоТипСтрока()

&НаСервереБезКонтекста
Функция ЭтоТипБулево(ТипВВидеСтроки)
	
	ВрегТипВВидеСтрокиРус 	= Врег(Лев(СокрЛП(ТипВВидеСтроки),6));
	ВрегТипВВидеСтрокиАнгл 	= Врег(Лев(СокрЛП(ТипВВидеСтроки),7));
	
	Возврат ВрегТипВВидеСтрокиРус = "БУЛЕВО" Или ВрегТипВВидеСтрокиАнгл = "BOOLEAN";

КонецФункции // ЭтоТипСтрока()

&НаСервереБезКонтекста
Функция ЭтоТипСправочник(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),10));
	
	Возврат ВрегТипВВидеСтроки = "СПРАВОЧНИК";

КонецФункции // ЭтоТипСтрока()  

//==============================================
//@# (Начало) Курдогло Сергей [26.01.2023 17:17:55] 
&НаСервереБезКонтекста
Функция ЭтоТипОписаниеТипов(ТипВВидеСтроки)
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),14));
	
	Возврат СтрЗаменить(ВрегТипВВидеСтроки," ","") = "ОПИСАНИЕТИПОВ";

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТипПланВидовХарактеристик(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),22));
	
	Возврат ВрегТипВВидеСтроки = "ПЛАНВИДОВХАРАКТЕРИСТИК";
  	
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоТипПланВидовРасчета (ТипВВидеСтроки)
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),16));
	
	Возврат ВрегТипВВидеСтроки = "ПЛАНВИДОВРАСЧЕТА";
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТипДокумент(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),8));
	
	Возврат ВрегТипВВидеСтроки = "ДОКУМЕНТ";

КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоТипПланСчетов(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),10));

	Возврат ВрегТипВВидеСтроки = "ПЛАНСЧЕТОВ";

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТипПеречисление(ТипВВидеСтроки)
	
	ВрегТипВВидеСтроки = Врег(Лев(СокрЛП(ТипВВидеСтроки),12));

	Возврат ВрегТипВВидеСтроки = "ПЕРЕЧИСЛЕНИЕ";

КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоТипДата(ТипВВидеСтроки)

	ВрегТипВВидеСтрокиРус = Врег(Лев(СокрЛП(ТипВВидеСтроки),4));
	ВрегТипВВидеСтрокиРум = Врег(Лев(СокрЛП(ТипВВидеСтроки),4));
	
	Возврат ВрегТипВВидеСтрокиРус = "ДАТА" или ВрегТипВВидеСтрокиРум ="DATA";
	
КонецФункции	
	
&НаСервере
Функция СсылкаНаЭлементДокументаПоНомеруИДате(НаименованиеДокумента, НомерДокумента,ДатаДокумента)
	//Части = СтрРазделить(ДатаДокумента,".");
	//
	//Если Части.Количество()>= 3 Тогда
	//	ДатаДок = Дата(Число(Части[2]),Число(Части[1]),Число(Части[0]));
	//Иначе 
	//	ДатаДок =ДатаДокумента;
	//КонецЕсли;
	
	Попытка 
		ДатаДок = СтрокаВДатуПоНастройкамЗаданыеНаФорме(ДатаДокумента);
	Исключение
		ДатаДок = ДатаДокумента;
	КонецПопытки;
	
    //ДатаДок параметр работает только если в базе указана периодичность номера документа.
	НайденнаяСсылка = Документы[НаименованиеДокумента].НайтиПоНомеру(НомерДокумента,ДатаДок);
	//Если номер документа в базе формата Число, а не Строка
	Если не ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		 НайденнаяСсылка = Документы[НаименованиеДокумента].НайтиПоНомеру(Число(НомерДокумента),ДатаДок);
    КонецЕсли;
	Возврат НайденнаяСсылка;
	
КонецФункции 

&НаСервереБезКонтекста
Функция СсылкаНаЭлементПланаСчетовПоКоду(НаименованиеПланаСчетов, КодСчета)
	
	НайденнаяСсылка = ПланыСчетов[НаименованиеПланаСчетов].НайтиПоКоду(КодСчета);
	
	Возврат НайденнаяСсылка;

КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаЭлементПланаСчетовПоНаименованию(НаименованиеПланаСчетов,ЗначениеРеквизита)
	
	НайденнаяСсылка =  ПланыСчетов[НаименованиеПланаСчетов].НайтиПоНаименованию(ЗначениеРеквизита);
	
	Возврат НайденнаяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаЭлементПланаСчетовПоРеквизиту(НаименованиеПланаСчетов, ИмяРеквизита,ЗначениеРеквизита)
	
	НайденнаяСсылка = ПланыСчетов[НаименованиеПланаСчетов].НайтиПоРеквизиту(ИмяРеквизита,ЗначениеРеквизита);
	
	Возврат НайденнаяСсылка;
	
КонецФункции


//@# (Конец) Курдогло Сергей [26.01.2023 17:18:25]
//==============================================

&НаСервереБезКонтекста
Функция СсылкаНаЭлементСправочникаПоРеквизиту(НаименованиеСправочника, ИмяРеквизита,ЗначениеРеквизита,Родитель = Неопределено,Владелец = Неопределено)
	
	НайденнаяСсылка = Справочники[НаименованиеСправочника].НайтиПоРеквизиту(ИмяРеквизита,ЗначениеРеквизита,Родитель,Владелец);
	
	Возврат НайденнаяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаЭлементСправочникаПоНаименованию(НаименованиеСправочника,ЗначениеРеквизита,Родитель = Неопределено,Владелец = Неопределено)
	
	НайденнаяСсылка =  Справочники[НаименованиеСправочника].НайтиПоНаименованию(ЗначениеРеквизита,,Родитель,Владелец);
	
	Возврат НайденнаяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаЭлементСправочникаКод(НаименованиеСправочника,ЗначениеРеквизита,Родитель = Неопределено,Владелец = Неопределено)
	
	НайденнаяСсылка =  Справочники[НаименованиеСправочника].НайтиПоКоду(ЗначениеРеквизита,,Родитель,Владелец);
	
	Возврат НайденнаяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяСправочникаИзТипЗначенияСтрока(ТипЗначенияСтрока)
	Возврат СтрЗаменить(ВРег(ТипЗначенияСтрока),"СПРАВОЧНИК.","");	
КонецФункции
	
&НаСервере
Функция СинхронизироватьРеквизитТипСправочникПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	ИмяСправочника = ИмяСправочникаИзТипЗначенияСтрока(СтруктураРеквизитаИПравила.ТипЗначенияСтрока);
	Если ЗначениеВВидеТекста = "" Тогда
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	Результат = ЗначениеВВидеТекста;
	
	// Первый приоритет
	Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Код" Тогда
			Результат = СсылкаНаЭлементСправочникаКод(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Наименование" Тогда
			Результат = СсылкаНаЭлементСправочникаПоНаименованию(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		Иначе
			Результат = СсылкаНаЭлементСправочникаПоРеквизиту(ИмяСправочника,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	
	// Второй приоритет если только по первому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Код" Тогда
			Результат = СсылкаНаЭлементСправочникаКод(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Наименование" Тогда
			Результат = СсылкаНаЭлементСправочникаПоНаименованию(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		Иначе
			Результат = СсылкаНаЭлементСправочникаПоРеквизиту(ИмяСправочника,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	// Третий приоритет если только по первому и вотрому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Код" Тогда
			Результат = СсылкаНаЭлементСправочникаКод(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Наименование" Тогда
			Результат = СсылкаНаЭлементСправочникаПоНаименованию(ИмяСправочника,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		Иначе
			Результат = СсылкаНаЭлементСправочникаПоРеквизиту(ИмяСправочника,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3,ЗначениеВВидеТекста
			,СтруктураРеквизитаИПравила.Родитель,СтруктураРеквизитаИПравила.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Результат; 
	
КонецФункции
 //==============================================
 //@# (Начало) Курдогло Сергей [26.01.2023 17:32:25] 
&НаСервере
Функция СинхронизироватьРеквизитТипПланВидовХарактеристикПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	
	ИмяОбъекта = СтрЗаменить(ВРег(СтруктураРеквизитаИПравила.ТипЗначенияСтрока),"ПЛАНВИДОВХАРАКТЕРИСТИК.","");
	Если ЗначениеВВидеТекста = "" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта].ПустаяСсылка();
	КонецЕсли;
	Результат = ЗначениеВВидеТекста;
	
	// Первый приоритет
	Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Код" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Наименование" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	
	// Второй приоритет если только по первому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Код" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Наименование" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	// Третий приоритет если только по первому и вотрому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Код" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Наименование" Тогда
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовХарактеристик[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Результат; 
	
	
КонецФункции

&НаСервере
Функция СинхронизироватьРеквизитТипПланВидовРасчетаПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	
	ИмяОбъекта = СтрЗаменить(ВРег(СтруктураРеквизитаИПравила.ТипЗначенияСтрока),"ПЛАНВИДОВРАСЧЕТА.","");
	Если ЗначениеВВидеТекста = "" Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта].ПустаяСсылка();
	КонецЕсли;
	Результат = ЗначениеВВидеТекста;
	
	// Первый приоритет
	Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Код" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Наименование" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	
	// Второй приоритет если только по первому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Код" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Наименование" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	// Третий приоритет если только по первому и вотрому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Код" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоКоду(ЗначениеВВидеТекста);
		ИначеЕсли	СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Наименование" Тогда
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоНаименованию(ЗначениеВВидеТекста);
		Иначе
			Результат = ПланыВидовРасчета[ИмяОбъекта].НайтиПоРеквизиту(СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

 
 //Подразумевается, что ЗначениеВВидеТекста будет вида "номер/дата"
&НаСервере
Функция СинхронизироватьРеквизитТипДокументПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	
	ИмяДокумента = ИмяДокументаИзТипЗначенияСтрока(СтруктураРеквизитаИПравила.ТипЗначенияСтрока);
	Если ЗначениеВВидеТекста = "" Тогда
		Возврат Документы[ИмяДокумента].ПустаяСсылка();
	КонецЕсли;
	Результат = ЗначениеВВидеТекста;
	
	Строки = СтрРазделить(ЗначениеВВидеТекста,"/");
	Если Строки.Количество()= 2 Тогда
		Номер = Строки[0];
		Дата = Строки[1];	
		
		Результат = СсылкаНаЭлементДокументаПоНомеруИДате(ИмяДокумента,Строки[0],Строки[1]);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяДокументаИзТипЗначенияСтрока(ТипЗначенияСтрока)
	Возврат СтрЗаменить(ВРег(ТипЗначенияСтрока),"ДОКУМЕНТ.","");	
КонецФункции

&НаСервере
Функция СинхронизироватьРеквизитТипПланСчетовПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	
	ИмяПланСчетов = ИмяПланСчетовИзТипЗначенияСтрока(СтруктураРеквизитаИПравила.ТипЗначенияСтрока);
	Если ЗначениеВВидеТекста = "" Тогда
		Возврат ПланыСчетов[ИмяПланСчетов].ПустаяСсылка();
	КонецЕсли;
	//Результат = ЗначениеВВидеТекста;
	
		// Первый приоритет
	Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Код" Тогда
			Результат = СсылкаНаЭлементПланаСчетовПоКоду(ИмяПланСчетов,ЗначениеВВидеТекста);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1 = "Наименование" Тогда
			Результат = СсылкаНаЭлементПланаСчетовПоНаименованию(ИмяПланСчетов,ЗначениеВВидеТекста);
		Иначе
			Результат = СсылкаНаЭлементПланаСчетовПоРеквизиту(ИмяПланСчетов,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет1,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	
	// Второй приоритет если только по первому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Код" Тогда
			Результат = СсылкаНаЭлементПланаСчетовПоКоду(ИмяПланСчетов,ЗначениеВВидеТекста);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2 = "Наименование" Тогда
			Результат =  СсылкаНаЭлементПланаСчетовПоНаименованию(ИмяПланСчетов,ЗначениеВВидеТекста);
		Иначе
			Результат = СсылкаНаЭлементПланаСчетовПоРеквизиту(ИмяПланСчетов,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет2,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;
	
	// Третий приоритет если только по первому и вотрому не заполнилось
	Если Не ЗначениеЗаполнено(Результат) И СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 <> "" Тогда
		Если СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Код" Тогда
			Результат = СсылкаНаЭлементПланаСчетовПоКоду(ИмяПланСчетов,ЗначениеВВидеТекста);
		ИначеЕсли СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3 = "Наименование" Тогда
			Результат = СсылкаНаЭлементПланаСчетовПоНаименованию(ИмяПланСчетов,ЗначениеВВидеТекста);
		Иначе
			Результат = СсылкаНаЭлементПланаСчетовПоРеквизиту(ИмяПланСчетов,СтруктураРеквизитаИПравила.РеквизитСинхронизцииПриоритет3,ЗначениеВВидеТекста);
		КонецЕсли;
	КонецЕсли;

	
	Возврат Результат;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ИмяПланСчетовИзТипЗначенияСтрока(ТипЗначенияСтрока)
	
	Возврат СтрЗаменить(ВРег(ТипЗначенияСтрока),"ПЛАНСЧЕТОВ.","");
	
КонецФункции

&НаСервере
Функция СинхронизироватьРеквизитТипПеречислениеПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила)
	
	ИмяПеречисления = СтрЗаменить(ВРег(СтруктураРеквизитаИПравила.ТипЗначенияСтрока),"ПЕРЕЧИСЛЕНИЕ.","");
	Если ЗначениеВВидеТекста = "" Тогда
		
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
		
	ИначеЕсли ИмяПеречисления <> Неопределено Тогда 
		НайденнаяСсылка = Перечисления[ИмяПеречисления][ЗначениеВВидеТекста];
		Возврат НайденнаяСсылка;
	КонецЕсли;
		
КонецФункции
 //@# (Конец) Курдогло Сергей [26.01.2023 17:32:33]
 //==============================================
 Функция ПреобразоватьВБулево(ЗначениеВВидеТекста)
	 ВрегЗнчТекст = ВРег(ЗначениеВВидеТекста);
	 Если ВрегЗнчТекст = "TRUE" ИЛИ ВрегЗнчТекст = "ИСТИНА" ИЛИ ВрегЗнчТекст = "ADEVARAT" ИЛИ ВрегЗнчТекст = "YES" ИЛИ  ВрегЗнчТекст = "ДА" ИЛИ  ВрегЗнчТекст = "DA" 
		 Тогда
		 Возврат Истина;
		 
	ИначеЕсли ВрегЗнчТекст = "FALSE" ИЛИ ВрегЗнчТекст = "ЛОЖЬ" ИЛИ ВрегЗнчТекст = "FALS" ИЛИ ВрегЗнчТекст = "NO" ИЛИ  ВрегЗнчТекст = "НЕТ" ИЛИ  ВрегЗнчТекст = "NU" 
		 Тогда
		 Возврат Ложь;
	ИначеЕсли ЧИСЛО(ВрегЗнчТекст) > 0 Тогда		 
		 Возврат Истина;
	ИначеЕсли ЧИСЛО(ВрегЗнчТекст) = 0 Тогда		 
		 Возврат Ложь;
	 Иначе
		 Возврат Булево(ЗначениеВВидеТекста);
	 КонецЕсли;
 КонецФункции
// <Преобразовывает полученое значение в виде текста в нужное значенние по правилам описаные в шаблоне . Если не удалось преобразование возвращает обратно такой же текст как получила>
//
// Параметры:
//  <ЗначениеВВидеТекста>  - <Стрка> - <Текст>
//                 
//  <СтруктураРеквизитаИПравила>  - <Структура> 
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <Произвольне значение>
//
&НаСервере
Функция СинхронизироватьРеквизитПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила,УточняющийТипСоставногоТипа,НомерСтроки)  //добавлен УточняющийТипСоставногоТипа
	
	Результат = Новый Структура;
	Результат.Вставить("МассивОшибок",Новый Массив);
	Результат.Вставить("СинхронизированноеЗначение",ЗначениеВВидеТекста);
	
	//==============================================
	//@# (Начало) Курдогло Сергей [30.01.2023 16:20:09]
	
	//Если указан УточняющийТипСоставногоТипа тогда заменяем ОписаниеТипЗначенияВВидеСтроки и ключ ТипЗначенияСтрока
	//и сразу синхронизируем без вызова этой же функции из функции (без рекурсии).
	
	//ОписаниеТипЗначенияВВидеСтроки = СтруктураРеквизитаИПравила.ТипЗначенияСтрока;
	Если УточняющийТипСоставногоТипа <> Неопределено И СтруктураРеквизитаИПравила.ЭтоСоствнойТип Тогда
		 ОписаниеТипЗначенияВВидеСтроки = УточняющийТипСоставногоТипа;
		 СтруктураРеквизитаИПравила.Вставить("ТипЗначенияСтрока",УточняющийТипСоставногоТипа);
	 Иначе
		 ОписаниеТипЗначенияВВидеСтроки = СтруктураРеквизитаИПравила.ТипЗначенияСтрока;
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [30.01.2023 16:20:11]
	//============================================== 
	
	// ВАРИАНТЫ
	Если ЭтоТипСтрока(ОписаниеТипЗначенияВВидеСтроки) Тогда
		//1.	СТРОКА
		//ничего не надо делать
	ИначеЕсли ЭтоТипЧисло(ОписаниеТипЗначенияВВидеСтроки) Тогда
		//2.	ЧИСЛО
		Если СокрЛП(ЗначениеВВидеТекста) = "" Тогда  
			Результат.СинхронизированноеЗначение = 0;
		Иначе
			Попытка
				Результат.СинхронизированноеЗначение = Число(ЗначениеВВидеТекста);
			Исключение
				Результат.МассивОшибок.Добавить(ОписаниеОшибки());
			КонецПопытки
		КонецЕсли;
	ИначеЕсли ЭтоТипБулево(ОписаниеТипЗначенияВВидеСтроки) Тогда
		//3.	БУЛЕВО
		Попытка
			Результат.СинхронизированноеЗначение = ПреобразоватьВБулево(ЗначениеВВидеТекста);
		Исключение
			Результат.МассивОшибок.Добавить(ОписаниеОшибки());
		КонецПопытки
		//==============================================
		//@# (Начало) Курдогло Сергей [30.01.2023 17:27:16]
	ИначеЕсли ЭтоТипДата(ОписаниеТипЗначенияВВидеСтроки) Тогда
		//4.	ДАТА
		Попытка
			Результат.СинхронизированноеЗначение = СтрокаВДатуПоНастройкамЗаданыеНаФорме(ЗначениеВВидеТекста);
		Исключение
			Результат.МассивОшибок.Добавить(ОписаниеОшибки());
		КонецПопытки
		//@# (Конец) Курдогло Сергей [30.01.2023 17:27:18]
		//==============================================
	Иначе
		Если СтруктураРеквизитаИПравила.ЭтоСоствнойТип = Ложь ИЛИ
			СтруктураРеквизитаИПравила.ЭтоСоствнойТип И УточняющийТипСоставногоТипа <> Неопределено Тогда
			//5.	СПРАВОЧНИК
			Если ЭтоТипСправочник(ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипСправочникПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;
			//6.ДОКУМЕНТ
			//==============================================
			//@# (Начало) Курдогло Сергей [26.01.2023 17:14:11]
			Если ЭтоТипДокумент(ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипДокументПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;
			//7.ПЛАНСЧЕТОВ
			Если ЭтоТипПланСчетов(ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипПланСчетовПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;
			//8.ПЕРЕЧИСЛЕНИЕ
			Если ЭтоТипПеречисление (ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипПеречислениеПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;
			//9.ПЛАНВИДОВХАРАКТЕРИСТИК
			Если ЭтоТипПланВидовХарактеристик (ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипПланВидовХарактеристикПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;
			//10.ОПИСАНИЕТИПОВ
			Если ЭтоТипОписаниеТипов (ОписаниеТипЗначенияВВидеСтроки) Тогда
				Результат.СинхронизированноеЗначение = Новый ОписаниеТипов(ЗначениеВВидеТекста)
			КонецЕсли;
			//11.ПЛАНВИДОВРАСЧЕТА
			Если ЭтоТипПланВидовРасчета (ОписаниеТипЗначенияВВидеСтроки) Тогда
					Результат.СинхронизированноеЗначение = СинхронизироватьРеквизитТипПланВидовРасчетаПоПравиламШаблона(ЗначениеВВидеТекста,СтруктураРеквизитаИПравила);
			КонецЕсли;

			
			Если ЗначениеЗаполнено(ЗначениеВВидеТекста) И НЕ ЗначениеЗаполнено(Результат.СинхронизированноеЗначение) Тогда
				 Результат.МассивОшибок.Добавить("Не удалось найти в базе объект "+ЗначениеВВидеТекста+" для колонки "+ СтруктураРеквизитаИПравила.Имя_Системы+". Номер строки "+НомерСтроки);
			КонецЕсли;
			//@# (Конец) Курдогло Сергей [30.01.2023 16:39:56]
			//==============================================
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	Возврат Результат;

КонецФункции // СинхронизироватьРеквизитПоПравиламШаблона()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура НайтиИЗаполнитьВладельцаСправочникаЕслиОнПодчинен(НоваяСтрокаТаблицаЗначенийРезультат,РеквизитаДляЗаполнения)
		
	Если НЕ НоваяСтрокаТаблицаЗначенийРезультат.Владелец().Колонки.Найти("Владелец") = Неопределено Тогда
		
		РеквизитаДляЗаполнения.Вставить("Владелец",НоваяСтрокаТаблицаЗначенийРезультат.Владелец);
	Иначе
		РеквизитаДляЗаполнения.Вставить("Владелец",Неопределено);
		
	КонецЕсли;

	Если ЭтоТипСправочник(РеквизитаДляЗаполнения.ТипЗначенияСтрока) Тогда
		
		ИДСправочника = СтрРазделить(РеквизитаДляЗаполнения.ТипЗначенияСтрока,".")[1];
		
		Если Метаданные.Справочники[ИДСправочника].Владельцы.Количество()> 0 Тогда
			Для каждого КолонкаСтрокиТЗ Из НоваяСтрокаТаблицаЗначенийРезультат.Владелец().Колонки Цикл
				
				Если КолонкаСтрокиТЗ.Имя = РеквизитаДляЗаполнения.Имя_Системы Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрокаТаблицаЗначенийРезультат[КолонкаСтрокиТЗ.Имя]) Тогда
					Продолжить;				
				КонецЕсли;
				
				Для каждого ТипВладельца Из Метаданные.Справочники[ИДСправочника].Владельцы Цикл
					ТипЗначения_ = ТипЗнч(НоваяСтрокаТаблицаЗначенийРезультат[КолонкаСтрокиТЗ.Имя]);
					ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения_);
					Если Не ОбъектМетаданных = Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
						Если ОбъектМетаданных = ТипВладельца Тогда
						
							РеквизитаДляЗаполнения.Вставить("Владелец",НоваяСтрокаТаблицаЗначенийРезультат[КолонкаСтрокиТЗ.Имя]);
						
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЦикла;
				
				
			КонецЦикла;
			
		
		КонецЕсли;
		
		                                           	
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьНовуюСтрокуТаблицыЗначенийРезультат(НоваяСтрокаТаблицаЗначенийРезультат,ТабДокЗагрузки,НомерСтрокиСДанными,МассивКолонокСТипомЛоклизованВМетаданные,
	МассивПроверяемыхРеквизитовМета,МассивПроверяемыхРеквизитовПоШаблону,МассивОшибокПроверкиЗаполненияПоМетаданным,МассивОшибокПроверкиЗаполненияПоШаблону)
	
	Фильтр1 = Неопределено;
	Фильтр2 = Неопределено;
	Фильтр3 = Неопределено;
	РеквизитНомер = Неопределено;
	РеквизитДата = Дата(1,1,1);
	КолонкаДата = "";
	
	Для Каждого РеквизитаДляЗаполнения Из МассивКолонокСТипомЛоклизованВМетаданные Цикл
		
		 ЗначениеРеквизитаВВидеТекста = ПолучитьЗначениеРеквизитаИзТабличногоДокумента(ТабДокЗагрузки,НомерСтрокиСДанными,РеквизитаДляЗаполнения.НомерКолонки);
		 //==============================================
		 //@# (Начало) Курдогло Сергей [30.01.2023 15:51:19]
		 УточняющийТипДляСоставногоТипа = Неопределено;
		 Если РеквизитаДляЗаполнения.ЭтоСоствнойТип Тогда
			 УточняющийТипДляСоставногоТипа = ПолучитьУточняющийТипИзТабличногоДокумента(ТабДокЗагрузки,НомерСтрокиСДанными,РеквизитаДляЗаполнения.НомерКолонки,РеквизитаДляЗаполнения.Имя_Системы);
		 КонецЕсли;
		 //@# (Конец) Курдогло Сергей [30.01.2023 15:52:18]
		 //==============================================
		 
		 Если НЕ НоваяСтрокаТаблицаЗначенийРезультат.Владелец().Колонки.Найти("Родитель") = Неопределено Тогда
			 
			 РеквизитаДляЗаполнения.Вставить("Родитель",НоваяСтрокаТаблицаЗначенийРезультат.Родитель);
		 Иначе
			 РеквизитаДляЗаполнения.Вставить("Родитель",Неопределено);
		 КонецЕсли;
		 
		 НайтиИЗаполнитьВладельцаСправочникаЕслиОнПодчинен(НоваяСтрокаТаблицаЗначенийРезультат,РеквизитаДляЗаполнения);
		 
		 
		 
		 
		 СинхронизированоеЗначение = СинхронизироватьРеквизитПоПравиламШаблона(ЗначениеРеквизитаВВидеТекста,РеквизитаДляЗаполнения,УточняющийТипДляСоставногоТипа,
		 НомерСтрокиСДанными);
		 ЛокализованноеЗначениеРеквизитаВМетаданные = СинхронизированоеЗначение.СинхронизированноеЗначение;
		 
		 НоваяСтрокаТаблицаЗначенийРезультат[РеквизитаДляЗаполнения.Имя_Системы] = ЛокализованноеЗначениеРеквизитаВМетаданные; 
		 //==============================================
		 //@# (Начало) Курдогло Сергей [02.02.2023 17:40:29] 
		 Для каждого стр из СинхронизированоеЗначение.МассивОшибок Цикл
			 МассивОшибокПроверкиЗаполненияПоШаблону.Добавить("Для строки шаблона " + НомерСтрокиСДанными + " реквизита "+ РеквизитаДляЗаполнения.Имя_Системы +" ошибка: "+ стр);
			 //НоваяСтрокаТаблицаЗначенийРезультат.Системный_ОшибкиШаблон = Истина;
		 КонецЦикла;
		 //Если имя колонки совпадает с приоритетами поиска ссылки справочника, тогда ищем ссылку по имени колонки
		 Если ЗначениеЗаполнено(ЗначениеРеквизитаВВидеТекста) Тогда 
			 Если РеквизитаДляЗаполнения.Имя_Системы = ПервыйПриоритетСсылки или  РеквизитаДляЗаполнения.Имя_Системы = ВторойПриоритетСсылки или
				 РеквизитаДляЗаполнения.Имя_Системы = ТретийПриоритетСсылки Тогда
				 
				 СтруктураРеквизитаИПравила = Новый Структура;
				 СтруктураРеквизитаИПравила.Вставить("РеквизитСинхронизцииПриоритет1",ПервыйПриоритетСсылки);
				 СтруктураРеквизитаИПравила.Вставить("РеквизитСинхронизцииПриоритет2",ВторойПриоритетСсылки);
				 СтруктураРеквизитаИПравила.Вставить("РеквизитСинхронизцииПриоритет3",ТретийПриоритетСсылки);
				 СтруктураРеквизитаИПравила.Вставить("Родитель",Неопределено);
				 СтруктураРеквизитаИПравила.Вставить("Владелец",Неопределено);
				 СтруктураРеквизитаИПравила.Вставить("ТипЗначенияСтрока", ПолнноеИмяОбъектаЗагрузка);
				 
				 
				 Если НЕ НоваяСтрокаТаблицаЗначенийРезультат.Владелец().Колонки.Найти("Родитель") = Неопределено Тогда
					    
					 СтруктураРеквизитаИПравила.Вставить("Родитель",НоваяСтрокаТаблицаЗначенийРезультат.Родитель);
					 
				 КонецЕсли;
				 
				 Если НЕ НоваяСтрокаТаблицаЗначенийРезультат.Владелец().Колонки.Найти("Владелец") = Неопределено Тогда
					 
					 СтруктураРеквизитаИПравила.Вставить("Владелец",НоваяСтрокаТаблицаЗначенийРезультат.Владелец);
					 
				 КонецЕсли;
				 
				 Если Лев(ПолнноеИмяОбъектаЗагрузка,10) = "Справочник" Тогда
					 НоваяСтрокаТаблицаЗначенийРезультат.Системный_Ссылка = СинхронизироватьРеквизитТипСправочникПоПравиламШаблона(ЗначениеРеквизитаВВидеТекста,СтруктураРеквизитаИПравила);
				 ИначеЕсли Лев(ПолнноеИмяОбъектаЗагрузка,22) = "ПланВидовХарактеристик" Тогда
					 НоваяСтрокаТаблицаЗначенийРезультат.Системный_Ссылка = СинхронизироватьРеквизитТипПланВидовХарактеристикПоПравиламШаблона(ЗначениеРеквизитаВВидеТекста,СтруктураРеквизитаИПравила);	 
				 КонецЕсли;
			 КонецЕсли;
			 //==============================================
			 //@# (Начало) Курдогло Сергей [13.02.2023 18:48:07] 
			 Если Лев(РеквизитаДляЗаполнения.Имя_Системы,13) = "ФильтрСсылки1" Тогда
				 Фильтр1 = ЛокализованноеЗначениеРеквизитаВМетаданные;
			 ИначеЕсли Лев(РеквизитаДляЗаполнения.Имя_Системы,13) = "ФильтрСсылки2" Тогда
				 Фильтр2 = ЛокализованноеЗначениеРеквизитаВМетаданные;
			 ИначеЕсли Лев(РеквизитаДляЗаполнения.Имя_Системы,13) = "ФильтрСсылки3" Тогда
				 Фильтр3 = ЛокализованноеЗначениеРеквизитаВМетаданные;
			 КонецЕсли;
			 //@# (Конец) Курдогло Сергей [13.02.2023 18:50:40]
			 //==============================================
	 
		 КонецЕсли;
	     //Вносим ошибки незаполненных обязательных реквизитов
		 Если не ЗначениеЗаполнено(НоваяСтрокаТаблицаЗначенийРезультат[РеквизитаДляЗаполнения.Имя_Системы]) Тогда
			 Если МассивПроверяемыхРеквизитовМета.Найти(РеквизитаДляЗаполнения.Имя_Системы) <>Неопределено Тогда
				  НоваяСтрокаТаблицаЗначенийРезультат.Системный_ОшибкиМета = Истина;
		          МассивОшибокПроверкиЗаполненияПоМетаданным.Добавить("Строка " + НомерСтрокиСДанными + " из шаблона не может быть загружена.  Не заполнен обязательный ревизит по правилам мета «"+ РеквизитаДляЗаполнения.Имя_Системы + "».");
			 КонецЕсли; 
			 Если МассивПроверяемыхРеквизитовПоШаблону.Найти(РеквизитаДляЗаполнения.Имя_Системы) <>Неопределено Тогда
		          МассивОшибокПроверкиЗаполненияПоШаблону.Добавить("Строка " + НомерСтрокиСДанными + " из шаблона не может быть загружена.  Не заполнен обязательный ревизит по правилам шаблона «"+ РеквизитаДляЗаполнения.Имя_Системы + "».");
				  НоваяСтрокаТаблицаЗначенийРезультат.Системный_ОшибкиШаблон = Истина;
			 КонецЕсли; 			  
		 КонецЕсли;
		 Если РеквизитаДляЗаполнения.Имя_Системы = "Номер" Тогда
			  РеквизитНомер = ЛокализованноеЗначениеРеквизитаВМетаданные;
		 КонецЕсли; 
		 Если РеквизитаДляЗаполнения.Имя_Системы = "Дата" или 
			 ЛЕВ(ВРЕГ(РеквизитаДляЗаполнения.Имя_Системы),12) = "ФИЛЬТРССЫЛКИ" И Прав(ВРЕГ(РеквизитаДляЗаполнения.Имя_Системы),4) ="ДАТА" Тогда
			 КолонкаДата = РеквизитаДляЗаполнения.Имя_Системы; 
			 РеквизитДата = ЛокализованноеЗначениеРеквизитаВМетаданные;
		 КонецЕсли;
		 //чтоб не сбивать поиск
		 Если РеквизитДата = Фильтр1 Тогда
			 Фильтр1 = Неопределено;
		 ИначеЕсли РеквизитДата = Фильтр2 Тогда
			 Фильтр2 = Неопределено;
		 ИначеЕсли РеквизитДата = Фильтр3 Тогда
			 Фильтр3 = Неопределено;
		 КонецЕсли;
        //@# (Конец) Курдогло Сергей [02.02.2023 17:58:54]
		//==============================================
	КонецЦикла;
	 
	 Если Лев(ВРЕГ(ПолнноеИмяОбъектаЗагрузка),8) = "ДОКУМЕНТ" Тогда 
		 Дата = ?(ЗначениеЗаполнено(РеквизитДата),НоваяСтрокаТаблицаЗначенийРезультат[КолонкаДата],ДатаПоиска);
		 НоваяСтрокаТаблицаЗначенийРезультат.Системный_Ссылка = ПолучитьСсылкуДокумента(Дата,
		 РеквизитНомер,Фильтр1,Фильтр2,Фильтр3,МассивОшибокПроверкиЗаполненияПоШаблону,НомерСтрокиСДанными,НоваяСтрокаТаблицаЗначенийРезультат)	  
	 КонецЕсли;
	 
	 
КонецПроцедуры 

//==============================================
//@# (Начало) Курдогло Сергей [10.02.2023 15:29:43]
Функция ПолучитьСсылкуДокумента(Дата,Номер,Фильтр1,Фильтр2,Фильтр3,МассивОшибок,НомерСтрокиСДанными,НоваяСтрока)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПоступлениеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|   И ПоступлениеТоваров.Номер = &НомерДок  
		|	И ПоступлениеТоваров.Параметр1 = &Фильтр1 
		|	И ПоступлениеТоваров.Параметр2 = &Фильтр2 
		|	И ПоступлениеТоваров.Параметр3 = &Фильтр3
		|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваров",НаименованиеЗагрузка);
	Если ЗначениеЗаполнено(Дата) Тогда
		Запрос.УстановитьПараметр("Дата", Дата);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА("+НаименованиеЗагрузка+".Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)","Истина");
//{{MRG[ <-> ]
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(ПоступлениеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)","Истина");
//}}MRG[ <-> ]
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
	    Запрос.УстановитьПараметр("НомерДок", Номер);
	Иначе

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И "+НаименованиеЗагрузка+".Номер = &НомерДок","");
//{{MRG[ <-> ]
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПоступлениеТоваров.Номер = &НомерДок","");
//}}MRG[ <-> ]
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр1) Тогда
	    Запрос.УстановитьПараметр("Фильтр1", Фильтр1);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр1",ПервыйПриоритетСсылки);
	Иначе
//{{MRG[ <-> ]
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И "+НаименованиеЗагрузка+".Параметр1 = &Фильтр1","");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПоступлениеТоваров.Параметр1 = &Фильтр1","");
//}}MRG[ <-> ]
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр2) Тогда
	    Запрос.УстановитьПараметр("Фильтр2", Фильтр2);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр2",ВторойПриоритетСсылки);
	Иначе
//{{MRG[ <-> ]
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И "+НаименованиеЗагрузка+".Параметр2 = &Фильтр2","");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПоступлениеТоваров.Параметр2 = &Фильтр2","");
//}}MRG[ <-> ]
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр3) Тогда
	    Запрос.УстановитьПараметр("Фильтр3", Фильтр3);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр3",ТретийПриоритетСсылки);
	Иначе
//{{MRG[ <-> ]
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И "+НаименованиеЗагрузка+".Параметр3 = &Фильтр3","");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПоступлениеТоваров.Параметр3 = &Фильтр3","");
//}}MRG[ <-> ]
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() >1 Тогда
		МассивОшибок.Добавить("Для строки шаблона "+ НомерСтрокиСДанными+ " Ссылок в базе больше 1, попробуйте использовать более уникальный фильтр для поиска ссылки");
		НоваяСтрока.Системный_ОшибкиМета = Истина;
	КонецЕсли;
 
КонецФункции
//@# (Конец) Курдогло Сергей [10.02.2023 15:29:56]
//==============================================

&НаСервере
Функция ЗаполнитьТаблицуЗначенийРезультатЗагрузки(ТаблицаЗначенийРезультат,ТабДокЗагрузки, МассивКолонокСТипомЛоклизованВМетаданные,МассивКолонокСТипомПоФайлу,МассивПроверяемыхРеквизитовПоШаблону,
	СоответствиеСтруктураКолонокиШаблона,МассивПроверяемыхРеквизитовМета)
	Результат = Новый Структура;
	МассивОшибокСинхронизаци 					= Новый Массив;
	МассивОшибокПроверкиЗаполненияПоМетаданным 	= Новый Массив;
	МассивОшибокПроверкиЗаполненияПоШаблону 	= Новый Массив;
	
	Результат.Вставить("МассивОшибокСинхронизаци",МассивОшибокСинхронизаци);
	Результат.Вставить("МассивОшибокПроверкиЗаполненияПоМетаданным",МассивОшибокПроверкиЗаполненияПоМетаданным);
	Результат.Вставить("МассивОшибокПроверкиЗаполненияПоШаблону",МассивОшибокПроверкиЗаполненияПоШаблону);
	
	 
	//==============================================
	//@# (Начало) Курдогло Сергей [06.02.2023 16:27:19]
	
	// заполнить приориететы поиска Ссылки справочника
	
	//Если (ЛЕВ(ПолнноеИмяОбъектаЗагрузка,10) = "Справочник" или ЛЕВ(ПолнноеИмяОбъектаЗагрузка,22) = "ПланВидовХарактеристик") 
	//	и не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ПервыйПриоритетСсылки = ПолучитьЗначениеРеквизитаИзТабличногоДокумента(ТабДокЗагрузки,2,1);
		ВторойПриоритетСсылки = ПолучитьЗначениеРеквизитаИзТабличногоДокумента(ТабДокЗагрузки,2,2);
		ТретийПриоритетСсылки = ПолучитьЗначениеРеквизитаИзТабличногоДокумента(ТабДокЗагрузки,2,3);
		
	//КонецЕсли;
	//@# (Конец) Курдогло Сергей [06.02.2023 16:29:29]
	//==============================================
	
	
	НомерСтроки = 0;
	
	ВысотаШапкиШаблона = ВысотаШапкиШаблона();
	
	ВсегоСтрок 		= ТабДокЗагрузки.ВысотаТаблицы;
	
	Для НомерСтрокиСДанными = (ВысотаШапкиШаблона +1) По ВсегоСтрок Цикл
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрокаТаблицаЗначенийРезультат = ТаблицаЗначенийРезультат.Добавить();
		ЗаполнитьНовуюСтрокуТаблицыЗначенийРезультат(НоваяСтрокаТаблицаЗначенийРезультат,ТабДокЗагрузки,НомерСтрокиСДанными,МассивКолонокСТипомЛоклизованВМетаданные,
		  МассивПроверяемыхРеквизитовМета,МассивПроверяемыхРеквизитовПоШаблону,МассивОшибокПроверкиЗаполненияПоМетаданным,МассивОшибокПроверкиЗаполненияПоШаблону);
		НоваяСтрокаТаблицаЗначенийРезультат.Системный_НомерСтроки = НомерСтроки;
	КонецЦикла;
	
	//==============================================
	//@# (Начало) Курдогло Сергей [16.02.2023 12:05:24]
	МассивПроверки = Новый Массив;
	Для каждого Стр из МассивКолонокСТипомПоФайлу Цикл
		МассивПроверки.Добавить(Стр.Имя_Системы);
	КонецЦикла;
	Для каждого РеквМета из МассивПроверяемыхРеквизитовМета Цикл 
		Реузультат = МассивПроверки.Найти(РеквМета);
		Если Реузультат = Неопределено Тогда
			  ТаблицаЗначенийРезультат.ЗаполнитьЗначения(Истина,"Системный_ОшибкиМета");
		      МассивОшибокПроверкиЗаполненияПоМетаданным.Добавить("Строки из шаблона не могут быть загружены. В шаблоне не найдена колонка с  обязательным ревизитом по правилам мета «"+ РеквМета + "».");
		КонецЕсли;
		
	КонецЦикла;
	//@# (Конец) Курдогло Сергей [16.02.2023 12:05:26]
	//==============================================
	 Возврат Результат;
	 
КонецФункции


&НаСервере
Процедура ПрочитатьДанныеИЗФайлаИЗагрузитьВТаблицуЗначений(АдресВХФайлыДляЧтения)
	
			
КонецПроцедуры

&НаСервере
Процедура ПоказатьЗаполненнуюТаблицуЗначений(НоваяТаблицаЗначений)
	Если НоваяТаблицаЗначений = Неопределено Тогда
		ДанныеТаблицыЗагрузка.Очистить();
		Возврат;
	КонецЕсли;
	
	// Удаляемые реквизиты: колонки старой таблицы значений
	РеквизитДанныеТаблицы = РеквизитФормыВЗначение("ДанныеТаблицыЗагрузка");
	УдаляемыеРеквизиты = Новый Массив();
	Для Каждого Колонка Из РеквизитДанныеТаблицы.Колонки Цикл
			УдаляемыеРеквизиты.Добавить("ДанныеТаблицыЗагрузка." + Колонка.Имя);       
	КонецЦикла;
	
	
	
	// Добавляемые реквизиты: колонки новой таблицы значений
	ДобавляемыеРеквизиты = Новый Массив();
	Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл
		
		НоваяКолонка = Новый РеквизитФормы(
		Колонка.Имя,
		Новый ОписаниеТипов(Колонка.ТипЗначения),
		"ДанныеТаблицыЗагрузка");
		ДобавляемыеРеквизиты.Добавить(НоваяКолонка);
		
	КонецЦикла;
	
	// Удаляем старые реквизиты и добавляем новые
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Присваиваем новое значение реквизиту формы
	ЗначениеВРеквизитФормы(НоваяТаблицаЗначений, "ДанныеТаблицыЗагрузка");
	
	Пока Элементы.ДанныеТаблицыЗагрузка.ПодчиненныеЭлементы.Количество()  Цикл
		Элементы.Удалить(Элементы.ДанныеТаблицыЗагрузка.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	// Выводим на форму колонки таблицы
	ЭлементТаблица = Элементы.ДанныеТаблицыЗагрузка;
	Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл
		
		НовыйЭлементФормы = Элементы.Добавить(
		"ДанныеТаблицыЗагрузка" + Колонка.Имя,
		Тип("ПолеФормы"),
		ЭлементТаблица );
		
		Если НовыйЭлементФормы.Имя = "ДанныеТаблицыЗагрузкаСистемный_Выбран" Тогда
			
			НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			Если ЭлементТаблица.ПодчиненныеЭлементы.Количество() > 1 Тогда
				Элементы.Переместить(НовыйЭлементФормы, НовыйЭлементФормы.Родитель,ЭлементТаблица.ПодчиненныеЭлементы[1]);
			Иначе
				Элементы.Переместить(НовыйЭлементФормы, НовыйЭлементФормы.Родитель,ЭлементТаблица.ПодчиненныеЭлементы[0]);
			КонецЕсли;
			НовыйЭлементФормы.Заголовок = "Выбран";
			Попытка
				НовыйЭлементФормы.КартинкаШапки = БиблиотекаКартинок.ОформлениеФлажок;
			Исключение
				
			КонецПопытки;
			
			
		Иначе
			
			НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
			
		КонецЕсли;
		
		Если НовыйЭлементФормы.Имя = "ДанныеТаблицыЗагрузкаСистемный_НомерСтроки" Тогда
			
			НовыйЭлементФормы.Заголовок = "№";
			Элементы.Переместить(НовыйЭлементФормы, НовыйЭлементФормы.Родитель,ЭлементТаблица.ПодчиненныеЭлементы[0]);
			НовыйЭлементФормы.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		Если НовыйЭлементФормы.Имя = "ДанныеТаблицыЗагрузкаСистемный_Ссылка" Тогда
			
			НовыйЭлементФормы.Заголовок = "Ссылка";
			
			Если ЭлементТаблица.ПодчиненныеЭлементы.Количество() > 1 Тогда
				Элементы.Переместить(НовыйЭлементФормы, НовыйЭлементФормы.Родитель,ЭлементТаблица.ПодчиненныеЭлементы[1]);
			Иначе
				Элементы.Переместить(НовыйЭлементФормы, НовыйЭлементФормы.Родитель,ЭлементТаблица.ПодчиненныеЭлементы[0]);
			КонецЕсли;
			
			Если ЭтоТипСправочник(ПолнноеИмяОбъектаЗагрузка) Тогда
				Попытка
					НовыйЭлементФормы.КартинкаШапки = БиблиотекаКартинок.Справочник;
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			
			
			
		КонецЕсли;
		//==============================================
		//@# (Начало) Курдогло Сергей [03.02.2023 11:03:31]
		Если НовыйЭлементФормы.Имя = "ДанныеТаблицыЗагрузкаСистемный_ОшибкиМета" Тогда
			
			НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлементФормы.Видимость = Ложь;
			
		КонецЕсли;
		Если НовыйЭлементФормы.Имя = "ДанныеТаблицыЗагрузкаСистемный_ОшибкиШаблон" Тогда
			
			НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлементФормы.Видимость = Ложь;

		КонецЕсли;		
		//@# (Конец) Курдогло Сергей [03.02.2023 11:03:41]
		//==============================================
		
		НовыйЭлементФормы.ПутьКДанным = "ДанныеТаблицыЗагрузка." + Колонка.Имя;
		
	КонецЦикла;
	
	УсловноОформитьДоступ("ПриОткрытии");
	
КонецПроцедуры 
 //==============================================
 //@# (Начало) Курдогло Сергей [03.02.2023 11:58:14]
 &НаСервере
 Процедура УсловноОформитьДоступ(ПараметрОбработки)
	 
	 Если ПараметрОбработки = "ПриОткрытии" Тогда
		 ОбработкаОшибок = "БезОшибок";
	 ИначеЕсли ПараметрОбработки = "ПриПереключении" Тогда 
		 Пока  УсловноеОформление.Элементы.Количество()> 4 Цикл
		 УсловноеОформление.Элементы.Удалить(УсловноеОформление.Элементы.Количество()-1);
		 КонецЦикла;
	 КонецЕсли;
	 
	ЭлементОформленияЛососьСветлый = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияЛососьСветлый.Использование = Истина;
	ЭлементОформленияЛососьСветлый.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.ЛососьСветлый); //НебесноГолубой
	ЭлементОформленияЛососьСветлый.Оформление.УстановитьЗначениеПараметра("Доступность",  Ложь); 

	
	ОформляемоеПоле      = ЭлементОформленияЛососьСветлый.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеТаблицыЗагрузка"); //МОЖНО попробовать потом ДанныеТаблицыЗагрузкаСистемный_Выбран
	
	
	ГруппаОтбора1 = ЭлементОформленияЛососьСветлый.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ЭлементУсловияЛососьСветлый4                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияЛососьСветлый4.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеТаблицыЗагрузка.Системный_ОшибкиШаблон");
	ЭлементУсловияЛососьСветлый4.ПравоеЗначение = Истина; 
	ЭлементУсловияЛососьСветлый4.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловияЛососьСветлый3                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементУсловияЛососьСветлый3.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеТаблицыЗагрузка.Системный_ОшибкиМета");
	ЭлементУсловияЛососьСветлый3.ПравоеЗначение = Истина; 
	ЭлементУсловияЛососьСветлый3.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;

	
	Если ОбработкаОшибок = "ОшибкиШаблонаПропускать" Тогда 
        ЭлементУсловияЛососьСветлый3.Использование  = Истина;
		ЭлементУсловияЛососьСветлый4.Использование  = Ложь;
	ИначеЕсли ОбработкаОшибок = "ВсеОшибкиПропускать" Тогда
		ЭлементУсловияЛососьСветлый3.Использование  = Ложь;
		ЭлементУсловияЛососьСветлый4.Использование  = Ложь;
	ИначеЕсли ОбработкаОшибок = "БезОшибок" Тогда
		ЭлементУсловияЛососьСветлый3.Использование  = Истина;
		ЭлементУсловияЛососьСветлый4.Использование  = Истина;
	КонецЕсли;

 
	 
 КонецПроцедуры
 //@# (Конец) Курдогло Сергей [03.02.2023 11:58:43]
 //==============================================
&НаСервере
Процедура ПрочитатьНаСервере(АдресВХФайлыДляЧтения)
	
	ПрочитатьДанныеИЗФайлаИЗагрузитьВТаблицуЗначений(АдресВХФайлыДляЧтения);
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ФормироватьСообщенияДляКлиентаРезультатЧтенияФайлаЗагрузкт(РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки)
	
	Результат = Новый Структура();
	ТабДокРез = Новый ТабличныйДокумент;
	ТабДокРез.ТолькоПросмотр = Истина;
	ТабДокРез.ОтображатьСетку = Ложь;
	ТабДокРез.ОтображатьЗаголовки = Ложь;
	Результат.Вставить("Результат","Синхронизация прошла без ошибок, данные готовы к загрузке.");
	Результат.Вставить("ТабличныйДокументРезультат",ТабДокРез);
	МассивКритическихОшибок		= РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки.МассивКритическихОшибок;
	МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета	= РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки.МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета;
	МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону	= РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки.МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ОфформлениеОшибокСинхронизаииЗагрузка");
	ТабДокРез.Вывести(Макет.ПолучитьОбласть("Шапка"));
	ОбластьКритические 			= Макет.ПолучитьОбласть("СтрокаОшибкиКритические");
	ОбластьОшибкиПравилаШаблона = Макет.ПолучитьОбласть("СтрокаОшибкиПравилаШаблона");
	ОбластьОшибкиПравилаМета 	= Макет.ПолучитьОбласть("СтрокаОшибкиПравилаМета");
	
	ВсегоОшибок = 0;
	Если МассивКритическихОшибок.Количество() Тогда
		нр = 1;                                  
		ТабДокРез.НачатьАвтогруппировкуСтрок();
		Для Каждого СообщениеОшибка Из МассивКритическихОшибок Цикл
			ОбластьКритические.Параметры.нр = нр;
			ОбластьКритические.Параметры.Сообщение = СообщениеОшибка;
			ТабДокРез.Вывести(ОбластьКритические,1,"Критические ошибки");
		
			Результат.Вставить("Результат","В процессе синхронизации произошли критичиские ошибки , загрузка данных невозможна!");
			нр = нр + 1;
		КонецЦикла;
		ТабДокРез.ЗакончитьАвтогруппировкуСтрок();
		ВсегоОшибок = ВсегоОшибок + нр;
	КонецЕсли;	
	
	Если МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета.Количество() Тогда
		нр = 1;                                  
		ТабДокРез.НачатьАвтогруппировкуСтрок();
		Для Каждого СообщениеОшибка Из МассивОшибокСинхронизацииОбъязательныхРеквизитовПоМета Цикл
			ОбластьОшибкиПравилаМета.Параметры.нр = нр;
			ОбластьОшибкиПравилаМета.Параметры.Сообщение = СообщениеОшибка;
			ТабДокРез.Вывести(ОбластьОшибкиПравилаМета,1,"Ошибки заполнения по правилам метаданных");
		
			Результат.Вставить("Результат","Есть ошибки заполнения по правилам метаданных!");
			нр = нр + 1;
		КонецЦикла;
		ТабДокРез.ЗакончитьАвтогруппировкуСтрок();
		ВсегоОшибок = ВсегоОшибок + нр;
	КонецЕсли;
	
	Если МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону.Количество() Тогда
		нр = 1;                                  
		ТабДокРез.НачатьАвтогруппировкуСтрок();
		Для Каждого СообщениеОшибка Из МассивОшибокСинхронизацииОбъязательныхРеквизитовПоШаблону Цикл
			ОбластьОшибкиПравилаШаблона.Параметры.нр = нр;
			ОбластьОшибкиПравилаШаблона.Параметры.Сообщение = СообщениеОшибка;
			ТабДокРез.Вывести(ОбластьОшибкиПравилаШаблона,1,"Ошибки заполнения по шаблону");
		
			Результат.Вставить("Результат","Есть ошибки заполнения по правилам шаблона!");
			нр = нр + 1;
		КонецЦикла;
		ТабДокРез.ЗакончитьАвтогруппировкуСтрок();
		ВсегоОшибок = ВсегоОшибок + нр;
	КонецЕсли;
	
	Если Не ВсегоОшибок Тогда
	
		ТабДокРез.Вывести(Макет.ПолучитьОбласть("СтрокаВсеОк"));
	
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции // ФормироватьСообщенияДляКлиентаРезультатЧтенияФайлаЗагрузкт()


&НаСервере
Функция ПрочитатьДанныеПоШаблонуЗагрузкаНаСервере(АдресФайлаВоВременноеХранилище)
	
	РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки = РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки(АдресФайлаВоВременноеХранилище);
	
    ТаблицаЗначенийРезультат 		= РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки.ТаблицаЗначенийРезультат;
	

	ПоказатьЗаполненнуюТаблицуЗначений(ТаблицаЗначенийРезультат);
	
	
	Возврат ФормироватьСообщенияДляКлиентаРезультатЧтенияФайлаЗагрузкт(РезультатПарсингаТабличногоДокументаФайлаШаблонаЗагрузки);
	
КонецФункции



&НаСервере
Функция ПроверкаЗаполненияОбязательныхРеквизитов()
	
	Excel = Новый COMОбъект("Excel.Application");
	Excel.WorkBooks.Open(СтруктураЗагрузка);
	
	Excel.Sheets(1).Select();  
	
	
	ВсегоКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
	ВсегоСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
	
	МассивДанныхСТипом = Новый Массив;
	
	Для Сч = 4 по ВсегоСтрок Цикл
		
		Строка = Новый Структура;
		Строка.Вставить("Имя_системы",Excel.Cells(Сч,2).Value);
		Строка.Вставить("Обязательность",Excel.Cells(Сч,5).Value);
		
		МассивДанныхСТипом.Добавить(Строка);
		
	КонецЦикла;
	
	МассивПроверяемыхРеквизитов = Новый Массив;
	Для Каждого Элемент ИЗ МассивДанныхСТипом Цикл
		Если Элемент.Обязательность = "Да" Тогда
			МассивПроверяемыхРеквизитов.Добавить(Элемент.Имя_системы);
		КонецЕсли;
	КонецЦикла;
	Excel.Quit(); 
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	МассивСообщений = Новый Массив;
	Для каждого Строка ИЗ ТаблицаЗначений Цикл 
		Если Строка.ЭтоГруппа = "Нет"  Тогда
			Для каждого колонка ИЗ ТаблицаЗначений.Колонки Цикл 
				НаименованиеКолонки = колонка.Имя;
				Индекс = МассивПроверяемыхРеквизитов.Найти(НаименованиеКолонки);
				Если Индекс <> неопределено Тогда
					Если НЕ ЗначениеЗаполнено (Строка[НаименованиеКолонки]) Тогда
						//СтруктураСообщения = Новый Структура;
						ТекстСообщения = "Поле «"+ НаименованиеКолонки +"» в строке номер " + Строка.НомерСтроки + " является обязательным для заполнения.";	
						//СтруктураСообщения.Вставить("Сообщение", ТекстСообщения);
						МассивСообщений.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Владелец = ТаблицаЗначений.Колонки.Найти("Владелец"); 
			
			Если   Владелец <> неопределено Тогда
				
				Если   ТипЗнч(Строка.Владелец) = Тип("Строка")  Тогда
					
					МассивСообщений.Добавить("Элемент в строке " + Строка.НомерСтроки +" не будет создан, т.к. владелец не существует.");
					
				Конецесли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	
	ТабДок = новый ТабличныйДокумент;
	
	Инд = 0;	
	Шрифт = Новый Шрифт ("Times New Roman",12);
	
	Для каждого Сообщение ИЗ МассивСообщений Цикл
		Инд = Инд+1;
		ТабДок.Область(Инд,1).Текст = Сообщение;
		ТабДок.Область(Инд,1).Шрифт = Шрифт;
		
	КонецЦикла;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ВернутьЗначениеПеречисленияПоСинониму(ЗначениеСинонима, ВидПеречисления) 
	
	ЭлементПеречисления = Неопределено; 
	
	Для каждого ТекЭлемент Из Метаданные.Перечисления[ВидПеречисления].ЗначенияПеречисления Цикл 
		
		Если ТекЭлемент.Синоним = ЗначениеСинонима Тогда 
			ЭлементПеречисления = Перечисления[ВидПеречисления][ТекЭлемент.Имя]; 
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ЭлементПеречисления; 
	
КонецФункции

&НаСервере
Функция СоздатьСписокЗначений()
	
	Список = Новый СписокЗначений();
	Для Каждого Спр Из Метаданные.Справочники Цикл
		Список.Добавить(Спр.имя,Спр.Представление());
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Функция ВыводВТабДокументМассивСообщенийПриЗагрузке(МассивСообщений)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Инд = 0;
	Шрифт = Новый Шрифт ("Times New Roman",12);
	Для каждого Сообщение ИЗ МассивСообщений Цикл
		Инд = Инд+1;
		ТабДок.Область(Инд,1).Текст = " " + Инд + "."+  Сообщение; 
		ТабДок.Область(Инд,1).Шрифт = Шрифт;
	КонецЦикла;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция МассивОбязательныхРеквизитов(АдресВХФайлыДляЧтения)
	РезультатПарсинга = РезультатПарсингаШапкиШаблона(ТабличныйДокументИзШаблона(АдресВХФайлыДляЧтения));
	Возврат РезультатПарсинга.МассивОбязательныхРеквизитовПоФайлу; 
	//Excel = Новый COMОбъект("Excel.Application");
	//Excel.WorkBooks.Open(Структура);
	//
	//Excel.Sheets(1).Select();  
	//
	//
	//ВсегоКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
	//ВсегоСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
	//
	//МассивДанныхСТипом = Новый Массив;
	//
	//Для Сч = 4 по ВсегоСтрок Цикл
	//	
	//	Строка = Новый Структура;
	//	Строка.Вставить("Имя_системы",Excel.Cells(Сч,2).Value);
	//	Строка.Вставить("Обязательность",Excel.Cells(Сч,5).Value);
	//	
	//	МассивДанныхСТипом.Добавить(Строка);
	//	
	//КонецЦикла;
	//
	//МассивПроверяемыхРеквизитов = Новый Массив;
	//Для Каждого Элемент ИЗ МассивДанныхСТипом Цикл
	//	Если Элемент.Обязательность = "Да" Тогда
	//		МассивПроверяемыхРеквизитов.Добавить(Элемент.Имя_системы);
	//	КонецЕсли;
	//КонецЦикла;
	//Excel.Quit(); 
	
	МассивПроверяемыхРеквизитов = Новый Массив;
	
	ДДФайлов = ПолучитьИзВременногоХранилища(АдресВХФайлыДляЧтения);
	
	
	ИмяФайлаСтруктурыНаСервере = ПолучитьИмяВременногоФайла(ДДФайлов.РасширениеФайлаСтруктуры);
	
	
	ДДФайлов.Структура.Записать(ИмяФайлаСтруктурыНаСервере);
		
	ТабДокСтруктура = Новый ТабличныйДокумент;
	ТабДокСтруктура.Прочитать(ИмяФайлаСтруктурыНаСервере);
	
	ВсегоСтрок = ТабДокСтруктура.ВысотаТаблицы;
	
	Для Сч = 4 по ВсегоСтрок Цикл
		Обязательный = ТабДокСтруктура.Область("R"+ФЧО(Сч)+"C5").Текст;
		Если Не Обязательный Тогда
			Продолжить;
		КонецЕсли;
		Строка = Новый Структура;
		Строка.Вставить("Имя_системы",ТабДокСтруктура.Область("R"+ФЧО(Сч)+"C2").Текст);
		Строка.Вставить("ТипЗначения",ТабДокСтруктура.Область("R"+ФЧО(Сч)+"C6").Текст);
		Строка.Вставить("Обязательность",ТабДокСтруктура.Область("R"+ФЧО(Сч)+"C5").Текст);
		
		МассивПроверяемыхРеквизитов.Добавить(Строка);
		
	КонецЦикла;
	

	
		
	Возврат МассивПроверяемыхРеквизитов;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПустаяДляСозданияВыполняемогоКод()
	Заропс = Новый Запрос( "ВЫБРАТЬ
	                       |	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	                       |ГДЕ
	                       |	ДокументРасчетовСКонтрагентом.Контрагент = &Контрагент
	                       |	И ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = &ДоговорКонтрагента
	                       |	И ДокументРасчетовСКонтрагентом.Дата = &Дата
	                       |	И ДокументРасчетовСКонтрагентом.Организация = &Организация");
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	СообщениеПользователю = Новый СообщениеПользователю;
	Для каждого СтрокаСДанными Из ДанныеТаблицыЗагрузка Цикл
		
		Заропс.УстановитьПараметр("Контрагент",СтрокаСДанными.Контрагент);
		Заропс.УстановитьПараметр("ДоговорКонтрагента",СтрокаСДанными.ДоговорКонтрагента);
		Заропс.УстановитьПараметр("Дата",ДатаПоиска);
		Заропс.УстановитьПараметр("Организация",ОрганизацияПоУмолчанию);
		
		ПеремДокРасчет = Неопределено;
		Выборка = Заропс.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
		
			ПеремДокРасчет = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ПеремДокРасчет = Неопределено Тогда
		
			Попытка
			
				_Д = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
				_Д.Дата = ДатаПоиска;
				_Д.Контрагент = СтрокаСДанными.Контрагент;
				_Д.ДоговорКонтрагента = СтрокаСДанными.ДоговорКонтрагента;
				_Д.Организация = ОрганизацияПоУмолчанию;
				_Д.Организация = ОрганизацияПоУмолчанию;
				_Д.СуммаДокумента = СтрокаСДанными.Сумма;  
				_Д.Комментарий		= "Ввод остатков";
				_Д.Записать(РежимЗаписиДокумента.Проведение);
				ПеремДокРасчет = _Д.Ссылка;
			Исключение
				СообщениеПользователю.Текст = СообщениеПользователю.Текст + ОписаниеОшибки() + Символы.ПС;
			КонецПопытки;
		
		КонецЕсли;
		
		Если Не ПеремДокРасчет = Неопределено Тогда
		
			СтрокаСДанными.Документ = ПеремДокРасчет;
		
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СообщениеПользователю.Текст) Тогда
	
		СообщениеПользователю.Сообщить();
	
	КонецЕсли;
	
КонецПроцедуры // ПустаяДляСоздания()


#КонецОбласти

#Область Выгрузка

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Функция АдресФайлаВыгрузкаВоВременноеХранилище()
	ФайлыДляЧтения = Новый Структура;
	
	ФСруктура 	= Новый Файл(СтруктураЗагрузка);
	
   
	ФайлыДляЧтения.Вставить("ФайлШаблон",Новый ДвоичныеДанные(СтруктураВыгрузка));
	ФайлыДляЧтения.Вставить("РасширениеФайлаШаблон", ФСруктура.Расширение);
	
	
	Возврат ПоместитьВоВременноеХранилище(ФайлыДляЧтения);
КонецФункции

&НаСервереБезКонтекста
Функция ТипЗначенияПоШаблону(ТипИзШаблона)
	ВренгТип = ВРег(СокрЛП(ТипИзШаблона));
	Если Лев(ВренгТип,6) = "СТРОКА" Тогда
		Возврат "Строка";
	ИначеЕсли Лев(ВренгТип,5) = "ЧИСЛО" Тогда
		Возврат "Число";
	КонецЕсли;
	
	Возврат ТипИзШаблона
	
КонецФункции

&НаСервереБезКонтекста
Функция ФЧО(Значение,Точность = 0)
	Если Точность = 0 Тогда 
		Возврат Формат(Значение,"ЧЦ=15; ЧРД=.; ЧГ=12");
	Иначе
		Возврат Формат(Значение,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=12");
	КонецЕсли;
КонецФункции

&НаСервере
Функция ТабличныйДокументИзШаблона(АдресВХФайла)
	
	ТабДокШаблон = Новый ТабличныйДокумент;
	
	ДДФайлов = ПолучитьИзВременногоХранилища(АдресВХФайла);
	ИмяФайлаШаблонНаСервере = ПолучитьИмяВременногоФайла(ДДФайлов.РасширениеФайлаШаблон);
	ДДФайлов.ФайлШаблон.Записать(ИмяФайлаШаблонНаСервере);
	
	ТабДокШаблон.Прочитать(ИмяФайлаШаблонНаСервере);
	
	
	ФайлНаСервере = Новый Файл(ИмяФайлаШаблонНаСервере);
	Если ФайлНаСервере.Существует() Тогда
		Попытка
			МассивФайлов = Новый Массив();
			МассивФайлов.Добавить(ИмяФайлаШаблонНаСервере);
			УдалитьФайлы(МассивФайлов);
		Исключение
		КонецПопытки
	КонецЕсли;
	
	Возврат ТабДокШаблон;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЛокализоватьВМетаданныеОбъект(ПолноеИмяОбъекта)
	Объект = Неопределено;
	ПолноеИмяОбъекта = Врег(ПолноеИмяОбъекта);
	//==============================================
	//@# (Начало) Курдогло Сергей [06.02.2023 10:17:21]
	Подстроки = СтрРазделить(ПолноеИмяОбъекта,".");
	Если Подстроки.Количество() = 4 и Подстроки[2]= "ТАБЛИЧНАЯЧАСТЬ" Тогда 
		Если Лев(ПолноеИмяОбъекта,9) = "ДОКУМЕНТ." Или Лев(ПолноеИмяОбъекта,17) = "ДОКУМЕНТССЫЛКА." Тогда
			ИмяДокумента = Подстроки[1];
			Объект = Метаданные.Документы.Найти(ИмяДокумента);
		КонецЕсли;
		Если Лев(ПолноеИмяОбъекта,11) = "СПРАВОЧНИК."  Или Лев(ПолноеИмяОбъекта,17) = "СПРАВОЧНИКССЫЛКА." Тогда
			ИмяДокумента = Подстроки[1];
			Объект = Метаданные.Справочники.Найти(ИмяДокумента);
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяОбъекта,11) = "СПРАВОЧНИК."  Или Лев(ПолноеИмяОбъекта,17) = "СПРАВОЧНИКССЫЛКА." Тогда
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта,"СПРАВОЧНИКССЫЛКА.","");
		ИмяСправочника = СтрЗаменить(ИмяСправочника,"СПРАВОЧНИК.","");
		Объект = Метаданные.Справочники.Найти(ИмяСправочника);
	ИначеЕсли Лев(ПолноеИмяОбъекта,23) = "ПЛАНВИДОВХАРАКТЕРИСТИК."  Или Лев(ПолноеИмяОбъекта,29) = "ПЛАНВИДОВХАРАКТЕРИСТИКССЫЛКА." Тогда
		ИмяОбъекта = СтрЗаменить(ПолноеИмяОбъекта,"ПЛАНВИДОВХАРАКТЕРИСТИКССЫЛКА.","");
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта,"ПЛАНВИДОВХАРАКТЕРИСТИК.","");
		Объект = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта);
//{{MRG[ <-> ]
	ИначеЕсли Лев(ПолноеИмяОбъекта,9) = "ДОКУМЕНТ."  Или Лев(ПолноеИмяОбъекта,17) = "ДОКУМЕНТССЫЛКА." Тогда
		ИмяОбъекта = СтрЗаменить(ПолноеИмяОбъекта,"ДОКУМЕНТССЫЛКА.","");
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта,"ДОКУМЕНТ.","");
		Объект = Метаданные.Документы.Найти(ИмяОбъекта);	
//	//===================================================
//	//@# (Начало) Голуб Вениамин [09.02.2023 16:18:00]  
	ИначеЕсли ЭтоРегистрСведенийПоПолномуИмени(ПолноеИмяОбъекта)  Тогда
		ИмяОбъекта = СтрЗаменить(ПолноеИмяОбъекта,"РЕГИСТРСВЕДЕНИЙ.","");
		Объект = Метаданные.РегистрыСведений.Найти(ИмяОбъекта);
//	//@# (Конец) Голуб Вениамин [09.02.2023 16:18:00]
//	//===================================================
	КонецЕсли;
	    //@# (Конец) Курдогло Сергей [25.01.2023 16:41:55]
		//==============================================
	Возврат Объект;
	
КонецФункции

&НаСервереБезКонтекста
//{{MRG[ <-> ]
Функция ТипРеквизитаОбъектаМетаданных(ОбъектМетаданных,ИмяРеквизита,_ИмяТабличнойЧасти)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Функция ТипРеквизитаОбъектаМетаданных(ОбъектМетаданных,ИмяРеквизита)
//}}MRG[ <-> ]
	
//{{MRG[ <-> ]
	//==============================================
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ЭтоРеквизит = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
//}}MRG[ <-> ]
	//@# (Начало) Курдогло Сергей [15.02.2023 12:37:20] 
	Если ЗначениеЗаполнено(_ИмяТабличнойЧасти) Тогда
		ЭтоРеквизит = ОбъектМетаданных.ТабличныеЧасти[_ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита);
	Иначе
		
		ЭтоРеквизит = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [15.02.2023 12:37:53]
	//==============================================
	Если ЭтоРеквизит <> Неопределено Тогда
		Возврат ЭтоРеквизит.Тип;
	КонецЕсли;
	
	Для Каждого ОписаниеСтандартногоРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		
		Если Врег(ОписаниеСтандартногоРеквизита.Имя) = Врег(ИмяРеквизита) Тогда
			Возврат ОписаниеСтандартногоРеквизита.Тип;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ТипРеквизитаОбъектаМетаданных()

&НаСервереБезКонтекста
//{{MRG[ <-> ]
//{{MRG[ <-> ]
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Функция ЛокализоватьВМетаданныеТип(СтруктураСТипомСтрока,ПолноеИмяОбъекта,ДобавитьИТипСтрока = Ложь)
//}}MRG[ <-> ]
Функция ЛокализоватьВМетаданныеТип(СтруктураСТипомСтрока,ПолноеИмяОбъекта,ДобавитьИТипСтрока = Ложь,_ИмяТабличнойЧасти = "")
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Функция ЛокализоватьВМетаданныеТип(СтруктураСТипомСтрока,ПолноеИмяОбъекта,ДобавитьИТипСтрока = Ложь)
//}}MRG[ <-> ]
	Результат = СтруктураСТипомСтрока;
	Результат.Вставить("ТипЗначенияСтрока",Результат.ТипЗначения);
	Результат.Вставить("ЭтоСоствнойТип",Ложь);
	
	ЛокализованныйТип = Неопределено;
	
	ЛокализованныйВМетаданныеОбъект = ЛокализоватьВМетаданныеОбъект(ПолноеИмяОбъекта);
	
	
	
	Если ЛокализованныйВМетаданныеОбъект = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипРеквизитаОбъектаМетаданных = ТипРеквизитаОбъектаМетаданных(ЛокализованныйВМетаданныеОбъект,СтруктураСТипомСтрока.Имя_системы,_ИмяТабличнойЧасти);
//	ТипРеквизитаОбъектаМетаданных = ТипРеквизитаОбъектаМетаданных(ЛокализованныйВМетаданныеОбъект,СтруктураСТипомСтрока.Имя_системы);
//	//===================================================
//	//@# (Начало) Голуб Вениамин [09.02.2023 16:59:18]
//	// Поиск поля среди измерений и ресурсов у регистра сведений
	Если ТипРеквизитаОбъектаМетаданных = Неопределено И ЭтоРегистрСведенийПоПолномуИмени(ПолноеИмяОбъекта) Тогда
		ТипРеквизитаОбъектаМетаданных = ПолучитьТипПоляРегистраСведенийОбъектаМетаданных(ЛокализованныйВМетаданныеОбъект,
			СтруктураСТипомСтрока.Имя_системы);	
	КонецЕсли;
//	//@# (Конец) Голуб Вениамин [09.02.2023 16:59:18]
//	//===================================================
//}}MRG[ <-> ]
	
	Если Не ТипРеквизитаОбъектаМетаданных = Неопределено Тогда
		Результат.Вставить("ЭтоСоствнойТип",ТипРеквизитаОбъектаМетаданных.Типы().Количество() >1);
		Если ДобавитьИТипСтрока Тогда
			Если Не ТипРеквизитаОбъектаМетаданных.СодержитТип(Тип("Строка")) Тогда
				ТипРеквизитаОбъектаМетаданных = Новый ОписаниеТипов(ТипРеквизитаОбъектаМетаданных,"Строка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("ТипЗначения",ТипРеквизитаОбъектаМетаданных);
	
	
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ОбязательноДляЗаполнения(Обязательность)
	БулевоИзТекста = ТекстВБулево(Обязательность);
	
	Если БулевоИзТекста = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат БулевоИзТекста;
КонецФункции
	
&НаСервере
Функция РезультатПарсингаШапкиШаблона(ТабДокШаблон)
	Результат = Новый Структура;
	
	МассивКолонокСТипомПоФайлу 					= Новый Массив;
	МассивКолонокСТипомЛоклизованВМетаданные 	= Новый Массив;
	МассивОбязательныхРеквизитовПоФайлу			= Новый Массив;
	СоответствиеСтруктураКолонкиПоИмениСистемы  = Новый Соответствие;
	СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
	
	Результат.Вставить("Объект",Неопределено);
	Результат.Вставить("МассивКолонокСТипомПоФайлу",МассивКолонокСТипомПоФайлу);
	Результат.Вставить("МассивКолонокСТипомЛоклизованВМетаданные",МассивКолонокСТипомЛоклизованВМетаданные);
	Результат.Вставить("МассивОбязательныхРеквизитовПоФайлу",МассивОбязательныхРеквизитовПоФайлу);
	Результат.Вставить("СоответствиеСтруктураКолонкиПоИмениСистемы",СоответствиеСтруктураКолонкиПоИмениСистемы);
	
		
	ВсегоКолонок = ТабДокШаблон.ШиринаТаблицы;
		
	ПеремПолнноеИмяОбъекта = СокрЛП(ТабДокШаблон.Область("R1C1").Текст);
	//==============================================
	//@# (Начало) Курдогло Сергей [16.03.2023 16:35:41] 
	фильтр1 = СокрЛП(ТабДокШаблон.Область("R2C1").Текст);
	фильтр2 = СокрЛП(ТабДокШаблон.Область("R2C2").Текст);
	фильтр3 = СокрЛП(ТабДокШаблон.Область("R2C3").Текст);
	Результат.Вставить("фильтр1",фильтр1);
	Результат.Вставить("фильтр2",фильтр2);
	Результат.Вставить("фильтр3",фильтр3);
	//@# (Конец) Курдогло Сергей [16.03.2023 16:37:03]
	//==============================================

	Результат.Вставить("Объект",ПеремПолнноеИмяОбъекта);
	
	
	
	Для НомерКолонки = 1 по ВсегоКолонок Цикл
				
		СтруктураКолонкиИзШаблона = СтруктураКолонкиШаблона(ТабДокШаблон,СоответствиеСтруктураКолонокиШаблона,НомерКолонки);
		МассивКолонокСТипомПоФайлу.Добавить(СтруктураКолонкиИзШаблона);
		
//{{MRG[ <-> ]
		МассивКолонокСТипомЛоклизованВМетаданные.Добавить(ЛокализоватьВМетаданныеТип(СтруктураКолонкиИзШаблона,ПеремПолнноеИмяОбъекта,,ИмяТабличнойЧасти));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		МассивКолонокСТипомЛоклизованВМетаданные.Добавить(ЛокализоватьВМетаданныеТип(СтруктураКолонкиИзШаблона,ПеремПолнноеИмяОбъекта));
//}}MRG[ <-> ]
		СоответствиеСтруктураКолонкиПоИмениСистемы.Вставить(СтруктураКолонкиИзШаблона.Имя_Системы,СтруктураКолонкиИзШаблона);
		
		Если ОбязательноДляЗаполнения(СтруктураКолонкиИзШаблона.Обязательность) Тогда
			МассивОбязательныхРеквизитовПоФайлу.Добавить(СтруктураКолонкиИзШаблона);
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // РезультатПарсингаШапкиШаблона()

&НаСервере
Функция РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки(АдресВХФайла)
		
	ТабДокШаблон = ТабличныйДокументИзШаблона(АдресВХФайла);
	
	Результат = РезультатПарсингаШапкиШаблона(ТабДокШаблон);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОпределитьОбъектВыгрузкиМетаданных(ТипОбъект)
	
	ТипОбъект = ВРег(ТипОбъект);
	
	ОбъектОпределенВМетаданные = ОпределитьОбъектМетаданныхЕслиОнСуществуетВЭтойКонфигурации(ТипОбъект);
	
	
	НаименованиеВыгрузка 			= ОбъектОпределенВМетаданные.Наименование;
	ПредставлениеОбъектаВыгрузка 	= ОбъектОпределенВМетаданные.ПредставлениеОбъекта;
	ПолнноеИмяОбъектаВыгрузка 		= ОбъектОпределенВМетаданные.ПолнноеИмяОбъекта;
	ИмяТабличнойЧасти               = ОбъектОпределенВМетаданные.ТабличнаяЧасть;

КонецПроцедуры // ОпределитьОбъектВыгрузкиМетаданных()

&НаСервере
Процедура ОпределитьОбъектЗагрузкиМетаданных(ТипОбъект,Результат)
	
	ТипОбъект = ВРег(ТипОбъект);
	
	ОбъектОпределенВМетаданные = ОпределитьОбъектМетаданныхЕслиОнСуществуетВЭтойКонфигурации(ТипОбъект);
	
	
	НаименованиеЗагрузка 			= ОбъектОпределенВМетаданные.Наименование;
	ПредставлениеОбъектаЗагрузка 	= ОбъектОпределенВМетаданные.ПредставлениеОбъекта;
	ПолнноеИмяОбъектаЗагрузка 		= ОбъектОпределенВМетаданные.ПолнноеИмяОбъекта;
	//==============================================
	//@# (Начало) Курдогло Сергей [31.01.2023 10:44:00]
	ИмяТабличнойЧасти = ОбъектОпределенВМетаданные.ТабличнаяЧасть;
	
	НастроитьПоляДляЗагрузкиТЧ();
	
	//@# (Конец) Курдогло Сергей [31.01.2023 10:45:51]
	//==============================================
	
	Если Не ЗначениеЗаполнено(ПолнноеИмяОбъектаЗагрузка) Тогда
		Результат.МассивКритическихОшибок.Добавить("Не смог определить объект загрузки <"+ТипОбъект+
		"> в метаданные.Возможно в этой конфигурации нет такого объекта или в ячейке R1C1 файла с данными заполнен не правильнй Тип.Идентификатор объекта загрузки");
	КонецЕсли;
	

КонецПроцедуры // ОпределитьОбъектВыгрузкиМетаданных()

//==============================================
//@# (Начало) Курдогло Сергей [06.02.2023 10:30:51]
&НаСервере
Процедура НастроитьПоляДляЗагрузкиТЧ()
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		//Элементы.Загрузить.Видимость = Ложь;
//		Элементы.Загрузить.Видимость = Ложь;
		Элементы.СсылкаНаДокумент.Видимость = Истина;
		Если Лев(ПолнноеИмяОбъектаЗагрузка,8) = "ДОКУМЕНТ" Тогда
			СсылкаНаДокумент = Документы[НаименованиеЗагрузка].ПустаяСсылка();
		ИначеЕсли Лев(ПолнноеИмяОбъектаЗагрузка,10) = "СПРАВОЧНИК" Тогда
			СсылкаНаДокумент = Справочники[НаименованиеЗагрузка].ПустаяСсылка();
		КонецЕсли;
		Элементы.СсылкаНаДокумент.ВыбиратьТип = Ложь;
		Элементы.СсылкаНаДокумент.КнопкаСоздания = Истина;
		Элементы.СсылкаНаДокумент.КнопкаВыбора = Истина;
		Элементы.СсылкаНаДокумент.АктивизироватьПоУмолчанию = Истина;
		Строки = СтрРазделить(ПолнноеИмяОбъектаЗагрузка,".");
		Если Строки.Количество() =4 Тогда 
			ИмяТабличнойЧасти = Строки[3];
		КонецЕсли;
		Элементы.ОчиститьТЧПередЗагрузкой.Видимость = Истина;	
	Иначе
		Элементы.СсылкаНаДокумент.Видимость = Ложь;
		Элементы.ОчиститьТЧПередЗагрузкой.Видимость = Ложь;
		Элементы.Загрузить.Видимость = Истина;
	КонецЕсли;
	
	Если Лев(ПолнноеИмяОбъектаЗагрузка,8) = "ДОКУМЕНТ" Тогда
		Элементы.ДатаПоиска.Видимость = Истина;
	Иначе 
		Элементы.ДатаПоиска.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
  //@# (Конец) Курдогло Сергей [06.02.2023 10:30:53]
  //==============================================

&НаСервереБезКонтекста
Функция ЭтоСоставнойТип(Тип)
	Возврат Тип.Типы().Количество() > 1;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоИмяДополнтельнойКолонкиСоставногоТипа(ИмяКолонки)
	Возврат Врег(Лев(ИмяКолонки,44)) = Врег("ДополнительнаяКолонкаТипСостовногоРеквизита_");
КонецФункции

&НаСервереБезКонтекста
Функция ИмяРеквизитаСоставногоТипИзИмениКолонки(ИмяКолонки)
	Возврат СтрЗаменить(Врег(ИмяКолонки),Врег("ДополнительнаяКолонкаТипСостовногоРеквизита_"),"");
КонецФункции

&НаСервере
Функция НоваяСтруктураТаблицыЗначенийПоМассивуКолонокСТипомДанным(МассивКолонокСТипомДанным,ПолноеИмяОбъекта)
	
	НоваяТаблицаЗначений = Новый ТаблицаЗначений;
	
	
	Для каждого Элемент ИЗ МассивКолонокСТипомДанным Цикл
		
		ИмяКолонки = СтрЗаменить( Элемент.Имя_системы," ","");
		
		Если ЭтоИмяДополнтельнойКолонкиСоставногоТипа(ИмяКолонки) Тогда
			НоваяТаблицаЗначений.Колонки.Добавить(ИмяКолонки ,Новый ОписаниеТипов("Строка"));
		Иначе
			НоваяТаблицаЗначений.Колонки.Добавить(ИмяКолонки,Элемент.ТипЗначения);
		КонецЕсли;
		
	КонецЦикла;
    	
	
	Возврат НоваяТаблицаЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыборкаДанных(ПолноеИмяОбъекта,МассивДанных,ИмяТЧ)
	
	ПолноеИмяОбъекта = ВРег(ПолноеИмяОбъекта);
	ИмяСправочника = "";
	ОбъектМета = "";
	Если Лев(ПолноеИмяОбъекта,11) = "СПРАВОЧНИК."  Или Лев(ПолноеИмяОбъекта,17) = "СПРАВОЧНИКССЫЛКА." Тогда
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта,"СПРАВОЧНИКССЫЛКА.","");
		ИмяСправочника = СтрЗаменить(ИмяСправочника,"СПРАВОЧНИК.","");
		//==============================================
		//@# (Начало) Курдогло Сергей [02.03.2023 10:34:27]
		ОбъектМета="Справочник."
	ИначеЕсли Лев(ПолноеИмяОбъекта,9) = "ДОКУМЕНТ."  Или Лев(ПолноеИмяОбъекта,15) = "ДОКУМЕНТССЫЛКА." Тогда
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта,"ДОКУМЕНТССЫЛКА.","");
		ИмяСправочника = СтрЗаменить(ИмяСправочника,"ДОКУМЕНТ.","");
		ОбъектМета = "Документ."
	ИначеЕсли Лев(ПолноеИмяОбъекта,23) = "ПЛАНВИДОВХАРАКТЕРИСТИК."  Тогда
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта,"ПЛАНВИДОВХАРАКТЕРИСТИК.","");
		ОбъектМета = "ПЛАНВИДОВХАРАКТЕРИСТИК."
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		Части = СтрРазделить(ПолноеИмяОбъекта,".");
		ИмяСправочника = Части[1]+ "."+Части[3]
	КонецЕсли;
	
	//@# (Конец) Курдогло Сергей [02.03.2023 10:36:12]
	//============================================== 
	Если ЗначениеЗаполнено(ИмяСправочника) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|Ссылка"; 
		
		Для каждого Реквизит ИЗ МассивДанных  Цикл
			Если ЭтоИмяДополнтельнойКолонкиСоставногоТипа(Реквизит.Имя_системы) Тогда       
				Имя_системы = ИмяРеквизитаСоставногоТипИзИмениКолонки(Реквизит.Имя_системы);
				Запрос.Текст = Запрос.Текст + ",ТИПЗНАЧЕНИЯ("+Имя_системы+")  Как " +Реквизит.Имя_системы + Символы.ПС;
				//==============================================
				//@# (Начало) Курдогло Сергей [02.03.2023 11:42:13]	
			ИначеЕсли ЛЕВ(ВРЕГ(Реквизит.Имя_системы),12) = "ФИЛЬТРССЫЛКИ" тогда
				Часть = СтрРазделить(Реквизит.Имя_системы,"_");
				Запрос.Текст = Запрос.Текст + ", Справочник." +"ссылка." + Часть[1] + " КАК " + Реквизит.Имя_системы + Символы.ПС;
				//@# (Конец) Курдогло Сергей [02.03.2023 11:42:17]
				//==============================================	
			Иначе
					Запрос.Текст = Запрос.Текст + ", " +Реквизит.Имя_системы + Символы.ПС;
			КонецЕсли;
			//Если ЭтоСоставнойТип(Реквизит.ТипЗначения) Тогда
			//	Запрос.Текст = Запрос.Текст + ",ТИПЗНАЧЕНИЯ("+Реквизит.Имя_системы+")  Как ДополнительнаяКолонкаТипСостовногоРеквизита_" +Реквизит.Имя_системы + Символы.ПС;
			//	
			//КонецЕсли;
		КонецЦикла;
			
		Запрос.Текст = Запрос.Текст + " ИЗ " +ОбъектМета + ИмяСправочника + " КАК Справочник" + ";" ;
	
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Возврат ВыборкаДетальныеЗаписи;
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанными(Знач ТаблицаДанных,МассивДанных,ПолноеИмяОбъекта)
	
	
	
	ВыборкаДетальныеЗаписи = ВыборкаДанных(ПолноеИмяОбъекта,МассивДанных,ИмяТабличнойЧасти);
	
	Если ВыборкаДетальныеЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	


КонецПроцедуры // ЗаполнитьТаблицуДанными()

#КонецОбласти






#Область ЧтениеФалаШаблонаИВыгрузка

&НаСервере
Функция ПрочитатьДанныеПоШаблонуВыгрузкаНаСервере(АдресФайлаВоВременноеХранилище)
	Сообщения = Новый Массив;
	ОбъектИМассивКолонокПоСтруктуреФайлаШаблона = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки(АдресФайлаВоВременноеХранилище);
	//МассивДанных = ОбъектИМассивКолонокПоСтруктуреФайлаШаблона.МассивКолонокСТипомПоФайлу;
	МассивДанных = ОбъектИМассивКолонокПоСтруктуреФайлаШаблона.МассивКолонокСТипомЛоклизованВМетаданные;
	ТипОбъект = ОбъектИМассивКолонокПоСтруктуреФайлаШаблона.Объект;
	
	Если ЗначениеЗаполнено(ТипОбъект) Тогда
		ОпределитьОбъектВыгрузкиМетаданных(ТипОбъект);
		Если ЗначениеЗаполнено(НаименованиеВыгрузка) Тогда
			СоздатьТаблицуПоСтруктуреИЗаполнитьСДанными(МассивДанных);
		Иначе
			Сообщения.Добавить("Не удалось определить объект матаданых <"+ТипОбъект+">! Возможно такой объект в данной конфигурации не сущетсвует.");
		КонецЕсли;
	Иначе
		Сообщения.Добавить("Не удалось определить объект выгрузки ! Возможно файл шаблона не правильно заполнен.");
	КонецЕсли;
	
	Возврат Сообщения;
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеПоШаблонуНаКлиенте(Кнопка)
	
	Если Кнопка.Имя = "ПрочитатьДанныеПоШаблонуВыгрузка" Тогда
		Если Не ЗначениеЗаполнено(СтруктураВыгрузка) Тогда
			Сообщить("Необходимо выбрать шаблон выгрузки");
			Возврат;
		КонецЕсли;
		
		РезультатЧтенияДанныеПоШаблонуНаСервере = ПрочитатьДанныеПоШаблонуВыгрузкаНаСервере(АдресФайлаВыгрузкаВоВременноеХранилище()); 
		
		Для Каждого Сообщение Из РезультатЧтенияДанныеПоШаблонуНаСервере Цикл
			Сообщить(Сообщение);
		КонецЦикла;
		
	ИначеЕсли Кнопка.Имя = "ПрочитатьДанныеПоШаблонуЗагрузка" Тогда
		Если Не ЗначениеЗаполнено(СтруктураЗагрузка) Тогда
			Сообщить("Необходимо выбрать шаблон выгрузки");
			Возврат;
		КонецЕсли;
		
		РезультатЧтенияДанныеПоШаблонуНаСервере = ПрочитатьДанныеПоШаблонуЗагрузкаНаСервере(АдресФайлаЗагрузкаВоВременноеХранилище()); 
		
		//Для Каждого Сообщение Из РезультатЧтенияДанныеПоШаблонуНаСервере Цикл
		РезультатЧтенияДанныеПоШаблонуНаСервере.ТабличныйДокументРезультат.Показать("Результат синхронизации");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = РезультатЧтенияДанныеПоШаблонуНаСервере.Результат;
		Сообщение.Сообщить();
			
		//КонецЦикла;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуПоСтруктуреИЗаполнитьСДанными(МассивДанных)
	
	НоваяТаблицаЗначений = НоваяСтруктураТаблицыЗначенийПоМассивуКолонокСТипомДанным(МассивДанных,ПолнноеИмяОбъектаВыгрузка);
	
	ЗаполнитьТаблицуДанными(НоваяТаблицаЗначений,МассивДанных,ПолнноеИмяОбъектаВыгрузка);
	
	//СоздатьТаблицуЗначенийДаннымиИзСправочникаxls(МассивДанных);
	// Удаляемые реквизиты: колонки старой таблицы значений
	РеквизитДанныеТаблицы = РеквизитФормыВЗначение("ДанныеТаблицыВыгрузка");
	УдаляемыеРеквизиты = Новый Массив();
	Для Каждого Колонка Из РеквизитДанныеТаблицы.Колонки Цикл
		УдаляемыеРеквизиты.Добавить("ДанныеТаблицыВыгрузка." + Колонка.Имя);       
	КонецЦикла;
	
	// Добавляемые реквизиты: колонки новой таблицы значений
	ДобавляемыеРеквизиты = Новый Массив();
	Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл
		НоваяКолонка = Новый РеквизитФормы(
		Колонка.Имя,
		Новый ОписаниеТипов(Колонка.ТипЗначения),
		"ДанныеТаблицыВыгрузка"
		);
		ДобавляемыеРеквизиты.Добавить(НоваяКолонка);
		
	КонецЦикла;
	
	// Удаляем старые реквизиты и добавляем новые
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Присваиваем новое значение реквизиту формы
	ЗначениеВРеквизитФормы(НоваяТаблицаЗначений, "ДанныеТаблицыВыгрузка");
	
	
	// Удаляем таблицу с формы
	ЭлементТаблица = Элементы.Найти("МояТаблицаФормы");
	Если ЭлементТаблица <> Неопределено Тогда
		Элементы.Удалить(ЭлементТаблица);       
	КонецЕсли;    
	// И добавляем ее заново
	ЭлементТаблица = Элементы.Добавить("МояТаблицаФормы", Тип("ТаблицаФормы"),Элементы.СтраницаВыгрузка);
	ЭлементТаблица.ПутьКДанным = "ДанныеТаблицыВыгрузка";
	ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
	
	// Выводим на форму колонки таблицы
	ЭлементТаблица = Элементы.МояТаблицаФормы;
	Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл
		
		НовыйЭлементФормы = Элементы.Добавить(
		"ДанныеТаблицыВыгрузка" + Колонка.Имя,
		Тип("ПолеФормы"),
		ЭлементТаблица
		);
		НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.ПутьКДанным = "ДанныеТаблицыВыгрузка." + Колонка.Имя;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СтруктураЗагрузкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выбрать файл структуры...";
	Фильтр = "Таблица(*.xls)|*.xls";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		СтруктураЗагрузка = ДиалогВыбораФайла.ПолноеИмяФайла;
		ПрочитатьДанныеПоШаблонуНаКлиенте(Элементы.ПрочитатьДанныеПоШаблонуЗагрузка);
	Иначе
		СтруктураЗагрузка = ""
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеПоШаблону(Команда)
	ПрочитатьДанныеПоШаблонуНаКлиенте(ЭтаФорма.ТекущийЭлемент);
КонецПроцедуры


&НаКлиенте
Процедура СтруктураВыгрузкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Файл = Новый Файл(СтруктураВыгрузка);
	Если Файл.Существует() Тогда
		Попытка
			ТабДокШаблон = ТабличныйДокументИзШаблона(АдресФайлаВыгрузкаВоВременноеХранилище());
			ТабДокШаблон.Показать();
		Исключение
			Сообщить(ОписаниеОшибки(),СтатусСообщения.Внимание);
		КонецПопытки;
	Иначе
		Сообщить("Файл шаблона не существует или недоступен",СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВТабДок(Команда)
	
	ТабДокумент = ДанныеТаблицыЗначенийВТабличныйДокумент(АдресФайлаВыгрузкаВоВременноеХранилище());
	ТабДокумент.Показать(СтрЗаменить(ПолнноеИмяОбъектаВыгрузка,".","_")+"_Данные");
	
КонецПроцедуры
#КонецОбласти


#Область ЧтениеИВыгрузкаТабДок


&НаСервереБезКонтекста
Функция АдресОбласти(НомерСтроки,НомерКолонки)
	Возврат "R" + ФЧО(НомерСтроки) + "C" + ФЧО(НомерКолонки);
КонецФункции

&НаСервереБезКонтекста
Функция НомерРядаСвойстваКолонкиШаблона(ИмяСвойства,СоответствиеСтруктураКолонокиШаблона)
	Возврат СоответствиеСтруктураКолонокиШаблона.Получить(ИмяСвойства);
КонецФункции

&НаСервере
Функция ДанныеТаблицыЗначенийВТабличныйДокумент(АдресФайлаВыгрузкаВоВременноеХранилище)
	РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки(АдресФайлаВыгрузкаВоВременноеХранилище);
	
	СоответствиеСтруктураКолонкиПоИмениСистемы = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки.СоответствиеСтруктураКолонкиПоИмениСистемы;
	
	СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
	
	Таблица = ДанныеТаблицыВыгрузка.Выгрузить();
	Индекс = Таблица.Колонки.Найти("Ссылка");
	Если Индекс <> неопределено Тогда
		Таблица.Колонки.Удалить(Индекс);
	КонецЕсли;
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Строим шапку
	ТабДокумент.Область("R1C1").Текст = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки.Объект;
	ОформитьЯчейкуИмяОбъектаВыгрузкиЗагрузк(ТабДокумент.Область("R1C1"));
	
	//==============================================
	//@# (Начало) Курдогло Сергей [16.03.2023 16:38:37]
	// Фильтры добавляем
	ТабДокумент.Область("R2C1").Текст = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки.фильтр1;
	ТабДокумент.Область("R2C2").Текст = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки.фильтр2;
	ТабДокумент.Область("R2C3").Текст = РезультатПарсингаТабличногоДокументаФайлаШаблонаВыгрузки.фильтр3;
	//@# (Конец) Курдогло Сергей [16.03.2023 16:39:32]
	//==============================================
	
	
	КолонкаИндекс = 0;
	Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
		Колонка = Таблица.Колонки[КолонкаИндекс];
		СвойстваКолонки 				= СоответствиеСтруктураКолонкиПоИмениСистемы.Получить(Колонка.Имя);
		
		Для Каждого КлючИЗначениеСвойстваКолонки Из СвойстваКолонки Цикл
			Если КлючИЗначениеСвойстваКолонки.Ключ = "ТипЗначения" Или КлючИЗначениеСвойстваКолонки.Ключ = "ЭтоСоствнойТип" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючИЗначениеСвойстваКолонки.Ключ = "ТипЗначенияСтрока" Тогда
				НомерРядаСвойстваКолонкиШаблона	= НомерРядаСвойстваКолонкиШаблона("ТипЗначения",СоответствиеСтруктураКолонокиШаблона);
			Иначе
				НомерРядаСвойстваКолонкиШаблона	= НомерРядаСвойстваКолонкиШаблона(КлючИЗначениеСвойстваКолонки.Ключ,СоответствиеСтруктураКолонокиШаблона);
			КонецЕсли;
			
			ОбластьКолонки = ТабДокумент.Область(АдресОбласти(НомерРядаСвойстваКолонкиШаблона,КолонкаИндекс+1));
			
			
			ОбластьКолонки.Текст = КлючИЗначениеСвойстваКолонки.Значение;
			//ОформитьЯчейкуШапкиШаблонаВыгрузкиЗагрузк(ОбластьКолонки);
			
		КонецЦикла;
		КолонкаИндекс = КолонкаИндекс + 1;
	КонецЦикла;
	ОформитьШапкуШаблонаВыгрузкиЗагрузк(ТабДокумент,Таблица.Колонки.Количество());
	// Строим шапку
	ВысотаШапкиШаблона = ВысотаШапкиШаблона();
	
	СтрокаИндекс = 0;
	Пока СтрокаИндекс < Таблица.Количество() Цикл
		Таблица_Строка = Таблица[СтрокаИндекс];
		КолонкаИндекс = 0;
		
		Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
			Колонка = Таблица.Колонки[КолонкаИндекс];
			СвойстваКолонки 				= СоответствиеСтруктураКолонкиПоИмениСистемы.Получить(Колонка.Имя);
			ЗначениеДляВыгрузки = ЗначениеДляВыгрузкиПоляПоПравиламШаблона(СвойстваКолонки,Таблица_Строка[Колонка.Имя]);
			
			//==============================================
			//@# (Начало) Курдогло Сергей [16.03.2023 17:32:38]
			Если ВРЕГ(СвойстваКолонки.ТипЗначенияСтрока) = "ДАТА" Тогда 
				ЗначениеДляВыгрузки = Формат(ЗначениеДляВыгрузки,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			//@# (Конец) Курдогло Сергей [16.03.2023 17:32:39]
			//==============================================
			ТабДокумент.Область(СтрокаИндекс + ВысотаШапкиШаблона+1, КолонкаИндекс + 1, СтрокаИндекс + ВысотаШапкиШаблона+1, КолонкаИндекс + 1).Текст = ЗначениеДляВыгрузки;
			
			КолонкаИндекс = КолонкаИндекс + 1;
		КонецЦикла;        
		СтрокаИндекс = СтрокаИндекс + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ЗначениеДляВыгрузкиПоляПоПравиламШаблона(СвойстваКолонки,ЗначениеПоля)
	//1 Реквизит.
	Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
		Возврат ЗначениеПоля;
	КонецЕсли;
	Если ЭтоТипПеречисление(СвойстваКолонки.ТипЗначенияСтрока) Тогда
		
		Индекс = Перечисления[ЗначениеПоля.Метаданные().Имя].Индекс(ЗначениеПоля);
		
		
		Возврат ЗначениеПоля.Метаданные().ЗначенияПеречисления.Получить(Индекс).Имя;
	КонецЕсли;    
	
	Если Не ЗначениеЗаполнено(СвойстваКолонки.РеквизитСинхронизцииПриоритет1) Тогда
		Возврат ЗначениеПоля;
	Иначе
		Результат = ЗначениеПоля[СвойстваКолонки.РеквизитСинхронизцииПриоритет1];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	//2 Реквизит.
	Если ЗначениеЗаполнено(СвойстваКолонки.РеквизитСинхронизцииПриоритет2) Тогда
		Результат = ЗначениеПоля[СвойстваКолонки.РеквизитСинхронизцииПриоритет2];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	//3 Реквизит.
	Если ЗначениеЗаполнено(СвойстваКолонки.РеквизитСинхронизцииПриоритет3) Тогда
		Результат = ЗначениеПоля[СвойстваКолонки.РеквизитСинхронизцииПриоритет3];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	Возврат ЗначениеПоля;
	
КонецФункции // ЗначениеДляВыгрузкиПоляПоПравиламШаблона(СвойстваКолонки)()

&НаКлиенте
Процедура СтруктураЗагрузкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Файл = Новый Файл(СтруктураЗагрузка);
	Если Файл.Существует() Тогда
		Попытка
			ТабДокШаблон = ТабличныйДокументИзШаблона(АдресФайлаЗагрузкаВоВременноеХранилище());
			ТабДокШаблон.Показать();
		Исключение
			Сообщить(ОписаниеОшибки(),СтатусСообщения.Внимание);
		КонецПопытки;
	Иначе
		Сообщить("Файл шаблона не существует или недоступен",СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

	
#КонецОбласти

#Область СозданиеШаблонаДоработкаАЧ


&НаСервере
Функция РазложитьИмяМакетаНаИмяКонфигурацииИИмяОбъекта(Макет)
	
	Результат = Новый  Структура;
	Результат.Вставить("ПредставлениеИмениКонфигурации",Неопределено);
	Результат.Вставить("ИмяКонфигурации",Неопределено);//БухгалтерияПредприятия,ЗарплатуИУправлениеПерсоналом и т.п.
	Результат.Вставить("ИмяТипОбъектаМетаданных",Неопределено);// Справочник,Документ и т.п.
	Результат.Вставить("ИмяОбъекта",Неопределено);//Номенклатура,КОнтрагенты и т.п.
	Результат.Вставить("ИмяТабличнойЧасти",Неопределено);// если это табличная часть объекта
	
	Результат.Вставить("ИмяМакета",Макет.Имя);
	Результат.Вставить("Комментарий",Макет.Комментарий);
	
	МассивИмен = СтрРазделить(Макет.Синоним,"#",Ложь);
	
	Если МассивИмен.Количество() > 0 Тогда
		Результат.Вставить("ПредставлениеИмениКонфигурации",МассивИмен[0]);
	КонецЕсли;
	Если МассивИмен.Количество() > 1 Тогда
		Результат.Вставить("ИмяКонфигурации",МассивИмен[1]);
	КонецЕсли;
	Если МассивИмен.Количество() > 2 Тогда
		Результат.Вставить("ИмяТипОбъектаМетаданных",МассивИмен[2]);
	КонецЕсли;
	Если МассивИмен.Количество() > 3 Тогда
		Результат.Вставить("ИмяОбъекта",МассивИмен[3]);
	КонецЕсли;
	Если МассивИмен.Количество() > 4 Тогда
		Результат.Вставить("ИмяТабличнойЧасти",МассивИмен[4]);
	КонецЕсли;
	
	
	
	Возврат Результат;
	
КонецФункции // РазложитьИмяМакетаНаИмяКонфигурацииИИмяОбъекта(ИмяМакета)()


&НаСервере
Процедура ИницироватьСписокКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны()
	
	 //СписокКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны
	 
	 МакетыОбработки = РеквизитФормыВЗначение("Объект").Метаданные().Макеты;
	 ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.Очистить();
	 Для Каждого МакетОбработки Из МакетыОбработки Цикл
		 РезультатРазложения = РазложитьИмяМакетаНаИмяКонфигурацииИИмяОбъекта(МакетОбработки);
		 
		 ИмяКонфигурации 				= РезультатРазложения.ИмяКонфигурации;
		 ПредставлениеИмениКонфигурации	= РезультатРазложения.ПредставлениеИмениКонфигурации;
		 _ИмяТабличнойЧасти				= РезультатРазложения.ИмяТабличнойЧасти;
		 ИмяОбъекта						= РезультатРазложения.ИмяОбъекта;
		 ИмяМакета						= РезультатРазложения.ИмяМакета;
		 Комментарий					= РезультатРазложения.Комментарий;
		 ИмяТипОбъектаМетаданных		= РезультатРазложения.ИмяТипОбъектаМетаданных;
		 
		 Если Не ИмяКонфигурации = Неопределено Тогда
			 ОтборПоКонфигурации 	= Новый Структура("Конфигурация",ИмяКонфигурации);
			 НашелСтрокиКонфигурации 	= ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.НайтиСтроки(ОтборПоКонфигурации);
			 Если НашелСтрокиКонфигурации.Количество() > 0 Тогда
				 СтрокаКонфигурации = НашелСтрокиКонфигурации[0];
			 Иначе
				 СтрокаКонфигурации = ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.Добавить();
				 СтрокаКонфигурации.Конфигурация 				= ИмяКонфигурации;
				 СтрокаКонфигурации.ПредставлениеКонфигурации 	= ?(ПредставлениеИмениКонфигурации = Неопределено,ИмяКонфигурации,ПредставлениеИмениКонфигурации);
			 КонецЕсли;
			 
			 СтрокаМакета = СтрокаКонфигурации.ШаблоныКонфигурации.Добавить();
			 СтрокаМакета.ИмяШаблона 	= ИмяМакета;
			 СтрокаМакета.Пояснение 	= Комментарий;
			 СтрокаМакета.Представление	= ИмяТипОбъектаМетаданных + "."+ИмяОбъекта+?(_ИмяТабличнойЧасти = Неопределено,"","."+_ИмяТабличнойЧасти);
			 СтрокаМакета.Выбран 		= Истина;
		КонецЕсли;
		
	 КонецЦикла;
	
	
КонецПроцедуры // ИницироватьСписокКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьТиповойШаблон(ИмяМакетаШаблон)
	
	Результат = Новый ТабличныйДокумент;
	Результат.Вывести(РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакетаШаблон));
	
	Возврат Результат;
	
КонецФункции // ПолучитьТиповойШаблон()

&НаКлиенте
Процедура СоздатьТиповыеШаблоны(Команда)
	ТекДанныеКонфигурацииТиповыеШаблоны = Элементы.ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.ТекущиеДанные;
	Если ТекДанныеКонфигурацииТиповыеШаблоны <> Неопределено Тогда
		Для Каждого СтрокаШаблон Из ТекДанныеКонфигурацииТиповыеШаблоны.ШаблоныКонфигурации Цикл
			Если Не СтрокаШаблон.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			ПолучитьТиповойШаблон(СтрокаШаблон.ИмяШаблона).Показать(СтрЗаменить(СтрокаШаблон.Представление,".","_"));
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьИлиСнятьПометкуСтрокиТЗ(Команда)
	
	
	Если Команда.Имя = "РеквизитыУстановитьФлажки" Тогда
		ТаблицаДляУстановкиФлажков = Реквизиты;
		ИмяКолонкиПометка = "Пометка";
		ЧтоДелаем = Истина;
	ИначеЕсли Команда.Имя = "РеквизитыСнятьФлажки" Тогда
		ТаблицаДляУстановкиФлажков = Реквизиты;
		ИмяКолонкиПометка = "Пометка";
		ЧтоДелаем = Ложь;
		
	ИначеЕсли Команда.Имя = "ГотовыеТиповыеШаблоныШаблоныКонфигурацииКнопкаСнятьФлажки" Тогда
		ТекущиеДанныеТЗ = Элементы.ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.ТекущиеДанные;
		Если ТекущиеДанныеТЗ <> Неопределено Тогда
			ТаблицаДляУстановкиФлажков = ТекущиеДанныеТЗ["ШаблоныКонфигурации"];
		КонецЕсли;
		ИмяКолонкиПометка = "Выбран";
		ЧтоДелаем = Ложь;
		
	ИначеЕсли Команда.Имя = "ГотовыеТиповыеШаблоныШаблоныКонфигурацииКнопкаУстановитьФлажки" Тогда
		
		ТекущиеДанныеТЗ = Элементы.ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.ТекущиеДанные;
		Если ТекущиеДанныеТЗ <> Неопределено Тогда
			ТаблицаДляУстановкиФлажков = ТекущиеДанныеТЗ["ШаблоныКонфигурации"];
		КонецЕсли;
		ИмяКолонкиПометка = "Выбран";
		ЧтоДелаем = Истина;
		
	ИначеЕсли Команда.Имя = "ДанныеТаблицыЗагрузкаКнопкаСнятьФлажки" Тогда
		
		ТаблицаДляУстановкиФлажков = ДанныеТаблицыЗагрузка;
		ИмяКолонкиПометка = "Системный_Выбран";
		ЧтоДелаем = Ложь;
		
	ИначеЕсли Команда.Имя = "ДанныеТаблицыЗагрузкаКнопкаУстановитьФлажки" Тогда
		
		ТаблицаДляУстановкиФлажков = ДанныеТаблицыЗагрузка;
		ИмяКолонкиПометка = "Системный_Выбран";
		ЧтоДелаем = Истина;
		
	КонецЕсли;
	
	Если ТаблицаДляУстановкиФлажков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизит Из ТаблицаДляУстановкиФлажков Цикл
		//==============================================
		//@# (Начало) Курдогло Сергей [03.02.2023 16:53:49] 
		Если Команда.Имя = "ДанныеТаблицыЗагрузкаКнопкаУстановитьФлажки" Тогда
			Если ОбработкаОшибок = "ВсеОшибкиПропускать" Тогда
				СтрокаРеквизит[ИмяКолонкиПометка] = Истина;
			ИначеЕсли ОбработкаОшибок ="ОшибкиШаблонаПропускать"  Тогда
				Если СтрокаРеквизит.Системный_ОшибкиМета Тогда
					СтрокаРеквизит[ИмяКолонкиПометка] = Ложь;
				Иначе 
					СтрокаРеквизит[ИмяКолонкиПометка] = Истина;
				КонецЕсли;
			ИначеЕсли ОбработкаОшибок ="БезОшибок" Тогда
				Если СтрокаРеквизит.Системный_ОшибкиМета или СтрокаРеквизит.Системный_ОшибкиШаблон Тогда
					СтрокаРеквизит[ИмяКолонкиПометка] = Ложь;
				Иначе 
					СтрокаРеквизит[ИмяКолонкиПометка] = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаРеквизит[ИмяКолонкиПометка] = ЧтоДелаем;
		КонецЕсли;
		//СтрокаРеквизит[ИмяКолонкиПометка] = ЧтоДелаем;
		//@# (Конец) Курдогло Сергей [03.02.2023 16:56:06]
		//==============================================
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИмяДляТиповогоШаблона(Команда)
	
	ТекОбъект = Элементы.СтруктураМета.ТекущиеДанные;
	Если ТекОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Результат = СоздатьИмяДляТиповогоШаблонаНаСервере(Новый Структура("ТипОбъекта,Идентификатор",ТекОбъект.ТипОбъекта,ТекОбъект.Идентификатор));
	Результат.Показать();
КонецПроцедуры

&НаСервере
Функция СоздатьИмяДляТиповогоШаблонаНаСервере(СтруктураОбъекта)
	
	Результат = Новый ТекстовыйДокумент;
	
	
	
	//БухгалтерияПредприятия30_Справочник_Номенклатура
	ИмяШаблона = Метаданные.Имя + "_" + СтруктураОбъекта.ТипОбъекта + "_" + СтруктураОбъекта.Идентификатор;
	Результат.ДобавитьСтроку("Имя макета 		= ["+ИмяШаблона+"]");
	
	//Бухгалтерия предприятия, редакция 3.0 <3.0.79.14>#БухгалтерияПредприятия30#Cправочник#Номенклатура
	СинонимШаблона = ""+Метаданные.Синоним + " <" +Метаданные.Версия + ">#"+ Метаданные.Имя +"#"+СтруктураОбъекта.ТипОбъекта+"#"+СтруктураОбъекта.Идентификатор;
	Результат.ДобавитьСтроку("Синоним макета 	= ["+СинонимШаблона+"]");
	Результат.ДобавитьСтроку("Комментарий  		= [Введите что считате нужным , это будет пояснение к шаблону]");
	
	
	
	Возврат Результат;	
	
КонецФункции

&НаСервере
Функция СписокТиповыхШаблоновДляЭтойКонфигурации()
		
	СтрокиЭтойКонфигурации = ТаблицаКонфигурацииДляКоторыхСделаныГотовыеТиповыеШаблоны.НайтиСтроки(Новый Структура("Конфигурация",Метаданные.Имя));
	
	Если СтрокиЭтойКонфигурации.Количество()>0 Тогда
		Возврат СтрокиЭтойКонфигурации[0].ШаблоныКонфигурации;
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции // СписокТиповыхШаблоновДляЭтойКонфигурации()

&НаСервере
Функция ТиповойШаблонДляТекущегоОбъекта(СписокТиповыхШаблоновДляКонфигурации,ТекущийОбъект)
	Результат = Неопределено;
	Для Каждого ТиповойШаблон Из СписокТиповыхШаблоновДляКонфигурации Цикл
		Если ВРег(ТиповойШаблон.Представление) = ВРег(ТекущийОбъект) Тогда
			Результат = ТиповойШаблон.ИмяШаблона;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПарсингаТиповогоШаблона(ИмяШаблона)
	Возврат РезультатПарсингаШапкиШаблона(ПолучитьТиповойШаблон(ИмяШаблона));
КонецФункции

&НаКлиенте
Процедура ВидимостьКнопкиНастроитьПоТиповомуШаблону()

	ТекущиеДанныеМета = Элементы.СтруктураМета.ТекущиеДанные;
	
	Если ТекущиеДанныеМета = Неопределено Тогда
		 ВидимостьКнопкиНастроитьПоТиповомуШаблонуНаСервере(Неопределено);
	Иначе
		 ВидимостьКнопкиНастроитьПоТиповомуШаблонуНаСервере(ТекущиеДанныеМета.ТипОбъекта + "."+ТекущиеДанныеМета.Идентификатор);
	КонецЕсли;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ВидимостьКнопкиНастроитьПоТиповомуШаблонуНаСервере(ТипОбъектаИИдентификаторОбъекта)

	Если ТипОбъектаИИдентификаторОбъекта = Неопределено Тогда
		Элементы.РеквизитыНастроитиПоТиповмоуШаблону.Видимость = Ложь;
	Иначе
		ТиповойШаблонДляТекущегоОбъекта = ТиповойШаблонДляТекущегоОбъекта(СписокТиповыхШаблоновДляЭтойКонфигурации(),ТипОбъектаИИдентификаторОбъекта);
		Элементы.РеквизитыНастроитиПоТиповмоуШаблону.Видимость = ТиповойШаблонДляТекущегоОбъекта <> Неопределено;
	
	КонецЕсли;
	    
КонецПроцедуры // ВидимостьКнопкиНастроитьПоТиповомуШаблону()

&НаСервере
Процедура НастроитьПоТиповмоуШаблонуНаСервере(ТипОбъектаИИдентификаторОбъекта)
	
	ТиповойШаблонДляТекущегоОбъекта = ТиповойШаблонДляТекущегоОбъекта(СписокТиповыхШаблоновДляЭтойКонфигурации(),ТипОбъектаИИдентификаторОбъекта);
	
	Если ТиповойШаблонДляТекущегоОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКолонокСТипомЛоклизованВМетаданные = РезультатПарсингаТиповогоШаблона(ТиповойШаблонДляТекущегоОбъекта).МассивКолонокСТипомЛоклизованВМетаданные;
	
	Для каждого РеквизитТекущегоОбъекта Из Реквизиты Цикл
	
		РеквизитТекущегоОбъекта.Пометка = Ложь;
	
	КонецЦикла;
	
	Для Каждого РеквизитОб Из МассивКолонокСТипомЛоклизованВМетаданные Цикл
		НашелРеквизит = Реквизиты.НайтиСтроки(Новый Структура("Представление",РеквизитОб.Имя_Системы));
		Если НашелРеквизит.Количество() > 0 Тогда 
			НашелРеквизит[0].Пометка = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПоТиповмоуШаблону(Команда)
	
	ТекДанные = Элементы.СтруктураМета.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПоТиповмоуШаблонуНаСервере(ТекДанные.ТипОбъекта + "."+ТекДанные.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

//@# (Начало) Alexandru Ciobanu [27.01.2023 11:02:27]
#Область Изменения_27_01_2023
// Добавил реквизит ФорматДатыДляЗагрузки
// Добавил реквизит РазделительВФорматеДатыЗагрузки
// Добавил группу "НастройкиЗагрузки" в группе "СтраницаЗагрузка" после группы "Группа7"
// Добавил группу "Группа16" в группе "НастройкиЗагрузки"
// Добавил поле "ФорматДатыДляЗагрузки" в группу "Группа16"
// Добавил поле "РазделительВФорматеДатыЗагрузки" в группу "Группа16"
// Добавил декорацию "ДекорацияКн" в группу "Группа7" после поля "СтруктураЗагрузка"

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//                    
&НаСервереБезКонтекста
Функция ТочкаАнглийская()
	Возврат ".";
КонецФункции

&НаСервереБезКонтекста
Функция ТочкаРусская()
	Возврат ".";
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЦифра(ЭтотСимвол)
	КодСимвола = КодСимвола(ЭтотСимвол,1);
	
	Возврат  КодСимвола = КодСимвола("0",1) Или
			 КодСимвола = КодСимвола("1",1) Или
			 КодСимвола = КодСимвола("2",1) Или
			 КодСимвола = КодСимвола("3",1) Или
			 КодСимвола = КодСимвола("4",1) Или
			 КодСимвола = КодСимвола("5",1) Или
			 КодСимвола = КодСимвола("6",1) Или
			 КодСимвола = КодСимвола("7",1) Или
			 КодСимвола = КодСимвола("8",1) Или
			 КодСимвола = КодСимвола("9",1);
			 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЧислоДляДаты(Строка)
	
	Если СтрДлина(Строка) = 1 Тогда
		Возврат ЭтоЦифра(Сред(Строка,1,1));
	ИначеЕсли СтрДлина(Строка) = 2 Тогда
		Возврат ЭтоЦифра(Сред(Строка,1,1)) И ЭтоЦифра(Сред(Строка,2,1));
	ИначеЕсли СтрДлина(Строка) = 3 Тогда
		Возврат ЭтоЦифра(Сред(Строка,1,1)) И ЭтоЦифра(Сред(Строка,2,1)) И ЭтоЦифра(Сред(Строка,3,1));
	ИначеЕсли СтрДлина(Строка) = 4 Тогда
		Возврат ЭтоЦифра(Сред(Строка,1,1)) И ЭтоЦифра(Сред(Строка,2,1)) И ЭтоЦифра(Сред(Строка,3,1)) И ЭтоЦифра(Сред(Строка,4,1));
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция СтрокаВДатуПоНастройкамЗаданыеНаФорме(ДатаСтрока)
	
	Результат = Дата(0001,1,1);
	
	Если РазделительВФорматеДатыЗагрузки = ТочкаАнглийская() Тогда
		//точки обрабатываем по особену потому что есть большой шанс ошибки
		МассивЧастей = СтрРазделить(ДатаСтрока,РазделительВФорматеДатыЗагрузки,Ложь);
		Если МассивЧастей.Количество() = 0 Тогда
			МассивЧастей = СтрРазделить(ДатаСтрока,ТочкаРусская(),Ложь);
			
		КонецЕсли;
	ИначеЕсли РазделительВФорматеДатыЗагрузки = ТочкаРусская() Тогда
		//точки обрабатываем по особену потому что есть большой шанс ошибки
		МассивЧастей = СтрРазделить(ДатаСтрока,РазделительВФорматеДатыЗагрузки,Ложь);
		Если МассивЧастей.Количество() = 0 Тогда
			МассивЧастей = СтрРазделить(ДатаСтрока,ТочкаАнглийская(),Ложь);
			
		КонецЕсли;
	Иначе
		//а тут уже общий случай (любой другой разделитель кроме точки русской , английской и цифрой само-ссобой)
		МассивЧастей = СтрРазделить(ДатаСтрока,РазделительВФорматеДатыЗагрузки,Ложь);
		
	КонецЕсли;
	
	
	Если МассивЧастей.Количество() = 3 Тогда
		Если Не ЭтоЧислоДляДаты(МассивЧастей[0]) Или  Не ЭтоЧислоДляДаты(МассивЧастей[1]) Или  Не ЭтоЧислоДляДаты(МассивЧастей[0]) Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе		
		Возврат Результат;
	КонецЕсли;
	
	ФорматСразделителем = СтрЗаменить(ФорматДатыДляЗагрузки,ТочкаАнглийская(),РазделительВФорматеДатыЗагрузки);
	ФорматСразделителем = СтрЗаменить(ФорматДатыДляЗагрузки,ТочкаРусская(),РазделительВФорматеДатыЗагрузки);
	
	МассивЧастейОжидаемыйФормат = СтрРазделить(ФорматСразделителем,РазделительВФорматеДатыЗагрузки,Ложь); 
	
	ИндексДень 		= МассивЧастейОжидаемыйФормат.Найти("ДД");
	Если ИндексДень = Неопределено Тогда
		ИндексДень 		= МассивЧастейОжидаемыйФормат.Найти("DD");
	КонецЕсли;
	
	ИндексМесяц 		= МассивЧастейОжидаемыйФормат.Найти("ММ");//ru
	Если ИндексМесяц 	= Неопределено Тогда
		ИндексМесяц 	= МассивЧастейОжидаемыйФормат.Найти("MM");//en
	КонецЕсли;
	
	
	
	ИндексГод 		= МассивЧастейОжидаемыйФормат.Найти("ГГГГ");
	Если ИндексГод = Неопределено Тогда
		ИндексГод 		= МассивЧастейОжидаемыйФормат.Найти("ГГ");
		Если ИндексГод = Неопределено Тогда
			ИндексГод 		= МассивЧастейОжидаемыйФормат.Найти("YYYY");
			Если ИндексГод = Неопределено Тогда
				ИндексГод 		= МассивЧастейОжидаемыйФормат.Найти("YY");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексДень = Неопределено Или ИндексМесяц = Неопределено Или ИндексГод = Неопределено Тогда
	
		Возврат Результат;
		
	КонецЕсли;
	
	ПрефиксКГоду = ?(СтрДлина(МассивЧастей[ИндексГод])=2,"20","");
	
	Результат = Дата(ПрефиксКГоду+МассивЧастей[ИндексГод],МассивЧастей[ИндексМесяц],МассивЧастей[ИндексДень],0,0,0);
		
	
	Возврат Результат;
	

КонецФункции // СтрокаВДатуПоНастройкамЗаданыеНаФорме(ДатаСтрока)()

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	Элементы.НастройкиЗагрузки.Видимость = Не Элементы.НастройкиЗагрузки.Видимость;
КонецПроцедуры


#КонецОбласти
//@# (Конец) Alexandru Ciobanu [27.01.2023 11:02:27]

//@# (Начало) Alexandru Ciobanu [14.02.2023 14:15:11]
#Область Итерация14_02_2023
// В таблицу "Реквизиты" добавлен новый реквизи "Синхронизация"
//		тип - число
//		длина - 1
//		точность - 0

// Для Элемента "Реквизиты" добавлен обработчик события "ПередНачаломИзменения"
//			имя обработчика - "РеквизитыПередНачаломИзменения" 


&НаКлиенте
Процедура РеквизитыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.Имя = "Реквизиты" И Элемент.ТекущийЭлемент.Имя = "РеквизитыСинхронизация" Тогда 
		ТекущиеДанныеРеквизиты = Элементы.Реквизиты.ТекущиеДанные;
		Если ТекущиеДанныеРеквизиты.Представление = "Ссылка" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Строки1 = Реквизиты.НайтиСтроки(Новый Структура("Синхронизация",1));
		Строки2 = Реквизиты.НайтиСтроки(Новый Структура("Синхронизация",2));
		Строки3 = Реквизиты.НайтиСтроки(Новый Структура("Синхронизация",3));
		
		
		БывшееЗначение = 0;
		Если ТекущиеДанныеРеквизиты.Синхронизация Тогда
			БывшееЗначение = ТекущиеДанныеРеквизиты.Синхронизация;
			ТекущиеДанныеРеквизиты.Синхронизация = 0;								
		КонецЕсли;
		
		Если БывшееЗначение = 1 И Строки2.Количество() Тогда
			Строки2[0].Синхронизация = 1;
		КонецЕсли;
		
		Если БывшееЗначение = 1 И Строки3.Количество() Тогда
			Строки3[0].Синхронизация = 2;
		КонецЕсли;
		
		Если БывшееЗначение = 2 И Строки3.Количество() Тогда
			Строки3[0].Синхронизация = 2;
		КонецЕсли;
		
		Если БывшееЗначение = 0 Тогда 
			Если Не Строки1.Количество() Тогда
			
				ТекущиеДанныеРеквизиты.Синхронизация = 1;
			
			ИначеЕсли  Не Строки2.Количество() Тогда
			
				ТекущиеДанныеРеквизиты.Синхронизация = 2; 
			
			ИначеЕсли  Не Строки3.Количество() Тогда
			
				ТекущиеДанныеРеквизиты.Синхронизация = 3;
			
			КонецЕсли;
			ТекущиеДанныеРеквизиты.Пометка = Истина;
		КонецЕсли;
		
		
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВШаблонаРеквизитыСинхронизацииТабличныхЧастейССылкой(ТабличныйДокумент,НомерПоследнейКолонки)
	Для каждого РеквизитШапки Из Реквизиты Цикл
	
		Если РеквизитШапки.Синхронизация Тогда
			//==============================================
			//@# (Начало) Курдогло Сергей [16.02.2023 17:24:28]
			Строк = ТабличныйДокумент.Область("R2"+"C" +РеквизитШапки.Синхронизация);
		    Строк.Текст = РеквизитШапки.Значение.Имя; 
			ДобавитьКолонкуФильтраСсылки(ТабличныйДокумент,НомерПоследнейКолонки,РеквизитШапки);				 

		   //@# (Конец) Курдогло Сергей [16.02.2023 17:24:30]
		   //==============================================
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ОфформитьКолонкуКакРеквизитШапки(Область,ТЧ = Ложь)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Область.ШиринаКолонки = 18;
	Область.ГраницаСверху = Линия;
	Область.ГраницаСлева = Линия;
	Область.ГраницаСнизу = Линия;
	Область.ГраницаСправа = Линия;
	НебесноГолубой = Новый Цвет(135,206,235);//WebЦвета.НебесноГолубой;
	//==============================================
	//@# (Начало) Курдогло Сергей [27.02.2023 10:09:59]
	Если не ТЧ Тогда 
		Область.ЦветФона = НебесноГолубой;
	Иначе
		Зеленый = Новый Цвет(144,238,144);//WebЦвета.СветлоЗеленый
		Область.ЦветФона = Зеленый;
	КонецЕсли;
	//@# (Конец) Курдогло Сергей [27.02.2023 10:10:01]
	//==============================================
КонецПроцедуры 

&НаКлиенте
Процедура ОфформитьКолонкуКакРеквизитТЧ(Область)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Область.ШиринаКолонки = 18;
	Область.ГраницаСверху = Линия;
	Область.ГраницаСлева = Линия;
	Область.ГраницаСнизу = Линия;
	Область.ГраницаСправа = Линия;
    Зеленый = Новый Цвет(144,238,144);//WebЦвета.СветлоЗеленый
	Область.ЦветФона = Зеленый;
	
КонецПроцедуры


&НаСервере
Процедура ОфформитьДополнительнаяКолонкаРеквизитШапки(Область)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Область.ШиринаКолонки = 18;
	Область.ГраницаСверху = Линия;
	Область.ГраницаСлева = Линия;
	Область.ГраницаСнизу = Линия;
	Область.ГраницаСправа = Линия;
	ЗеленоЖелтый = Новый Цвет(173,255,47);//WebЦвета.ЗеленоЖелтый;
	Область.ЦветФона = ЗеленоЖелтый;
КонецПроцедуры

&НаСервере
Процедура ОфформитьКолонкаРеквизитСинхронизации(Область)
	Шрифт = Новый Шрифт("Arial",9,Ложь,Истина,Истина,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Область.ШиринаКолонки = 18;
	Область.ГраницаСверху = Линия;
	Область.ГраницаСлева = Линия;
	Область.ГраницаСнизу = Линия;
	Область.ГраницаСправа = Линия;
	//Область.ЦветФона = WebЦвета.ЗеленоЖелтый;
	Область.Шрифт = Шрифт;
	Область.ЦветТекста = Новый Цвет(0,0,139);
КонецПроцедуры


&НаСервере
Процедура ДобавитьВШаблонРеквизитШапки_ДополнительнаяКолонкаТипСостовногоРеквизита(Табдок,Реквизит,Знач НомерРеквизита,Знач НомерКолонки,СоответствиеСтруктураКолонокиШаблона,ТЧ=Ложь)
	
	Для каждого ЭлементСоответствиеСтруктураКолонокиШаблона Из СоответствиеСтруктураКолонокиШаблона Цикл
		АдресЯчейки = "R" +ФЧО(ЭлементСоответствиеСтруктураКолонокиШаблона.Значение)+"C"+ (НомерКолонки + 1);
		Ячейка = Табдок.Область(АдресЯчейки);
		
		ИмяРеквизита = ЭлементСоответствиеСтруктураКолонокиШаблона.Ключ;
		
		
		Если ИмяРеквизита = "НомерКолонки" Тогда
			//номер
			Ячейка.Текст = ""+НомерРеквизита;
		ИначеЕсли ИмяРеквизита = "Имя_Системы" Тогда
			//имя
			Если Не ТЧ Тогда
				Ячейка.Текст = "ДополнительнаяКолонкаТипСостовногоРеквизита_"+Реквизит.Представление;
			Иначе
				Ячейка.Текст = "ДополнительнаяКолонкаТипСостовногоРеквизита_"+Реквизит.РеквизитИмя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьДляОформления =  Табдок.Область("R2C"+ФЧО(НомерКолонки + 1)+":R"+ФЧО(ВысотаШапкиШаблона())+"C"+ФЧО(НомерКолонки + 1)); 
	ОфформитьДополнительнаяКолонкаРеквизитШапки(ОбластьДляОформления)
	
						
КонецПроцедуры


&НаСервере
Процедура ДобавитьВШаблонРеквизитШапки(Табдок,Реквизит,НомерРеквизита,НомерКолонки,СоответствиеСтруктураКолонокиШаблона,ФильтрСсылки = Ложь) //ФильтрСсылки добавлен для доп колонок
	
	Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	
	
	Для каждого ЭлементСоответствиеСтруктураКолонокиШаблона Из СоответствиеСтруктураКолонокиШаблона Цикл
		АдресЯчейки = "R" +ФЧО(ЭлементСоответствиеСтруктураКолонокиШаблона.Значение)+"C"+ НомерКолонки;
		Ячейка = Табдок.Область(АдресЯчейки);
		
		ИмяРеквизита = ЭлементСоответствиеСтруктураКолонокиШаблона.Ключ;
		
		
		Если ИмяРеквизита = "НомерКолонки" Тогда
			//номер
			Ячейка.Текст = ""+НомерРеквизита;
		ИначеЕсли ИмяРеквизита = "Имя_Системы" Тогда
			//имя
			//==============================================
			//@# (Начало) Курдогло Сергей [17.02.2023 11:21:21]
			Если не ФильтрСсылки Тогда 
				Ячейка.Текст = Реквизит.Представление;
			Иначе
				Ячейка.Текст = "ФильтрСсылки"+Реквизит.Синхронизация+"_"+Реквизит.Представление; 
			КонецЕсли;
			//@# (Конец) Курдогло Сергей [17.02.2023 11:21:24]
			//==============================================
		ИначеЕсли ИмяРеквизита = "Синоним" Тогда
			//синоним
			Ячейка.Текст = Реквизит.Значение.Синоним;
		ИначеЕсли ИмяРеквизита = "Обязательность" Тогда
			//ПроверкаЗаполнения
			Если Реквизит.Значение.ПроверкаЗаполнения = "Не проверять" Тогда
				Обязательность = "Нет";
			Иначе
				Обязательность = "Да"
			КонецЕсли;
			Ячейка.Текст = Обязательность;
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет1" Тогда
			Если Реквизит.РеквизитыРеквизитов.Количество()>0 Тогда
				СтрокаПервый = Реквизит.РеквизитыРеквизитов[0];
				Если СтрокаПервый.Использовать Тогда
					Ячейка.Текст = СтрокаПервый.Реквизит;
				Конецесли;
			КонецЕсли;
			
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет2" Тогда
			Если Реквизит.РеквизитыРеквизитов.Количество()>1 Тогда
				СтрокаВторой = Реквизит.РеквизитыРеквизитов[1];
				Если СтрокаВторой.Использовать Тогда
					Ячейка.Текст = СтрокаВторой.Реквизит;
				Конецесли;
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет3" Тогда
			Если Реквизит.РеквизитыРеквизитов.Количество()>2 Тогда
				СтрокаТретий = Реквизит.РеквизитыРеквизитов[2];
				Если СтрокаТретий.Использовать Тогда
					Ячейка.Текст = СтрокаТретий.Реквизит;
				Конецесли;
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "ТипЗначения" Тогда
			Типы = СтрРазделить(Реквизит.Значение.Тип,",");
			
			Если Типы.Количество()>1 Тогда
				ДобавитьВШаблонРеквизитШапки_ДополнительнаяКолонкаТипСостовногоРеквизита(Табдок,Реквизит,НомерРеквизита,НомерКолонки,СоответствиеСтруктураКолонокиШаблона);
                Ячейка.Текст = Реквизит.Значение.Тип;
			Иначе
				Ячейка.Текст = Реквизит.Значение.Тип;
			КонецЕсли;
			
			
			
		Иначе 
			Ячейка.Текст = Реквизит.Значение.Тип;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбластьДляОформления =  Табдок.Область("R2C"+ФЧО(НомерКолонки)+":R"+ФЧО(ВысотаШапкиШаблона())+"C"+ФЧО(НомерКолонки)); 
	ОфформитьКолонкуКакРеквизитШапки(ОбластьДляОформления);
	
	
	Если СтрРазделить(Реквизит.Значение.Тип,",").Количество()>1 Тогда
		НомерКолонки = НомерКолонки + 1;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция СоздатьШаблонНаСервере()
	
	Табдок = Новый ТабличныйДокумент; 
	
	//первая строка
	Шапка = Табдок.Область("R1C1");
	Шапка.СодержитЗначение = Истина;
	Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Шапка.Шрифт = Шрифт;
	Шапка.Значение = ИмяОбъекта;
	
	СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
	
	//Итт - для ячеек
	//НомерРеквизита - для нумерации реквизитов(у одного реквизита могут быть несколько колонок, если он составной). 
	НомерКолонки = 0;
	НомерРеквизита = 0;
	Для каждого Реквизит из Реквизиты Цикл
		
		Если Реквизит.Пометка Тогда
			НомерКолонки= НомерКолонки+1;
			НомерРеквизита = НомерРеквизита+1;
			
			ДобавитьВШаблонРеквизитШапки(Табдок,Реквизит,НомерРеквизита,НомерКолонки,СоответствиеСтруктураКолонокиШаблона);
		КонецЕсли;
		
		//==============================================
		//@# (Начало) Курдогло Сергей [17.02.2023 11:14:10]
		//Если Реквизит.Синхронизация > 0 Тогда
		//	ОбластьШапкаСинхронизация = Табдок.Область("R2C"+Реквизит.Синхронизация));
		//	ОбластьШапкаСинхронизация.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		//	ОбластьШапкаСинхронизация.Текст = Реквизит.Представление; 
		//	ОфформитьКолонкаРеквизитСинхронизации(ОбластьШапкаСинхронизация);
		//КонецЕсли;
		//@# (Конец) Alexandru Ciobanu [14.02.2023 15:31:31]
		//=================================================== 
		
		Если  Реквизит.Представление = "Ссылка" И Реквизит.ЕстьТаблица Тогда
			 ЗаполнитьПриоритетыШапки(ТабДок,Реквизит);
		КонецЕсли;
		//@# (Конец) Курдогло Сергей [17.02.2023 11:14:14]
		//============================================== 
		
	КонецЦикла;
	
	Возврат Табдок;
	
КонецФункции

#КонецОбласти
////@# (Конец) Alexandru Ciobanu [14.02.2023 14:15:11]

//==============================================
//@# (Начало) Курдогло Сергей [16.02.2023 17:00:26]
#Область ИзмененияВыводаШаблоновТЧ
&НаСервере
Процедура ЗаполнитьПриоритетыШапки(ТабДок,Реквизит)
	
	 		ПервыйПриоритет = Неопределено;
			ВторойПриоритет = Неопределено;
			ТретийПриоритет = Неопределено;
			Если  Реквизит.РеквизитыРеквизитов.Количество()>0 Тогда
				
				Шапка1 = Табдок.Область("R2C1");
				Шапка1.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Шапка2 = Табдок.Область("R2C2");
				Шапка2.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Шапка3 = Табдок.Область("R2C3");
				Шапка3.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				
				СтрокаПервый = Реквизит.РеквизитыРеквизитов[0];
				Если СтрокаПервый.Использовать Тогда
					ПервыйПриоритет = СтрокаПервый.Реквизит;
				Конецесли;
				СтрокаВторой = Реквизит.РеквизитыРеквизитов[1];
				Если СтрокаВторой.Использовать Тогда
					ВторойПриоритет = СтрокаВторой.Реквизит;
				Конецесли;
				СтрокаТретий = Реквизит.РеквизитыРеквизитов[2];
				Если СтрокаТретий.Использовать Тогда
					ТретийПриоритет = СтрокаТретий.Реквизит;
				Конецесли;
				
				Шапка1.Текст = ПервыйПриоритет;
				Шапка2.Текст = ВторойПриоритет;
				Шапка3.Текст = ТретийПриоритет;
				
			КонецЕсли;

			
		КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуФильтраСсылки(ТабличныйДокумент,НомерПоследнейКолонки,РеквизитШапки)
	
	
	Если не РеквизитШапки = Неопределено Тогда 
		
			СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
			
			НомерПоследнейКолонки = НомерПоследнейКолонки+1;
			ДобавитьВШаблонРеквизитШапки(ТабличныйДокумент,РеквизитШапки,НомерПоследнейКолонки,НомерПоследнейКолонки,СоответствиеСтруктураКолонокиШаблона,Истина);
			////номер			
			//Строк = ТабличныйДокумент.Область("R3" +"C"+ НомерПоследнейКолонки);
			//Строк.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Строк.ШиринаКолонки = 18;
			//Строк.ЦветФона = WebЦвета.НебесноГолубой;
			//Строк.Текст = НомерПоследнейКолонки;			
			////Имя
			//Строк = ТабличныйДокумент.Область("R4" +"C"+ НомерПоследнейКолонки);
			//Строк.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Строк.ЦветФона = WebЦвета.НебесноГолубой; 
			//Строк.Текст = "ФильтрСсылки" + РеквизитШапки.Синхронизация + "_"+РеквизитШапки.Значение.Имя;
			////Обязательность
			//Строк = ТабличныйДокумент.Область("R7" +"C"+ НомерПоследнейКолонки);
			//Строк.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Строк.ЦветФона = WebЦвета.НебесноГолубой; 
			//Строк.Текст = "Да";
			////Тип
			//Строк = ТабличныйДокумент.Область("R6" +"C"+ НомерПоследнейКолонки);
			//Строк.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Строк.ЦветФона = WebЦвета.НебесноГолубой; 
			//Строк.Текст = РеквизитШапки.Значение.Тип;
			////
			//ПервыйПриоритет = Неопределено;
			//ВторойПриоритет = Неопределено;
			//ТретийПриоритет = Неопределено;
			//Если РеквизитШапки.РеквизитыРеквизитов.Количество()>0 Тогда
			//	
			//	СтрокаПервый = РеквизитШапки.РеквизитыРеквизитов[0];
			//	Если СтрокаПервый.Использовать Тогда
			//		ПервыйПриоритет = СтрокаПервый.Реквизит;
			//	Конецесли;
			//	СтрокаВторой = РеквизитШапки.РеквизитыРеквизитов[1];
			//	Если СтрокаВторой.Использовать Тогда
			//		ВторойПриоритет = СтрокаВторой.Реквизит;
			//	Конецесли;
			//	СтрокаТретий = РеквизитШапки.РеквизитыРеквизитов[2];
			//	Если СтрокаТретий.Использовать Тогда
			//		ТретийПриоритет = СтрокаТретий.Реквизит;
			//	Конецесли;
			//	
			//КонецЕсли;
			//
			//Ячейка = ТабличныйДокумент.Область("R8" +"C"+ НомерПоследнейКолонки);
			//Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Ячейка.ЦветФона =WebЦвета.НебесноГолубой;
			//Ячейка.Текст = ПервыйПриоритет;
			//
			//Ячейка = ТабличныйДокумент.Область("R9" +"C"+ НомерПоследнейКолонки);
			//Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Ячейка.ЦветФона = WebЦвета.НебесноГолубой;
			//Ячейка.Текст = ВторойПриоритет;
			//
			//Ячейка = ТабличныйДокумент.Область("R10" +"C"+ НомерПоследнейКолонки);
			//Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			//Ячейка.ЦветФона = WebЦвета.НебесноГолубой;
			//Ячейка.Текст = ТретийПриоритет;
			
		КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонРеквизитТЧ(Табдок,Строка,НомерРеквизита,НомерКолонки,СоответствиеСтруктураКолонокиШаблона,ФильтрСсылки = Ложь) //ФильтрСсылки добавлен для доп колонок
	
	Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	
	
	Для каждого ЭлементСоответствиеСтруктураКолонокиШаблона Из СоответствиеСтруктураКолонокиШаблона Цикл
		АдресЯчейки = "R" +ФЧО(ЭлементСоответствиеСтруктураКолонокиШаблона.Значение)+"C"+ НомерКолонки;
		Ячейка = Табдок.Область(АдресЯчейки);
		
		ИмяРеквизита = ЭлементСоответствиеСтруктураКолонокиШаблона.Ключ;
		
		
		Если ИмяРеквизита = "НомерКолонки" Тогда
			//номер
			Ячейка.Текст = ""+НомерРеквизита;
		ИначеЕсли ИмяРеквизита = "Имя_Системы" Тогда
			//имя
			//==============================================
			//@# (Начало) Курдогло Сергей [17.02.2023 11:21:21]
			//Если не ФильтрСсылки Тогда 
				Ячейка.Текст = Строка.РеквизитИмя;
			//Иначе
			//	Ячейка.Текст = "ФильтрСсылки"+Реквизит.Синхронизация+"_"+Реквизит.Представление; 
			//КонецЕсли;
			//@# (Конец) Курдогло Сергей [17.02.2023 11:21:24]
			//==============================================
		ИначеЕсли ИмяРеквизита = "Синоним" Тогда
			//синоним
			Ячейка.Текст = Строка.Синоним;
		ИначеЕсли ИмяРеквизита = "Обязательность" Тогда
			//ПроверкаЗаполнения
			Если Строка.ПроверкаЗаполнения = "Не проверять" Тогда
				Обязательность = "Нет";
			Иначе
				Обязательность = "Да"
			КонецЕсли;
			Ячейка.Текст = Обязательность;
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет1" Тогда
			Если Строка.РеквизитыРеквизитов.Количество()>0 Тогда
				СтрокаПервый = Строка.РеквизитыРеквизитов[0];
				Если СтрокаПервый.Использовать Тогда
					Ячейка.Текст = СтрокаПервый.Реквизит;
				Конецесли;
			КонецЕсли;
			
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет2" Тогда
			Если Строка.РеквизитыРеквизитов.Количество()>1 Тогда
				СтрокаВторой = Строка.РеквизитыРеквизитов[1];
				Если СтрокаВторой.Использовать Тогда
					Ячейка.Текст = СтрокаВторой.Реквизит;
				Конецесли;
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "РеквизитСинхронизцииПриоритет3" Тогда
			Если Строка.РеквизитыРеквизитов.Количество()>2 Тогда
				СтрокаТретий = Строка.РеквизитыРеквизитов[2];
				Если СтрокаТретий.Использовать Тогда
					Ячейка.Текст = СтрокаТретий.Реквизит;
				Конецесли;
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "ТипЗначения" Тогда
			Типы = СтрРазделить(Строка.Тип,",");
			
			Если Типы.Количество()>1 Тогда
				ДобавитьВШаблонРеквизитТЧ_ДополнительнаяКолонкаТипСостовногоРеквизита(Табдок,Строка,НомерРеквизита,НомерКолонки,СоответствиеСтруктураКолонокиШаблона);
                Ячейка.Текст = Строка.Тип;
			Иначе
				Ячейка.Текст = Строка.Тип;
			КонецЕсли;
			
			
			
		Иначе 
			Ячейка.Текст = Строка.Тип;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбластьДляОформления =  Табдок.Область("R2C"+ФЧО(НомерКолонки)+":R"+ФЧО(ВысотаШапкиШаблона())+"C"+ФЧО(НомерКолонки)); 
	ОфформитьКолонкуКакРеквизитТЧ(ОбластьДляОформления);
	
	
	Если СтрРазделить(Строка.Тип,",").Количество()>1 Тогда
		НомерКолонки = НомерКолонки + 1;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонТЧНаСервере()
		
	СоответствиеСтруктураКолонокиШаблона = СоответствиеСтруктураКолонокиШаблона();
	
	Дерево = ДеревоТаблиц.ПолучитьЭлементы();
	
	Если Дерево.Количество() >0 Тогда
			
		Итт = 0;
		Для каждого строка из Дерево Цикл
			
			Если  строка.Пометка Тогда 
				Табдок = Новый ТабличныйДокумент; 
				//первая строка
				Шапка = Табдок.Область("R1C1");
				Шрифт = Новый Шрифт("Times New Roman",9,Истина,Ложь,Ложь,Ложь); //имя,размер,полужирный,наклонный,подчеркивание,зачеркивание
				Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				Шапка.Шрифт = Шрифт;				
				Шапка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Шапка.Текст = строка.Таблица;
				
				НижнийУровень = строка.ПолучитьЭлементы();
				Номер=0;
				НомерРеквизита = 0;
				Для каждого Нижний из НижнийУровень Цикл
					Если Нижний.Пометка Тогда
						Номер=Номер+1;
						НомерРеквизита = НомерРеквизита+1;
						ДобавитьВШаблонРеквизитТЧ(Табдок,Нижний,НомерРеквизита,Номер,СоответствиеСтруктураКолонокиШаблона);
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьВШаблонаРеквизитыСинхронизацииТабличныхЧастейССылкой(Табдок,Номер);
				
				Табдок.Показать(строка.Таблица);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонРеквизитТЧ_ДополнительнаяКолонкаТипСостовногоРеквизита(Табдок,Реквизит,Знач НомерРеквизита,Знач НомерКолонки,СоответствиеСтруктураКолонокиШаблона)
	
	Для каждого ЭлементСоответствиеСтруктураКолонокиШаблона Из СоответствиеСтруктураКолонокиШаблона Цикл
		АдресЯчейки = "R" +ФЧО(ЭлементСоответствиеСтруктураКолонокиШаблона.Значение)+"C"+ (НомерКолонки + 1);
		Ячейка = Табдок.Область(АдресЯчейки);
		
		ИмяРеквизита = ЭлементСоответствиеСтруктураКолонокиШаблона.Ключ;
		
		
		Если ИмяРеквизита = "НомерКолонки" Тогда
			//номер
			Ячейка.Текст = ""+НомерРеквизита;
		ИначеЕсли ИмяРеквизита = "Имя_Системы" Тогда
			//имя
				Ячейка.Текст = "ДополнительнаяКолонкаТипСостовногоРеквизита_"+Реквизит.РеквизитИмя;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьДляОформления =  Табдок.Область("R2C"+ФЧО(НомерКолонки + 1)+":R"+ФЧО(ВысотаШапкиШаблона())+"C"+ФЧО(НомерКолонки + 1)); 
	ОфформитьДополнительнаяКолонкаТЧ(ОбластьДляОформления);
	
						
КонецПроцедуры

&НаКлиенте
Процедура ОфформитьДополнительнаяКолонкаТЧ(Область)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Область.ШиринаКолонки = 18;
	Область.ГраницаСверху = Линия;
	Область.ГраницаСлева = Линия;
	Область.ГраницаСнизу = Линия;
	Область.ГраницаСправа = Линия;
	НебесноГолубой =  Новый Цвет(135,206,235);//WebЦвета.НебесноГолубой;
	Область.ЦветФона = НебесноГолубой;
КонецПроцедуры
#КонецОбласти
//@# (Конец) Курдогло Сергей [27.02.2023 10:02:41]
//==============================================


//@# (Начало) Голуб Вениамин [07.02.2023 16:35:44]
#Область ДоработкаПоРегистрамСведений

// ЧТЕНИЕ

&НаСервере
Процедура ДополнитьРезультатИзмерениямиИРесурсами(Результат, МетаОбъект)
	
	Для каждого Измерение Из МетаОбъект.Измерения Цикл
		
		ОписаниеИзмерения = Новый Структура;
		ОписаниеИзмерения.Вставить("Имя", Измерение.Имя);
		ОписаниеИзмерения.Вставить("Синоним", Измерение.Синоним);
		ОписаниеИзмерения.Вставить("Комментарий", Измерение.Комментарий);
		ОписаниеИзмерения.Вставить("Тип", ТипРеквизитаВстроку(Измерение,1));
		ОписаниеИзмерения.Вставить("ПроверкаЗаполнения", Строка(Измерение.ПроверкаЗаполнения));
		//==============================================
		//@# (Начало) Курдогло Сергей [23.02.2023 15:56:03]
		ОписаниеИзмерения.Вставить("Ведущее",Измерение.Ведущее);
		//@# (Конец) Курдогло Сергей [23.02.2023 15:56:04]
		//==============================================
		
		Результат.Вставить(Измерение.Имя, ОписаниеИзмерения); 
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаОбъект.Ресурсы Цикл
		
		ОписаниеРесурса = Новый Структура;
		ОписаниеРесурса.Вставить("Имя", Ресурс.Имя);
		ОписаниеРесурса.Вставить("Синоним", Ресурс.Синоним);
		ОписаниеРесурса.Вставить("Комментарий", Ресурс.Комментарий);
		ОписаниеРесурса.Вставить("Тип", ТипРеквизитаВстроку(Ресурс,1));
		ОписаниеРесурса.Вставить("ПроверкаЗаполнения", Строка(Ресурс.ПроверкаЗаполнения));
		
		Результат.Вставить(Ресурс.Имя, ОписаниеРесурса); 
		
	КонецЦикла; 
	
КонецПроцедуры 

//
// Процедура - Дополнить массивы реквизитов мета по регистру сведений
// 		с учетом измерений и ресурсов 
// Параметры:
//  МассивРеквизитовМета			 - Массив 	 - обязательный
//		массив со всеми полями из шаблона
//  МассивПроверяемыхРеквизитовМета	 - Массив	 - обязательны
//		массив с обязательными полями из шаблона
//  ОбъектМета						 - ОбъектМетаданных	 - обязательный	
&НаСервереБезКонтекста
Процедура ДополнитьМассивыРеквизитовМетаПоРегиструСведений(МассивРеквизитовМета, МассивПроверяемыхРеквизитовМета, ОбъектМета)

	Для каждого измерение из ОбъектМета.Измерения Цикл
		Если измерение.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			МассивПроверяемыхРеквизитовМета.Добавить(измерение.Имя)
		КонецЕсли;                                                                      	
		МассивРеквизитовМета.Добавить(измерение.Имя)
	КонецЦикла;
	
	Для каждого ресурс из ОбъектМета.Ресурсы Цикл
		Если ресурс.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			МассивПроверяемыхРеквизитовМета.Добавить(ресурс.Имя)
		КонецЕсли;
		МассивРеквизитовМета.Добавить(ресурс.Имя)
	КонецЦикла;
	
КонецПроцедуры 
 
&НаСервереБезКонтекста
Функция ПолучитьТипПоляРегистраСведенийОбъектаМетаданных(ОбъектМетаданных, ИмяПоля)

	Измерение = ОбъектМетаданных.Измерения.Найти(ИмяПоля);
	Если Измерение <> Неопределено Тогда
		Возврат Измерение.Тип;
	КонецЕсли;
	
	Ресурс = ОбъектМетаданных.Ресурсы.Найти(ИмяПоля);
	Если Ресурс <> Неопределено Тогда
		Возврат Ресурс.Тип;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции 


// ЗАГРУЗКА 

&НаСервере
Процедура ЗагрузитьНаСервереРегистрСведенийИВернутьСообщения(МассивСообщений)
	
	ТаблицаЗначений = ДанныеТаблицыЗагрузка.Выгрузить();
	нТаблицаЗначений = ТаблицаЗначений.Скопировать(Новый Структура("Системный_Выбран", Истина));
	
	Если нТаблицаЗначений.Количество() = 0 Тогда
		МассивСообщений.Добавить("Нет элементов для загрузки");
		Возврат;	
	КонецЕсли;
	
	// измерения, всеСвойства
	СтруктураСвойствРегистра = ПолучитьСвойстваРегистраСведенийПоТабЗагрузка(нТаблицаЗначений); 
	
	// блок проверки уникальности записей
	ПериодичностьРегистра = Метаданные.РегистрыСведений[НаименованиеЗагрузка].ПериодичностьРегистраСведений;
	РегистПериодический = (ПериодичностьРегистра <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	Если РегистПериодический Тогда 
		ТабЗначенияИзмереней = нТаблицаЗначений.Скопировать(,СтруктураСвойствРегистра.измерения + ", Период");
	Иначе
		ТабЗначенияИзмереней = нТаблицаЗначений.Скопировать(,СтруктураСвойствРегистра.измерения);
	КонецЕсли;
	
	// ЗаписиУникальны, МассивСообщений
	ПроверкаУникальности = ПолучитьСтруктуруПроверкиУникальностиЗаписей(
		НаименованиеЗагрузка, 
		ТабЗначенияИзмереней, 
		СтруктураСвойствРегистра.измерения,
		РегистПериодический);
		
	Если (НЕ ПерезаписыватьСуществующиеЭлементы) И (НЕ ПроверкаУникальности.ЗаписиУникальны) Тогда
		МассивСообщений = ПроверкаУникальности.МассивСообщений; 
		Возврат; 
	КонецЕсли;
	
	// блок записи в регистр сведений
	МассивИзмерений = СтрРазделить(СтруктураСвойствРегистра.измерения, " ,", Ложь); 
	НаборЗаписей = РегистрыСведений[НаименованиеЗагрузка].СоздатьНаборЗаписей();
	Для каждого Элемент ИЗ нТаблицаЗначений Цикл
		
		// начала формирования сообщения пользователю
		СтрокаСообщения = "Запись с ключами(";
		СообщениеОбИзмерение = "";
		Для каждого Измерение Из МассивИзмерений Цикл
			Сообщение = СтрШаблон("%1: %2", Измерение, Элемент[Измерение]); 
			СообщениеОбИзмерение = СоздатьИлиДополнитьТекст(СообщениеОбИзмерение, Сообщение); 	
		КонецЦикла;

		// запись в БД
		Если ПерезаписыватьСуществующиеЭлементы Тогда
			
			Если РегистПериодический Тогда 
				НаборЗаписей.Отбор.Период.Установить(Элемент.Период);
			КонецЕсли;
					
			Для каждого Измерение Из МассивИзмерений Цикл
				НаборЗаписей.Отбор[Измерение].Установить(Элемент[Измерение]); 	
			КонецЦикла;
					
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей[0], Элемент, СтруктураСвойствРегистра.всеСвойства);
				КонецСообщения = ") успешна изменена"; 
			Иначе	
				НоваяЗапись = НаборЗаписей.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Элемент, СтруктураСвойствРегистра.всеСвойства);
				КонецСообщения = ") успешна записана";
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + КонецСообщения;
				МассивСообщений.Добавить(СтрокаСообщения);
				
			Исключение
				
				СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + ") не записана по причине " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				МассивСообщений.Добавить(СтрокаСообщения);
				
			КонецПопытки;
			
		Иначе
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Элемент, СтруктураСвойствРегистра.всеСвойства);
			
			Попытка
				
				НаборЗаписей.Записать();
				
				СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + ") успешна записана";
				МассивСообщений.Добавить(СтрокаСообщения);
			
			Исключение
				
				СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + ") не записана по причине " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				МассивСообщений.Добавить(СтрокаСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьМассивСИменамиКолонокиИзТабЗагрузка(ТаблицаЗначений)
	
	Имена = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл	
		Если Колонка.Имя <> "Выбрать" Тогда
			Имена.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Имена; 

КонецФункции 

&НаСервере
Функция ПолучитьСвойстваРегистраСведенийПоТабЗагрузка(ТаблицаЗначений)
	
	// массив имен колонок из таблицы загрузка
	МассивПолейВТаблице = ПолучитьМассивСИменамиКолонокиИзТабЗагрузка(ТаблицаЗначений);
	
	// реквизиты - Данные формы, поэтому нельзя вводить такую переменную
	Свойства = Новый Структура("измерения, всеСвойства", "", "");
	Для Каждого РеквизитСтрока Из МассивПолейВТаблице Цикл
				
		измерение = Метаданные.РегистрыСведений[НаименованиеЗагрузка].Измерения.Найти(РеквизитСтрока);
		ресурсы = Метаданные.РегистрыСведений[НаименованиеЗагрузка].Ресурсы.Найти(РеквизитСтрока);
		реквизитырегистра = Метаданные.РегистрыСведений[НаименованиеЗагрузка].Реквизиты.Найти(РеквизитСтрока);
		// у СтандартныеРеквизиты нет метода найти()
		Попытка
			стандартныеРеквизиты = Метаданные.РегистрыСведений[НаименованиеЗагрузка].СтандартныеРеквизиты[РеквизитСтрока].Имя;
		Исключение
			стандартныеРеквизиты = Неопределено;
		КонецПопытки;
		
		Если НЕ ЗначениеНеопределено(измерение) Тогда
			Свойства.измерения = СоздатьИлиДополнитьТекст(Свойства.измерения, строка(измерение));
			Свойства.всеСвойства = СоздатьИлиДополнитьТекст(Свойства.всеСвойства, строка(измерение));
		КонецЕсли;
		
		Если НЕ ЗначениеНеопределено(ресурсы) Тогда
			Свойства.всеСвойства = СоздатьИлиДополнитьТекст(Свойства.всеСвойства, строка(ресурсы));
		КонецЕсли;

		Если НЕ ЗначениеНеопределено(реквизитырегистра) Тогда
			Свойства.всеСвойства = СоздатьИлиДополнитьТекст(Свойства.всеСвойства, строка(реквизитырегистра));	
		КонецЕсли;

		Если НЕ ЗначениеНеопределено(стандартныеРеквизиты) Тогда
			Свойства.всеСвойства = СоздатьИлиДополнитьТекст(Свойства.всеСвойства, строка(стандартныеРеквизиты));
		КонецЕсли;
		
	КонецЦикла;    
	
	Возврат Свойства;	

КонецФункции 

&НаСервере
Функция ПолучитьСтруктуруПроверкиУникальностиЗаписей(Знач НаименованиеРегистра, ТабДанных, СписокИзмерений, ЭтоПериодическийРегист)
	
	МассивСообщений = Новый Массив;
	МассивИзмерений = СтрРазделить(СписокИзмерений, " ,", Ложь);
	
	Если ЭтоПериодическийРегист Тогда
		
		НаборЗаписей = РегистрыСведений[НаименованиеРегистра].СоздатьНаборЗаписей();
		Для каждого СтрокаИзмерения Из ТабДанных Цикл
			
			НаборЗаписей.Отбор.Период.Установить(СтрокаИзмерения.Период);			
			
			Для каждого Измерение Из МассивИзмерений Цикл
				НаборЗаписей.Отбор[Измерение].Установить(СтрокаИзмерения[Измерение]); 	
			КонецЦикла;
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				
				СтрокаСообщения = СтрШаблон("На период: %1 с ключами(", СтрокаИзмерения.Период);
				СообщениеОбИзмерение = "";
				Для каждого Измерение Из МассивИзмерений Цикл
					Сообщение = СтрШаблон("%1: %2", Измерение, СтрокаИзмерения[Измерение]); 
					СообщениеОбИзмерение = СоздатьИлиДополнитьТекст(СообщениеОбИзмерение, Сообщение); 	
				КонецЦикла;
				СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + ") уже создана запись";
				
				МассивСообщений.Добавить(СтрокаСообщения);
				
			КонецЕсли
		КонецЦикла;
		
	Иначе
		
		// формируем запрос
		ТекстЗапроса ="
		|ВЫБРАТЬ * поместить вт_Таб из &Таб как таб;
		|ВЫБРАТЬ * из РегистрСведений.НаименованиеРегистра как РС
		| Условие";
		
		// формируем условия для запроса
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаименованиеРегистра", НаименованиеРегистра);
		Условие = СтрШаблон("ГДЕ (%1) В (ВЫБРАТЬ * из вт_Таб)", СписокИзмерений);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Условие", Условие);
			
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Таб", ТабДанных);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаСообщения = "Запись с ключами( ";
			СообщениеОбИзмерение = "";
			Для каждого Измерение Из МассивИзмерений Цикл
				Сообщение = СтрШаблон("%1: %2", Измерение, Выборка[Измерение]); 
				СообщениеОбИзмерение = СоздатьИлиДополнитьТекст(СообщениеОбИзмерение, Сообщение); 	
			КонецЦикла;
			СтрокаСообщения = СтрокаСообщения + СообщениеОбИзмерение + ") уже создана";
			
			МассивСообщений.Добавить(СтрокаСообщения);
			
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ЗаписиУникальны, МассивСообщений");
	
	Если МассивСообщений.Количество() <> 0 Тогда
		СтруктураВозврата.ЗаписиУникальны = Ложь;
		СтруктураВозврата.МассивСообщений = МассивСообщений;
	Иначе
		СтруктураВозврата.ЗаписиУникальны = Истина;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
				
КонецФункции 


// ОБЩИЕ

&НаСервереБезКонтекста
Функция ЗначениеНеопределено(переменная)
	Возврат переменная = Неопределено;
КонецФункции

// Возвращает текст на основании переданных параметров...
// Основное назначение метода - дополнять текст новым предложением
//
// Параметры:
//
//  ОсновнойТекстОшибки - Строка - Старый текст ошибки, к которому нужно присоединить новый текст ошибки.
//
//  ДобавочныйТекстОшибки - Cтрока - Новый текст ошибки, который нужно присоединить к старому тексту ошибки.
&НаСервереБезКонтекста
Функция СоздатьИлиДополнитьТекст(ОсновнойТекст = "", ДобавочныйТекст)
	
	Если ПустаяСтрока(ДобавочныйТекст) Тогда
		Возврат ОсновнойТекст
	КонецЕсли;
	
	ОтсуствуетОсновнойТекст = ПустаяСтрока(ОсновнойТекст);
	
	Возврат ?(ОтсуствуетОсновнойТекст, ДобавочныйТекст, "" + ОсновнойТекст + ", " + ДобавочныйТекст);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоРегистрСведенийПоПолномуИмени(ПолнноеИмя)
	Возврат (Лев(ВРег(ПолнноеИмя),15) = "РЕГИСТРСВЕДЕНИЙ");
КонецФункции 

&НаСервере
Процедура ВыполнитьПослеПрочтенияНаСервере()
	Выполнить(ВыполняемыТекстПослеПрочтенияДанныхЗагрузка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПрочтения(Команда)
	ВыполнитьПослеПрочтенияНаСервере();
	УсловноОформитьДоступ("ПриПереключении");
КонецПроцедуры

#Область КоммандаЗаполнитьКолонку

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСписокКолонокТаблицыДляЗагрузки()
	
	Результат = Новый СписокЗначений;
	
	Тз = РеквизитФормыВЗначение("ДанныеТаблицыЗагрузка");
	
	Для каждого Колонка Из тз.Колонки Цикл
		
		Если Лев(Колонка.Имя,10) = "Системный_" Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Колонка.Имя);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПолучитьСписокКолонокТаблицыДляЗагрузки()


&НаКлиенте
Процедура ЗаполнитьКолонку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКолонкиЗавершение",ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения,ПолучитьСписокКолонокТаблицыДляЗагрузки(),Элементы.ДанныеТаблицыЗагрузка);
	
	УсловноОформитьДоступ("ПриПереключении");
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВыборКолонкиЗавершение(РезультатаВыбора,ДопПараметры) Экспорт 

	Если РезультатаВыбора = Неопределено Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ИмяКолонки = РезультатаВыбора.Значение;
	
	МассивТипов = ПолучитьТипыКолонки(ИмяКолонки);
	
	СписокТипов = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из МассивТипов Цикл
	
		СписокТипов.Добавить(ЭлементМассива);
	
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ИмяКолонки",ИмяКолонки);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанных", ЭтотОбъект,ДопПараметры);
	
	
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выбор типа данных");
	
		
	
	
КонецПроцедуры // ВыборКолонкиЗавершение()

&НаКлиенте
Процедура ОбработкаВыбораТипаДанных(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(ВыбранныйЭлемент.Значение);
		ОписаниеТипов = Новый ОписаниеТипов(Массив);    
		Результат = ОписаниеТипов.ПривестиЗначение();    
		Оповещение = Новый ОписаниеОповещения("ОписаниеЗакрытияФормыВыбора", ЭтотОбъект,СписокПараметров);
		ПоказатьВводЗначения(Оповещение,Результат,, ОписаниеТипов);
				
		
	
		
		
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура ОписаниеЗакрытияФормыВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("Все значения");
	СписокВариантов.Добавить("Только пустые");
	СписокВариантов.Добавить("Только заполненые");
	
	ДополнительныеПараметры.Вставить("ВыбраноеЗначение",РезультатЗакрытия);

	
	Оповещение = Новый ОписаниеОповещения("ОкончаниеВыбораВариантаЗаполнения", ЭтотОбъект,ДополнительныеПараметры);
	
	
	СписокВариантов.ПоказатьВыборЭлемента(Оповещение, "Выбор типа заполнения ");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьКолонкуНаСервере(ВыбранныйВариантЗаполнения,ДополнительныеПараметры) Экспорт
	
	ИмяКолонки 			= ДополнительныеПараметры.ИмяКолонки; 
	ВыбраноеЗначение 	= ДополнительныеПараметры.ВыбраноеЗначение;

	Для каждого СтрокаДанныхДляЗагрузки Из ДанныеТаблицыЗагрузка Цикл
		
		Если ВыбранныйВариантЗаполнения = "Только пустые" Тогда
			Если Не ЗначениеЗаполнено(СтрокаДанныхДляЗагрузки[ИмяКолонки]) Тогда
			
				 СтрокаДанныхДляЗагрузки[ИмяКолонки] = ВыбраноеЗначение; 
			
			КонецЕсли;
		ИначеЕсли ВыбранныйВариантЗаполнения = "Только заполненые" Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанныхДляЗагрузки[ИмяКолонки]) Тогда
			
				 СтрокаДанныхДляЗагрузки[ИмяКолонки] = ВыбраноеЗначение; 
			
			КонецЕсли;
			
		Иначе
			//все
			СтрокаДанныхДляЗагрузки[ИмяКолонки] = ВыбраноеЗначение; 
			
		КонецЕсли;
		
		
	КонецЦикла;

    УсловноОформитьДоступ("ПриПереключении");
КонецПроцедуры // ЗаполнитьКолонкуНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОкончаниеВыбораВариантаЗаполнения(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт

	   	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
		
	ЗаполнитьКолонкуНаСервере(ВыбранныйЭлемент.Значение,ДополнительныеПараметры);


КонецПроцедуры // фыва()



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьТипыКолонки(ИмяКолонки)

	 ТипЗначенияКолонки = РеквизитФормыВЗначение("ДанныеТаблицыЗагрузка").Колонки[ИмяКолонки].ТипЗначения;
	 
     Возврат ТипЗначенияКолонки.Типы();
	 
КонецФункции // ПолучитьИмяФормыВыбораЗначенияПоТипуКолонки()

&НаСервере
Процедура НастройитьШаблонПоОбъектуНаСервере(ВыбранноеЗначение,ДопПараметры)
	МассивРазделенияОбъекта = ДопПараметры.МассивРазделенияОбъекта;
	ИмяОсновногоОбъекта 	= МассивРазделенияОбъекта[0];
	ИдентификаторОбъекта 	= МассивРазделенияОбъекта[1];
	
	
	Если ИмяОсновногоОбъекта = "Справочник" Тогда
	
		ИмяМм = "Справочники";
	ИначеЕсли ИмяОсновногоОбъекта = "Документ" Тогда
	
		ИмяМм = "Документы";
		
	КонецЕсли;
	
	Если МассивРазделенияОбъекта.Количество() = 2 Тогда
		
		
		Для каждого РеквизитОбъекта Из Метаданные[ИмяМм][ИдентификаторОбъекта].СтандартныеРеквизиты Цикл
			
			Строки = Реквизиты.НайтиСтроки(Новый Структура("Представление",РеквизитОбъекта.Имя));
			
			Если Не Строки = Неопределено И Строки.Количество() > 0 Тогда
				Строки[0].Пометка = ЗначениеЗаполнено(ВыбранноеЗначение[РеквизитОбъекта.Имя]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого РеквизитОбъекта Из Метаданные[ИмяМм][ИдентификаторОбъекта].Реквизиты Цикл
		
			Строки = Реквизиты.НайтиСтроки(Новый Структура("Представление",РеквизитОбъекта.Имя));
			
			Если Не Строки = Неопределено И Строки.Количество() > 0 Тогда
				Строки[0].Пометка = ЗначениеЗаполнено(ВыбранноеЗначение[РеквизитОбъекта.Имя]);
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		ИмяТЧ = МассивРазделенияОбъекта[3];
		ИмяТЧПолное = СтрСоединить(МассивРазделенияОбъекта,".");
		
		
		ДеревоТаблицЗнч = РеквизитФормыВЗначение("ДеревоТаблиц");
		
		РабочаяТаблица = Неопределено;
		Для каждого СтрокаТаблица Из ДеревоТаблицЗнч.Строки Цикл
		
			Если СтрокаТаблица.Таблица = ИмяТЧПолное Тогда	
				РабочаяТаблица = СтрокаТаблица.Строки; 
				Прервать;
			КонецЕсли;       
			
		КонецЦикла;
		
	
		
		Для каждого РеквизитОбъекта Из Метаданные[ИмяМм][ИдентификаторОбъекта].ТабличныеЧасти[ИмяТЧ].СтандартныеРеквизиты Цикл
			
			Строки = РабочаяТаблица.НайтиСтроки(Новый Структура("РеквизитИмя",РеквизитОбъекта.Имя));
			
			Если Не Строки = Неопределено И Строки.Количество() > 0 Тогда
				Если ВыбранноеЗначение[ИмяТЧ].Количество() > 0 Тогда
					Строки[0].Пометка = ЗначениеЗаполнено(ВыбранноеЗначение[ИмяТЧ][0][РеквизитОбъекта.Имя]);
				Иначе
					Строки[0].Пометка = Ложь;
				КонецЕсли
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого РеквизитОбъекта Из Метаданные[ИмяМм][ИдентификаторОбъекта].ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
		
			Строки = РабочаяТаблица.НайтиСтроки(Новый Структура("РеквизитИмя",РеквизитОбъекта.Имя));
			
			Если Не Строки = Неопределено И Строки.Количество() > 0 Тогда
				Если ВыбранноеЗначение[ИмяТЧ].Количество() > 0 Тогда
					Строки[0].Пометка = ЗначениеЗаполнено(ВыбранноеЗначение[ИмяТЧ][0][РеквизитОбъекта.Имя]);
				Иначе
					Строки[0].Пометка = Ложь;
				КонецЕсли
			КонецЕсли;
		
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоТаблицЗнч,"ДеревоТаблиц");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройитьШаблонПоОбъекту(Команда)
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ДеревоТаблиц"  Тогда
		
		ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
		
		ИмяТаблицы = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Таблица;
		МассивРазделенияОбъекта  = СтрРазделить(ИмяТаблицы,".");
		
		ИмяОсновногоОбъекта 	= МассивРазделенияОбъекта[0];
		ИдентификаторОбъекта 	= МассивРазделенияОбъекта[1];
		
		ДопПараметры = Новый Структура("МассивРазделенияОбъекта",МассивРазделенияОбъекта);
		
		
	
		Если ИмяОсновногоОбъекта = "Справочник" Тогда     
			 Массив = Новый Массив;
			 Массив.Добавить(Тип("СправочникСсылка."+ИдентификаторОбъекта));
    		 ОписаниеТипов = Новый ОписаниеТипов(Массив);
			 ЗначениеДляВыбора = ОписаниеТипов.ПривестиЗначение();
		ИначеЕсли ИмяОсновногоОбъекта = "Документ" Тогда     
			 Массив = Новый Массив;
			 Массив.Добавить(Тип("ДокументСсылка."+ИдентификаторОбъекта));
    		 ОписаниеТипов = Новый ОписаниеТипов(Массив);
			 ЗначениеДляВыбора = ОписаниеТипов.ПривестиЗначение();
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "Реквизиты"  Тогда
			
		
		МассивРазделенияОбъекта  = СтрРазделить(ИмяОбъекта,".");
		
		ИмяОсновногоОбъекта 	= МассивРазделенияОбъекта[0];
		ИдентификаторОбъекта 	= МассивРазделенияОбъекта[1];
		
		ДопПараметры = Новый Структура("МассивРазделенияОбъекта",МассивРазделенияОбъекта);
	
		Если ИмяОсновногоОбъекта = "Справочник" Тогда     
			 Массив = Новый Массив;
			 Массив.Добавить(Тип("СправочникСсылка."+ИдентификаторОбъекта));
    		 ОписаниеТипов = Новый ОписаниеТипов(Массив);
			 ЗначениеДляВыбора = ОписаниеТипов.ПривестиЗначение();
		ИначеЕсли ИмяОсновногоОбъекта = "Документ" Тогда     
			 Массив = Новый Массив;
			 Массив.Добавить(Тип("ДокументСсылка."+ИдентификаторОбъекта));
    		 ОписаниеТипов = Новый ОписаниеТипов(Массив);
			 ЗначениеДляВыбора = ОписаниеТипов.ПривестиЗначение();
		КонецЕсли;
		
 
		
	
	Иначе
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОписаниеЗакрытияФормыВыбораНастройкаШаблонаПоОбъекту", ЭтотОбъект,ДопПараметры);
	ПоказатьВводЗначения(Оповещение,ЗначениеДляВыбора,, ОписаниеТипов);
	
КонецПроцедуры





&НаКлиенте
Процедура ОписаниеЗакрытияФормыВыбораНастройкаШаблонаПоОбъекту(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено  Тогда
	
		Возврат;
	
	КонецЕсли;
	
	
	НастройитьШаблонПоОбъектуНаСервере(РезультатЗакрытия,ДополнительныеПараметры);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлСКодом(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Оповщение = Новый ОписаниеОповещения("ОткрытьФайлСКодомПосле",ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповщение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлСКодомПосле(РезультатВыбора,ДопПараметры) Экспорт;
	Если РезультатВыбора = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	ФайлСКодом = Новый ТекстовыйДокумент(); 
	ФайлСКодом.Прочитать(РезультатВыбора[0],КодировкаТекста.UTF8);
	
	ВыполняемыТекстПослеПрочтенияДанныхЗагрузка = ФайлСКодом.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлСКодом(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Оповщение = Новый ОписаниеОповещения("СохранитьФайлСКодомПосле",ЭтотОбъект);
	
	ИмяФайлаСКодомДляСохранения = "ТЗПС_";
	Если ЗначениеЗаполнено(ПолнноеИмяОбъектаЗагрузка) Тогда
		ПлнИмя =  Врег(ПолнноеИмяОбъектаЗагрузка);
		ПлнИмя = СтрЗаменить(ПлнИмя,"ДОКУМЕНТ.","ДОК.");
		ПлнИмя = СтрЗаменить(ПлнИмя,"СПРАВОЧНИК.","СПР.");
		ПлнИмя = СтрЗаменить(ПлнИмя,"ПЛАНВИДОВХАРАКТЕРИСТИК.","ПВХ.");
		ПлнИмя = СтрЗаменить(ПлнИмя,".ТАБЛИЧНАЯЧАСТЬ.",".ТЧ.");
		
		ИмяФайлаСКодомДляСохранения	= ИмяФайлаСКодомДляСохранения + СтрЗаменить(ПлнИмя,".","_");
		
		
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗагрузка) Тогда
		
		РезультатРазделения = СтрРазделить(СтруктураЗагрузка,"\");
		
		Если Не РезультатРазделения = Неопределено И РезультатРазделения.Количество() > 0 Тогда
		
			Разделение2 =   СтрРазделить(РезультатРазделения[РезультатРазделения.Количество()-1],".");
			
			Если Не Разделение2 = Неопределено И Разделение2.Количество() > 0 Тогда
				ИмяФайлаСКодомДляСохранения = ИмяФайлаСКодомДляСохранения + "_"+Разделение2[0];
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	ДиалогВыбораФайла.Расширение = "txt";
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаСКодомДляСохранения;
	ДиалогВыбораФайла.Показать(Оповщение);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлСКодомПосле(РезультатВыбора,ДопПараметры) Экспорт;
	Если РезультатВыбора = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	ФайлСКодом = Новый ТекстовыйДокумент(); 
	ФайлСКодом.УстановитьТекст(ВыполняемыТекстПослеПрочтенияДанныхЗагрузка);
	ФайлСКодом.Записать(РезультатВыбора[0],КодировкаТекста.UTF8);
	
	
КонецПроцедуры



#КонецОбласти


#КонецОбласти
//{{MRG[ <-> ]
//@# (Конец) Курдогло Сергей [16.02.2023 17:00:27]
//==============================================
//}}MRG[ <-> ]
//{{MRG[ <-> ]
////@# (Конец) Голуб Вениамин [07.02.2023 16:35:44]
